---
title: "Robust Environments: `{renv}`"
editor: source
engine: knitr
execute:
  eval: false
  warning: false
  message: false
code-annotations: hover
categories: [intermediate]
abstract: |
  In this chapter you will learn how your reproducible research project becomes robust against different package versions.
  You will make it easy for you to and collaborators to use the same package versions in your joint project.
---

## Introduction

Now a project is well-named including its files and folders.
It is well-structured and follows a community standard as Psych-DS.
It follows the FAIR principles.
The code is written in the tidyverse-style.
Is it reproducible?
Well, it may be.
Very likely, it is not.
However, we have done a great job in organizing our research project.
The previous chapters dealt with a possible architecture of a reproducible research project.
But still, there are things to improve.
The next chapter will deal with reproducible computational environments.
For an introduction, read the example below:

Imagine you need to reproduce the results of a research article from 2019.
The project structure is openly available at [OSF](https://osf.io/) or at [Zenodo](https://zenodo.org/).
You find a nice structure, run a script but then you get an error message in R like:

```{zsh filename="Output"}
#| code-copy: false
Error in function_name(object[[i]], ...) : could not find function "function_name"
```

R is telling you that it cannot find a function called `function_name`.
A similar problem can be that only arguments of a function are not found.
However, the script runs correctly at the device of the researcher writing the script.
Thus, you are facing a research project that is only reproducible on the **same device** it was written on.
A possible reason is that your computational environment differs from the environment of the other researcher.
You might have installed different versions of R packages or of {{< fa brands r-project >}} itself.

::: {.callout-tip title="Computational environments" collapse="true"}

Computational environments include everything associated with technical infrastructure and software for conducting data analyses and reproducing scientific results.
This comprises operating systems (Apple, Windows, Linux), software versions (R 4.3.1, 4.4.1, 4.4.2, etc.), and different versions of packages (dplyr 0.8.0, 1.1.4).
It is important to consider your computational environment when it comes to computational reproducibility.
The longer the time interval between creation and reproduction of your code is, the more likely reproducibility is not possible because of different computational environments.
Software progresses over time, which is good in general.
However, different versions of software include that some functions will not work in future versions or will do different things.
Thus, it is important to keep track of the computational environment during creation of code and analyses.

This done by so called **Package Management Systems**.
Package Management Systems install and keep track of software and software versions, export files that specify these required software packages/versions and that can be shared with others [@community2022].
Thus, environments can be replicated, either manually or via the Package Management System.
In this chapter, we will introduce the Package Mangament System `{renv}`.

:::

Different computational environments can hinder computational reproducibility.
In the example above, the code cannot be executed.
However, sometimes package updates do only change the calculation of a function or an argument.
Thus, a different package version leads to **different results** even though the code runs correctly.

::: {.callout-important title="Problems of different computational environments"}

- scripts could stop running because of different functions or arguments
- scripts could run correctly but produce different results
:::

::: {.callout-tip title="How `renv` helps aligning computational environments"}

With `renv`...

- package versions can be safed inside a research project
- collaborators can easily load the same package versions independent of their device
- R projects become isolated, portable and reproducible [@ushey2024]
:::

<!--# What we will be able to do after this chapter -->

## `renv`

`renv` is a package that cares about the different versions of your used packages.
To get the most out of this chapter, we encourage you to create a new *test project* in RStudio where you can try out the functions that you are about to learn.
To use `renv` as package dependency manager, you only need to install it, as every other package in {{< fa brands r-project >}}.

```{zsh filename="Console"}
install.packages("renv")
```

::: {.callout-tip title="Benefits of `renv`"}
- easy documenting package versions
- easy restoring of older package versions
<!--# Is this callout-box redundant to the one above?-->
:::

### `renv`-functions

The `renv` package is very powerful because it does a lot of useful things while only needing 4 (+1) functions. 
Before we start, it is helpful to disentangle a couple of terms.
A **library** is a directory containing multiple packages.
This is confusing because you load packages with the command `library(package)`.
The command does not load a library, but a package.
Until now you install packages into your **System library** with `install.packages("package")` and load these packages within this library with `library(package)`.
Packages in the system library are independent from your project. 
With `renv`, we will start to use **project libraries**.
Thus, we will install and use packages to a library that meets the requirement for your specific projects.
However, it might occur that you have to install the same packages multiple times when you want to use them across multiple projects.

#### `renv::init`

When you start using `renv`, we recommend you to set up an R-project before.
If you do not know how to do that, see @sec-rproject.
With `renv::init()`, we initialize our reproducible, computational environment.
With this command, a couple of files and folders are created.

- `.Rprofile` is a file that automatically runs every time you start your R-project.
`renv` uses it to set up your project library.
Thus, once you have turned on your project library, it remains active until you turn it off.

- `renv/library` contains all the packages you are currently using.
This is now your project library.
With different libraries for different projects you have the benefit of *isolation*.
When a package version changes in one project, it does not affect your other projects.

- The lockfile `renv.lock` contains all the **metadata** of your packages to reinstall it on a new machine.
It serves as documentation about which package and which version of the packages you use.
It also displays the R version used in your particular project.

<details>
<summary>Click here to view the full `renv.lock` file of this project.</summary>
```{json, filename="renv.lock"}
#| file: renv.lock
#| code-line-numbers: true
```
</details>

In summary, we do not recommend to manually change the contents of the files and folders that belong to `renv`.
Rather, the following R functions are good tools to manage your reproducible environments from the console.

#### `renv::install`

With `renv::install`, we can install new packages to our project.
Assume you need the package `palmerpenguins` in your project.

```{r filename="Console"}
#| echo: true
#| eval: false

renv::install("palmerpenguins")
```

`renv` will download the package `palmerpenguins`.
If you want to install packages with dependencies, `renv` will install these dependencies automatically.
In your console you will be asked if you want to install the package to your project library.
Type `Y` in to your console.

```{zsh filename="Output"}
#| code-copy: false
# Downloading packages -------------------------------------------------------
- Downloading palmerpenguins from CRAN ...      OK [2.9 Mb in 1.8s]
Successfully downloaded 1 package in 2.1 seconds.

The following package(s) will be installed:
- palmerpenguins [0.1.1]
These packages will be installed into "~/Documents/repro-book/renv/library/macos/R-4.4/aarch64-apple-darwin20".

Do you want to proceed? [Y/n]: 
```

After that, you should see something in your console similar to this:

```{zsh filename="Output"}
#| code-copy: false
# Installing packages --------------------------------------------------------
- Installing palmerpenguins ...                 OK [installed binary and cached in 0.34s]
Successfully installed 1 package in 0.42 seconds.
```

Now you have installed the package `palmerpenguins` to your project library.

::: {.callout-note title="What are dependencies?" collapse="true"}
Some packages require other packages to be loaded.
These other packages are called dependencies.
Your primary package depends on these other packages to run correctly.

The package `psychonetrics` has a lot of packages.
Install the package to see what happens.

```{r filename="Console"}
#| echo: true
#| eval: false

renv::install("psychonetrics")
```
:::

#### `renv::snapshot`

When you search in the lockfile for your new installed package `palmerpenguins`, you will not find it there.
`renv` does not automatically saves the metadata of your installed packages in the lockfile.
With `renv::snapshot()`, we can document the package versions we need in our project.
Simply run the command in your Console

```{r filename="Console"}
#| echo: true
#| eval: false

renv::snapshot()
```

In your Console, you will see something like this:

```{zsh, filename="Output"}
#| code-copy: false
- The lockfile is already up to date.
```

`renv` did not add the metadata about palmerpenguins to the lockfile.
This is because `renv` checks if your package is really used somewhere in your project.
The bare installation is not enough.
This is to not unnecessarily overload the lockfile with packages that are not used in the project.
The package has to be used and therefore loaded somewhere in the project.
Create a script `test_palmerpenguins.R`, type `library(palmerpenguins)`, and save it in your project.
Then try the snapshot command again:

```{r filename="Console"}
#| echo: true
#| eval: false

renv::snapshot()
```

Your console should have an output like this:

```{zsh filename="Output"}
#| code-copy: false
The following package(s) will be updated in the lockfile:

# CRAN -----------------------------------------------
- palmerpenguins    [* -> 0.1.1]

Do you want to proceed? [Y/n]: 
```

Again, type `Y`.
Then, you should see an output like this:

```{zsh filename="Output"}
#| code-copy: false

- Lockfile written to "path/to/your/project/folder/renv.lock".
```

When you open the lockfile, you will find the metadata of palmerpenguins there.
`renv::snapshot()` is useful because you and your collaborators will be able to reconstruct your package versions. The reconstruction relies on the lockfile and `renv::snapshot()` will update your current packages used in your project.

#### `renv::restore`

Say you successfully built up a project library, installed packages to it and saved the metadata into your lockfile.
Future you or other collaborators or researchers now want to reproduce your code and need to use the particular package versions.
The collaborators found your project and code and downloaded it.
They now want to install the particular package versions.
To simplify this step, one can use the `renv::restore()` function.

```{r filename="Console"}
#| echo: true
#| eval: false

renv::restore()
```

Then you should get an output like this:

```{zsh filename="Output"}
#| code-copy: false
The following package(s) will be updated:

# CRAN -----------------------------------------------------------------------
- fontawesome    [0.5.2 -> 0.5.3]
- knitr          [1.48 -> 1.49]
- rmarkdown      [2.28 -> 2.29]
- tinytex        [0.53 -> 0.54]
- cyclocomp      [* -> 1.1.1]
- lazyeval       [* -> 0.2.2]
- lintr          [* -> 3.1.2]
- remotes        [* -> 2.5.0]
- rex            [* -> 1.2.1]
- xmlparsedata   [* -> 1.0.5]

Do you want to proceed? [Y/n]:
```

Type in `Y` and you should get an output similar to this:

```{zsh}
#| filename: "Output"
#| code-copy: false

# Downloading packages -------------------------------------------------------
- Querying repositories for available binary packages ... Done!
- Downloading rmarkdown from CRAN ...           OK [2.5 Mb in 1.2s]
- Downloading fontawesome from CRAN ...         OK [1.3 Mb in 0.89s]
- Downloading knitr from CRAN ...               OK [1.1 Mb in 1.1s]
- Downloading tinytex from CRAN ...             OK [140.3 Kb in 0.68s]
Successfully downloaded 4 packages in 6.4 seconds.

# Installing packages --------------------------------------------------------
- Installing fontawesome ...                    OK [installed binary and cached in 0.26s]
- Installing knitr ...                          OK [installed binary and cached in 1.2s]
- Installing tinytex ...                        OK [installed binary and cached in 0.24s]
- Installing rmarkdown ...                      OK [installed binary and cached in 1.6s]
- Installing remotes ...                        OK [linked from cache]
- Installing cyclocomp ...                      OK [linked from cache]
- Installing lazyeval ...                       OK [linked from cache]
- Installing rex ...                            OK [linked from cache]
- Installing xmlparsedata ...                   OK [linked from cache]
- Installing lintr ...                          OK [linked from cache]

The following loaded package(s) have been updated:
- knitr
Restart your R session to use the new versions.

```

#### `renv::status`

You can check the status of your dependency management by using `renv::status()`.

```{r}
#| filename: "Console"
#| eval: false
#| echo: true
renv::status()
```

If everything is alright, you should get an output message similar to this:

```{zsh}
#| filename: "Output"
#| code-copy: false
No issues found -- the project is in a consistent state.
```


However, there can still arise some issues.
You can see an example below

```{zsh}
#| filename: "Output"
#| code-copy: false
The following package(s) are in an inconsistent state:

 package  installed recorded used
 ellipsis y         y        n   

See `?renv::status` for advice on resolving these issues.
```

Fortunately, the messages displayed by `renv` are very straightforward.
It tells us to go to the helper page by running `?renv::status`.


::: {.callout-tip title="Read the documentation of `renv::status()`" collapse="true"}

You can just run `?renv::status()` in the Console to open the documentation of that function in the Help pane of RStudio.
However, the documentation is also available at CRAN when you open the link below.
Read the documentation carefully to extract the relevant information that applies to your case.

{{< fa display >}} <https://cran.r-project.org/web/packages/renv/renv.pdf#page=56>

---

```{=html}
<iframe width="100%" height="100%" src="https://cran.r-project.org/web/packages/renv/renv.pdf#page=56" title="renv documentation"></iframe>
```
:::

In the helping page our case is well-described in the section **Lockfile vs `dependencies()`**.
We can just run `renv::snapshot` to remove it from the lockfile.
Thus, our lockfile does not contain the unused package `ellipsis`.

Now you got an overview of the most important functions of the package `{renv}`.
The next section will provide you with information on how to use renv in a workflow.
However, if you still want to get to know the functions better, we recommend the video in the box below (@tip-renv-rapp) by @rapp2024.

::: {#tip-renv-rapp .callout-tip title="Video explaining basic `renv` functions" collapse=true}
For further information, see this video to increase your understanding of `{renv}`.

::: {#vid-renv-rapp}

{{< video https://www.youtube.com/watch?v=Oen9xhEh8PY >}}

**"Robust R Code That Will Work Forever With {renv}".**
The video by @rapp2024 aims to display and explain common workflows when creating a reproducible environment using `{renv}`.
License: not specified.
Reused without modifications.

:::

:::

### `renv`-workflow

```{r}
#| results: asis
#| eval: true
#| echo: false
#| label: renv-workflow
cat(make_figure("renv-workflow"))
```

In @fig-renv-workflow, you can see how the basic functions in `renv` work.
You know the most important things now, but it sure can help to have a guideline.

::: {.callout-tip title="Step-by-step guide for `renv`"}
::: panel-tabset
## Create a reproducible environment

1. Create an [R project](@sec-rproject)
1. Install `renv` $\rightarrow$ `install.packages("renv")`
1. Initialize reproducible environment $\rightarrow$ `renv::init()`
1. Check status $\rightarrow$ `renv::status()`
1. Use help page from `renv::status` $\rightarrow$ `?renv::status()`
1. Install packages to project library $\rightarrow$ `renv::install()`
1. Code something that makes you happy, e.g. a wonderful plot
1. Save your used packages into your lockfile $\rightarrow$ `renv::snapshot()`

## Reproduce such an environment

1. Download the project folder e.g. from <https://osf.io> or <https://zenodo.org>
1. Open R project by clicking the `.Rproj` file
1. Check status $\rightarrow$ `renv::status()`
1. Use help page from `renv::status` $\rightarrow$ `?renv::status()`
1. Restore the project library from the lockfile $\rightarrow$ `renv::restore()`
1. Run the code written be past you or an other researcher
:::
:::


## Limitations of `renv`

As you can see in the lockfile, `renv` tracks not only the package versions but also the R version.
However, `renv` cannot solve reproducibility issues when it comes to different R versions.
It is possible to deal with this problem installing the specific R version used in the project you want to reproduce.
Another way is using *docker*.
However, it requires more time and work to make a project reproducible.
Further, the benefits of separate projects comes with a constraint.
Possible bug fixes that are included in later versions of a package are not implemented in the project libraries.
Nevertheless, we recommend `renv` as a valuable tool for increasing a project's reproducibility.


## References

somehow include:

- https://rstudio.github.io/renv/articles/renv.html
