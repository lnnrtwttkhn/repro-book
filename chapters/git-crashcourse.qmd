---
title: "Git crashcourse"
engine: knitr
execute:
  eval: false
  warning: false
  message: false
categories: [beginner, basics]
abstract: |
  In this chapter, you will learn the basics of using the distributed version control system Git in RStudio.
---

::: {.callout-tip appearance="minimal"}
<h5>Learning Objectives</h5>

:bulb: You understand what version control and Git are and why they're useful.<br>
:bulb: You can use Git in RStudio and apply it to your own research project.<br>
:bulb: You can connect to a remote repository on GitHub.<br>
:bulb: You can collaborate with others on a repository via GitHub.<br>
:::

## Introduction

In this chapter you will get to know the basic structure of Git and how you can use it in your own projects.
This is simply meant as a crashcourse to understand the basics and only covers how to do so in RStudio.
If you would like a more comprehensive approach to learning Git and version control, we highly recommend the [Version Control Book](https://lennartwittkuhn.com/version-control-book/).
It was created by some of the same people as the Repro book, that you are currently reading and follows a similar structure.
It does focus on teaching Git using the command line but can be a good place to go if you have questions, need to fix a mistake or simply want to learn more about the beautiful world of version control using Git.
Another great resource, that is even more comprehensive and heavily informed the Version Control Book, is the [Turing Way](https://book.the-turing-way.org/reproducible-research/vcs).

::: {.callout-tip title="What is the command line?" collapse="false"}

>You are most likely used to interact with programs on your computer through graphical user interfaces (GUIs) where you can select options through graphical icons and visual indicators using the computer mouse.
>However, computers have historically been controlled through text-based commands typed into command-line interfaces (CLIs) using the computer keyboard.
>To this day, the command line has persisted as a reliable (and sometimes the only) way to effectively interact with computer programs. - @wittkuhn2024, chapter on the [command line](https://lennartwittkuhn.com/version-control-book/chapters/command-line.html)

:::

::: {.callout-tip title="How to open the command line on your computer" collapse="false"}

::: panel-tabset
## MacOS

To open a command-line tool on a Mac, open the *Finder*, click on *Applications*, then on *Utilities*.
In the folder *Utilities*, you will find the application **Terminal**.
Open it, and you can use the command line.

## Windows

Press the Windows-Button {{< fa brands windows >}} so that your search pane opens on the computer.
Type *cmd* into the search field.
Then, the command line should pop up.
Hit **Enter** and you open the command line.

:::

:::

### What are Git and version control and why are they useful

You've likely come across the illustration below before in this book, but it helps illustrate why using version control can make your workflow and collaboration that much smoother.

```{r}
#| results: asis
#| eval: true
#| echo: false
cat(make_figure("final-doc-comic"))
```

Version control allows you to keep working on the same file whilst not losing your previous versions.
Just imagine you are working on a code, that is working perfectly fine,let's call this 01_code.
You now add a new feature to 01_code for which you change parts of the previous code.
Accidentally, you've created a bug and now your whole code doesn't run anymore.
You've changed too much to simply remember what you would need to do to get back to 01_code.
Would it not be great to travel back in time to your working 01_code?
In a way version control allows you to do this.
It essentially allows you to take snapshots of your work and you can go back to them at any point.  

Git is a software, that allows you to do just this.

### Git and reproducibility
Version control is a reproducibility measure you can implement to help yourself succeed in your research.
Think about it as reproducibility for your own future self or others.
Furthermore, it can be a great tool to collaborate with others in your projects if you make projects accessible by using remote repositories.

### Some limitations

Git is not good at tracking very large files such as pure text files like a .docx document.

## First steps
### Installation
To use Git, you have to install it first.
Depending on your operating system, you might already have Git installed.
For macOS Git comes preinstalled from version XYZ onwards.
For Windows this is not the case and you'll also   
If you do not have Git installed yet or are unsure if you do, please follow the instructions found in the [Version Control Book](https://lennartwittkuhn.com/version-control-book/chapters/installation.html).

### Repository
In the world of Git, your project is referred to as a repositors.
More specifically, repository or repo for short, refers to the folderstructure that you are tracking with Git, which usually is the same as your project.
Sometimes these terms are used interchangeably but when using Git and GitHub, your project is called a repository.

## Using Git in RStudio

Git is well integrated in RStudio and offers a GUI for Git.
As long as you have Git installed on your computer, it is very easy to use it in RStudio and add it to existing projects.
Whilst originally Git is a command line based program, using the GUI of RStudio makes it often more intuitive and can be faster for standard commands than typing them out.
However, for some actions, using the command line is still necessary.

### Setting up Git in an existing R project

Before setting up Git in an existing R project, make sure you are in your intended project in RStudio.
Now, to set up Git, simply go to 'Tools', then 'Version Control', 'Project Setup...', see the screenshot below, and choose Git as the version control system in the Pop-up window. Confirm both the initialization of a Git repository in your project, as well as the RStudio restart.

![This screenshot shows where to find the version control feature in RStudio . Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/git-initialize.jpg)

Well done, now you should have a added tab for Git next to your environment pane, which is usually found in the upper right corner.
It should look something like below.

![This screenshot shows where to find Git pane in RStudio. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/git-pane.jpg)

Here you can see all of your projects file, which so far are not tracked by Git.

#### .gitignore file

Now that you've added Git to your repository, a **.gitignore** file was automatically added to it.
This file lists all the files that are **not** tracked aka ignored by Git.
You can and should add files that you don't want to be included in the version history in here.

This is useful to:  
1. Keep your repository **free of unnecessary files**, that would only clutter it.
 You should ignore files that can be recreated by using code from your repository, e.g., plots you created in your data analysis.  
2. Keep **private** or sensitive information out of the version control history, which you might later share.  
3. **Not slow down** working with your repository by adding big files, such as datasets to the .gitignore file.
Additionally, you shouldn't need to track changes when it's reproducible from your raw data and code.  

To add files to .gitignore, just open the .gitignore file and list the files you don't want to be tracked in it.
There will already be some files listed there that are being ignored by default.

### General workflow with Git

When using Git, the most basic workflow is:  
1. Make changes to your files  
2. Stage files  
3. Commit your changes  

### Staging

**Staging** is essentially telling Git, which files and changes you want it to track in your next commit.
It is like adding items to your shopping cart but not yet buying them.
You have to do this before being able to create a commit.
When staging files, keep in mind what changes and files to include in a single commit.
This can be all the files that you changed in order to fix a bug or to include a new feature, but could be divided up into smaller commits as well.

In order to stage a file in RStudio, simply tick the box on the left of the file name in the Git pane. 
There, all your files that have changes you have saved but not yet tracked with Git will show up.
Logically, after you have first initialized Git in a repository, all the files will show up there as they have not yet been tracked.
You can go ahead and stage all the files and then click 'Commit' in the Git pane.
Below you can see how this could look like.

![This screenshot shows ow to stage files in RStudio. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/git-inital-staging.jpg)

### Committing
A **commit** is like a screenshot of your current work.
Everything that you have previously **staged** will be included in the next commit and makes up that specific version of your repository that you are saving.
You can create a new commit at any point of time.
It is usually better to commit often rather than seldom.
But also committing too often can make your commit history overwhelming and hard to find specific changes.

In RStudio, after having staged your files you can simply make a commit by pressing the 'Commit' button in the Git window.
Now you add a commit message.
Below you can see how this would look like for the initial commit, including the commit message.

![This screenshot shows creating the initial commit in RStudio. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/git-initial-commit.jpg)

For the commit message, it's important to be concise and descriptive of what your changes did, as this is what you will later see listed in the commit history.
If you do want to go back to a previous version later on, the commit messages need to be understandable enough for you and others to easily spot the correct one.
By convention, start your message with a verb in the imperative, e.g., 'Add', 'Fix', 'Remove'.
Now simply press the 'Commit' button below the message.
Congrats, you just created your first commit.  

::: {.callout-tip title="How to create better commit messages" collapse=false}
It might help you to imagine these two scenarios, when trying to create better commit messages:  
1. Impersonate a strict, tight-lipped, demanding commander that yells what you are supposed to be doing at you in one short sentence.  
2. Think about your message being read by your vicious archnemesis, who doesn't want to understand what you did there.
(Similarly, you could also think about yourself in 5 months time, not having touched your project at all and barely remembering what it was about.)  
Another great way to think about what to include in your commit message are your answers to the questions: 
What?
Why?
Where?
In all of this, please remember: It is still better to commit than to overthink the messages, however your collaborators, including your future self will thank you for not leaving them empty and being concise and precise.
:::

::: {.callout-tip title="Amending a commit" collapse=true}
When creating a new commit you have the option to check the bow 'Amend previous commit'.
This adds your newly staged changes to the commit you made previously and gives it the commit message you just entered.
This can be useful if you forgot to add some changes or if you are essentially still working on the same thing and want to keep your commit history cleaner.
It can also be useful if you just want to change your previous commit's message.
Simply write the corrected commit message, check the 'Amend previous commit' button and commit it.
Just be careful tat you did not stage any files, if you only want to change the message.
:::

### Retrieving previous versions

One major advantages of version control is being able to retrieve previous versions of your documents.
To do this, click the 'History' button in the Git pane.
This shows you a list of your previous commits, e.g., in the screenshot below, you can see the commit '63289c71' with the commit message "Add love message to version control".

![This screenshot shows the history of . Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/git-history-love-message.jpg)

Here, you can already see, why descriptive commit messages are so valuable, especially when there will be more than just three.  
You can see which changes were made in that commit.
Navigate to the version you want to bring back and click on 'Save as', which allows you to replace your current file with the previous version.

![This screenshot shows the history of . Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/git-revert history.jpg)

![This screenshot shows the history of . Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/git-revert-history-save.jpg)

Simply save it as you are prompted to do.
Now as a last step, save, stage and commit the file again as you normally would, to have Git track the change you just made.
Now, you just travelled back in time and reset your file to a previous version.

### Branches


### Merging
Possible using GUI or only with command line? if so refer to GUI until then and switch to the command line for this

Merging refers to combining two branches with each other.
When you merge a branch with main, you add the work that you have finished on another branch to your main branch.

## Remote repositories

**Advantages of using remote repositories**:  
1. Collaboration  
2. Easy publishing/sharing of your work  
3. Backup  
4. Workflow optimization  

### GitHub

GitHub is a popular platform for hosting remote repositories.
You can connect to it and have all your lo
As a student, you have free access to the pro-version of GitHub, which allows you to create XYZ?

### Connecting to GitHub

There are several things you need to do the first time you want to create a remote repository.  
1. Create a GitHub Account.
You can follow the instructions for creating a GitHub account here on the [Version Control Book-Connecting to a remote](https://lennartwittkuhn.com/version-control-book/chapters/remotes-intro.html#creating-an-account).
2. In order to connect to GitHub, you need to establish an authentication method.
This is in order to ensure that you are actually allowed to access and change certain repositories, when accessing them from your local computer and is necessary before being able to connect a local to a remote repository.
In order to to this, please refer to the [Version Control Book](https://lennartwittkuhn.com/version-control-book/chapters/remotes-intro.html#authentication) as it provides detailed instructions for both Windows and MacOS users.
Unfortunately in this case, you can not do this using the RStudio GUI but instead use your command line.
This is a once time process, so please don't be deterred by it and the advantages of having access to your remote repositories definitively makes it worthwhile.

### Connecting your local and remote repository

After having successfully created a GitHub account and setting up the authentication method, you can now move on to creating your first repository on GitHub and connecting it to your local repository.
Simply head to the [GitHub Startpage](https://github.com/) (make sure you are logged in) , click on the '+' and select 'New repository'. 

![This screenshot shows where to find the 'New repository' feature on GitHub. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/github-new-repo.jpg)

Now, you can go ahead and set up your repository by assigning it a name.
To simplify things for yourself and avoid confusion once you have several repositories on GitHub, a good option is to give your remote repository the same name as your local repository.
You also have to choose whether you want to make your repository 'Public' or 'Private'.
A public repository and its content can be viewed by anyone.
A private repository only you and explicitly added collaborators can view and add to.
You can change this setting later on, meaning that whilst working on it, you want to keep your code and other files private but upon publication want to make it accessible to be easily reproducible.  
Other than that, you can simply click 'Create repository' at the bottom of the page and you've just created your first GitHub repository.

Now, as a last step, you need to connect your local and remote repositories.
Do do this, simply copy the HTTPS **or** SSH URL and head back to your repository in RStudio.

::: {.callout-warning title="SSH vs PAT URL" collapse=false}
Take care to use the HTTPS URL (httsp://) if you use PAT for authentication and the SSH URL (git@github.com) if you use an SSH key.
:::

![This screenshot shows where to find the HTTPS and SSH URL on a repository on GitHub. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/github-startpage-repo.jpg)

Now you now run the command 'git remote add origin <your SSH or HTTPS URL>' in your terminal (see below).

To check if adding your remote repository has properly worked, you can run the command 'git remote -v', which should return the following output, referencing the remote repository you just added.

```{markdown filename="Output"}
#| code-copy: false
origin  git@github.com: <your username/name of your repo>.git (fetch)
origin  git@github.com: <your username/name of your repo>.git (push)
```

### Pushing 

Now you have your remote and local repository connected.
However, as of now, none of the contents of your local repository are on the remote one.
To get them there, you **push** it to the remote.
This in a way "uploads" your local files and later on your changes to the designated remote repository.
In order to push for the first time, go to your terminal and use the command 'git push -u origin main'.
This tells Git that you want to push your main branch to your remote repository which is commonly referred to as 'origin'.
The marker '-u' tells git that it should also call the remote branch main, same as your local version.
Have a look below what the output message after the initial push can look like in RStudio.
Now the files on the main branch of your local and remote repository should look the same.

![This screenshot shows the output after the initial push to a remote repository in RStudio. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/git-remote-initial-push.jpg)

After this initial push, you can use RStudio's GUI again and when wanting to push just make sure you are on the right branch and use 'Push' in the Git pane, which has the green arrow next to it.

### Pull requests

![This screenshot shows . Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/github-create-pr.jpg)

### Issues

![This screenshot shows the creation of an issue on GitHub. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/github-issue.jpg)

### Collaborative GitHub workflow

Now that you have a remote repository, it is very easy to collaborate with others using it.
Instead of having to send each other files back and forth, having to wait for others to edit them before being able to move on with your part, as well as having many different versions
Simply add them in the repositories settings under access.
They can then accept this collaborator role and 

##Acknowledgments



