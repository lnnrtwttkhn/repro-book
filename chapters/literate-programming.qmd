---
title: "Literate Programming"
editor: source
engine: knitr
execute:
  eval: false
  warning: false
  message: false
code-annotations: hover
categories: [intermediate]
abstract: |
  In this chapter you will learn how you can automatically integrate your reproducible results into a paper.
  You will learn how to write a paper in with Quarto and how to format it for a required output.
  You will learn how to use extension, specifically the apaquarto extension to write reproducible paper in APA-style.
---

::: {.callout-tip appearance="minimal"}
<h5>Learning Objectives</h5>

:bulb: Learn the basics about the markdown syntax.<br>
:bulb: Work on a new branch in your Git repository.<br>
:bulb: Create a new report file using Quarto.<br>
:bulb: Learn more advanced syntax: include a reference.bib file<br>
:bulb: Learn more advanced syntax: the YAML header<br>
:bulb: Learn more advanced syntax: add a quarto apa extension to the file (see wjschne/apaquarto)<br>
:bulb: Rewrite the report in quarto
:::

## Introduction

Imagine you are writing a paper.
You have learned a lot about reproducibility (even perhaps in this book), you like the idea, and you want to apply the standards that make your research more reproducible.
You have a project structure according to your community standard, you use human and machine-readable names, you provide a lot of metadata, you track your analyses with Git, and you even set up a robust, reproducible environment for all the R packages you need for your analyses.
You now want to start writing your paper, open e.g. MS Word, and start writing.
At some point you write the *Results* section.
Now you want to insert your results in your Word-Document.
Some frustrating work begins, where you start to type the results of your analyses in Word.
Further, you inserted the figures that visualize your findings.
It took a while, but finally everything is included in that Word document -- congratulations.

Happily you ask some colleagues and your supervisor to review the paper.
They make some comments about your theoretical background and also about - oh gosh -  your results.
You did forget to filter some cases in the beginning and now you have to rerun the analysis.
No problem, you smoothly got the updated results, but then you realize that you have to insert the slightly different figures and results into your Word Document.
All this effort of typing the results from your R code to Word has to be done again.
This can happen many times during your research process.
Not only by colleagues and supervisors, but also when you found out an error by yourself.
Another possibility are reviewers, when you submitted a preprint to a journal.
During this process, it is very likely that you mix up some results, e.g. writing the *p* value of your first hypothesis to your second hypothesis.
Thus, transferring results from your statistic program to a text program is an opportunity for reproducibility errors.
Not because you are dumb, it is because you are human.
However, there is a solution to this problem - and it is called **Literate Programming**.

## What is literate programming?

Literate programming is a form of programming in which text and source code are in **one document**.
It is based on the idea that a code should be easy and enjoyable to read and aimed at being understood by humans, which was called *Literate Programming* by @knuth84.
Instead of writing code and later annotating it with comments, literate programming suggests to write a text in the order that a person would logically conceive it and include the code as it is explained in the text.
Thus, in literate programming, text is used to make code understandable.
<!--A well-known example are Jupyter Notebooks where normal text is interwoven with code-chunks that are executable within the text.
# I think that not many people can refer to Jupyter Notebooks (at least in the seminar)-->
However, the concept of literate programming was extended to the idea that the text should not support the explanation for the code but rather the code can be an explanation of the document.
Thus, one can write a whole paper and uses code directly in that document to support the claims made in that document.
The code in these documents are stored in **chunks** (see later section) and are executable.

Literate programming allows for creating **reproducible documents** instead of just reproducible script as well as making for a smoother workflow, as there is no need for switching out old and new outputs in your documents when the code changed.
As an example, when you write an article in a document using literate programming and insert a code chunk that creates a plot, this code chunk's output (i.e. the plot) is part of your document and is always up to date with the script you're running.
Hence, whenever you have to do some changes in your plot or your analyses, the changes are directly updated in your paper.
Thus, the paper becomes [dynamic](@nte-dynamic-documents).
Moreover, literate programming can heavily reduce outcome-based reproducibility errors (@sec-repro-errors).

::: {#nte-dynamic-documents .callout-note title="Static vs. Dynamic documents" collapse="true"}
One can discriminate static and dynamic documents.
Most documents are static, since they do not refer to underlying data or content.
They are typically generated once and do rarely need updates.

On the other hand, dynamic documents are generated anew if some underlying data or content changes.
They are often automatically recreated and use some kind of code to generate up-to-date content.
Since research paper are often reviewed and many changes must be done, one can view paper as dynamic documents.

**Examples**

|Static documents|Dynamic documents|
|:--------------|:------------------|
|working agreement|research paper|
|bills|dashboards|

<!-- I am not happy about this discrimination. I have to look over it again--> 

:::

:::{.callout-tip title="Literate programming benefits for reproducibility"}

1. Reduce outcome-based reproducibility errors
1. Save time when updating your paper's results section
1. Enhance transparency, traceability, and reproducibility of your results

:::

## What is Quarto?

Quarto is an open-source **Publishing System**.
It allows you to do literate programming.
It was created by the company Posit, which is responsible for RStudio and is based on RMarkdown.
Quarto is well integrated in RStudio and comes already bundled with any version of RStudio from RStudio v2022.07.1 "Spotted Wakerobin" onward (<https://docs.posit.co/ide/user/ide/guide/documents/quarto-project.html#installing-quarto>).
It is able to execute several different programming languages like Python and R.

![This illustration shows schematically that one can have input in different languages and Quarto will produce different output formats. Artwork from "Hello, Quarto" keynote by Julia Lowndes and Mine Ã‡etinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/horst-quarto-schematic.jpg)

Quarto can be useful for creating websites, presentations, articles or books.
Looking back at the article-plot example, Quarto will render the code chunk that is part of your document that creates the plot when creating an output like a pdf file and insert it automatically.

See the example of a Quarto document that contains human-readable text and a code chunk that will create a plot, as well as it's rendered version below.

![On the left is a Quarto document in RStudio, containing a code chunk that creates a simple plot. On the right is the rendered version of the document, showing the text and the plot. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/quarto-example-document-plot.jpg)

## How to use Quarto

In this book, we will focus on using Quarto in RStudio, but Quarto can also be used with other editors such as VSCode or Jupyter.
To start using Quarto and create Quarto documents, head to RStudio and in the upper left corner select **File \> New File \> Quarto Document...**.
This will open a box that prompts you to give your document a title, which will appear at the top of your document's rendered version, as well as choosing the format that your output will be in.
Either HTML, PDF or Word are possible by default.
The standard output is HTML and for PDF or Word, LaTeX or MS Word are required.
HTML files can also easily be turned into PDF files later on and the format is changeable. 
Depending on your project, there are other available format options as well.
The metadata of title and format is stored in the so called **YAML header** at the top of your page.
This is also where you can further customize some general features of your file, such as the author, a subtitle, the date or the style of your document. 

<!--Insert pullout box about what info can be put into the YAML -->

To get a preview of a Quarto file in RStudio, you can either use `quarto preview` in the command line or the **Render** button at the top of your document.
This will show you how your rendered document will look like and if you check the **Render on Save** box at the top of the document, will update live as you save your changes.

## Markdown

In Quarto documents, **Markdown** is used as a syntax.
In Markdown content and formatting are integrated with each other and not separate.
This formatting is used in Quarto or on GitHub or on a smaller scale in WhatsApp or Reddit.  
There are some advantage over more commonly known way of formatting in e.g., MS Word.
Using an integrated approach to formatting and writing allows for faster writing, as there is no need to switch between the two.
You just format as you type.
Another advantage is compatibility between different text editors.
Any program that uses Markdown will format a document written in it the exact same way. 
Another advantage is that Git can track the changes made to text written with Markdown, allowing for version control of your written work the same way as of your code.  
Disadvantages are that there are overall less formatting options as the intention is keep it simple and it can be difficult or unintuitive to insert tables and images.  

Formatting can be done using either the `Source` or `Visual` mode in RStudio.
In the `Source` mode you use Markdown syntax to format your written work and in the `Visual` mode you use a User-Interface similar to how you would use in e.g., MS Word.
Switch between the two at any time.
The changes made in the `Visual`mode will appear in the `Source` mode in Markdown as well.
Take a look at the two different modes and the rendered version of the document below with some simple formatting options.

![On the left is the Source mode of the .qmd file and on the right the Visual formatting mode. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/quarto-visual-source-mode.jpg)

Now, take a look at the rendered version of the document and how each of the formatting options plays out.

![A screenshot of the rendered version of a document to showcase some formatting options. Used under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0) license.](../static/quarto-rendered-formatting.jpg)

Have a look at the different formatting options available.

::: panel-tabset
# Text formatting

| Input                          | Output                        |
|--------------------------------|-------------------------------|
| `*italics* and **bold**`       | *italics* and **bold**        |
| `superscript^2 / subscript~2~` | superscript^2^ / subscript~2~ |
| `~~strikethrough~~`            | ~~strikethrough~~             |
| `` `verbatim code` ``          | `verbatim code`               |

::: footer
Sources: [RStudio - Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html), [Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto](https://drmowinckels.github.io/quartaki/) and [Introduction to Quarto - Wittkuhn and Pagenstedt](https://lennartwittkuhn.com/training/2023-12-01-training-quarto-uhh.html)
:::

# Headings

<table>
<thead>
<tr class="header">
<th><p>Input</p></th>
<th><p>Output</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p><code># Header 1</code></p></td>
<td><h1>Header 1</h1></td>
</tr>
<tr class="even">
<td><p><code>## Header 2</code></p></td>
<td><h2>Header 2</h2></td>
</tr>
<tr class="odd">
<td><p><code>### Header 3</code></p></td>
<td><h3>Header 3</h3></td>
</tr>
<tr class="even">
<td><p><code>#### Header 4</code></p></td>
<td><h4>Header 4</h4></td>
</tr>
<tr class="odd">
<td><p><code>##### Header 5</code></p></td>
<td><h5>Header 5</h5></td>
</tr>
<tr class="even">
<td><p><code>###### Header 6</code></p></td>
<td><h6>Header 6</h6></td>
</tr>
</tbody>
</table>

::: footer
Sources: [RStudio - Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html), [Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto](https://drmowinckels.github.io/quartaki/) and [Introduction to Quarto - Wittkuhn and Pagenstedt](https://lennartwittkuhn.com/training/2023-12-01-training-quarto-uhh.html)
:::

# Lists

**Input**

``` {markdown}
#| code-copy: false
*Unordered list*

* unordered list
        + sub-item 1
        + sub-item 2

*Ordered list: Standard numbering*
  
1. ordered list
2. item 2
  1. sub-item 1

*Ordered list: All 1:*

1. ordered list
1. item 2
1. item 3
1. item 4

*Tasklist*

- [ ] Task 1
- [ ] Task 2

```

**Output**

* unordered list
  + sub-item 1
  + sub-item 2

*Ordered list: Standard numbering*  

1. ordered list  
2. item 2  
   1. sub-item 1  

*Ordered list: All 1:*  

1. ordered list  
1. item 2  
1. item 3  
1. item 4

*Tasklist*

- [ ] Task 1
- [ ] Task 2

:bulb: The tasklist can be ticked off.

::: footer
Sources: [RStudio - Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html), [Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto](https://drmowinckels.github.io/quartaki/) and [Introduction to Quarto - Wittkuhn and Pagenstedt](https://lennartwittkuhn.com/training/2023-12-01-training-quarto-uhh.html)
:::

# Tables

**Input**

```{markdown}
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |
```

**Output**

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |

:bulb: Tip: Use a [Markdown table generator](https://www.tablesgenerator.com/markdown_tables) or the visual mode in RStudio to generate tables.

::: footer
Sources: [RStudio - Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html), [Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto](https://drmowinckels.github.io/quartaki/) and [Introduction to Quarto - Wittkuhn and Pagenstedt](https://lennartwittkuhn.com/training/2023-12-01-training-quarto-uhh.html)
:::

# Equations

| Input                       | Output                    |
|-----------------------------|---------------------------|
| `inline math: $E = mc^{2}$` | inline math: $E = mc^{2}$ |
| `$$E = mc^{2}$$`            | $$E = mc^{2}$$            |

::: footer
Sources: [RStudio - Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html), [Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto](https://drmowinckels.github.io/quartaki/) and [Introduction to Quarto - Wittkuhn and Pagenstedt](https://lennartwittkuhn.com/training/2023-12-01-training-quarto-uhh.html)
:::

# Blockquotes

**Input**

`> Blockquote`

**Output**

> Blockquote

::: footer
Sources: [RStudio - Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html), [Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto](https://drmowinckels.github.io/quartaki/) and [Introduction to Quarto - Wittkuhn and Pagenstedt](https://lennartwittkuhn.com/training/2023-12-01-training-quarto-uhh.html)
:::

# Links & Images

| Input | Output |
|----------------------------------|--------------------------------------|
| `<https://quarto.org/>` | <https://quarto.org/> |
| `[Quarto](https://quarto.org/)` | [Quarto](https://quarto.org/) |
| `![Caption](https://quarto.org/quarto.png)` | ![Caption](https://quarto.org/quarto.png) |
| `[![Caption](https://quarto.org/quarto.png)](https://quarto.org)` | [![Caption](https://quarto.org/quarto.png)](https://quarto.org) |

::: footer
Sources: [RStudio - Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html), [Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto](https://drmowinckels.github.io/quartaki/) and [Introduction to Quarto - Wittkuhn and Pagenstedt](https://lennartwittkuhn.com/training/2023-12-01-training-quarto-uhh.html)
:::

:::

## The YAML header

:::{.callout-tip title="Different YAML settings" collapse=true}
:::

:::{.callout-note title="View: This chapter's YAML file" collapse=true}
<!-- Note: The YAML header is only static.
We can work on making it dynamic later. -->
```
---
title: "Literate Programming"
editor: source
engine: knitr
execute:
  eval: false
  warning: false
  message: false
code-annotations: hover
categories: [intermediate]
abstract: |
  In this chapter you will learn how you can automatically integrate your reproducible results into a paper.
  You will learn how to write a paper in with Quarto and how to format it for a required output.
  You will learn how to use extension, specifically the apaquarto extension to write reproducible paper in APA-style.
---
```
:::

## Features

There are some nice features that can be implemented in Quarto, such as including code chunks, as mentioned before with the example of a plot, inline code as well as referencing and citations.

### Code chunks

-   **Executable code:** Quarto files support code execution during rendering
-   Code chunks can be interactive
-   **Customizable options:** Specify various options for code chunks
-   You can also use *inline code*
-   R code enclosed by: ```` ```{r} code ``` ````

#### Examples
##### Input
```{r}
#| output: FALSE
#| label: code-example
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 1, 3, 5)
plot(x, y, main = "Scatter Plot Example", xlab = "X-Axis", ylab = "Y-Axis")
```

##### Output

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 1, 3, 5)
plot(x, y, main = "Scatter Plot Example", xlab = "X-Axis", ylab = "Y-Axis")
```

### Inline code

::::: {.columns}
:::: {.column width="50%"}
::: {.fragment}
#### Input

```{markdown filename="Code"}
Number of observations: `r 8*20`
```
:::
::::
:::: {.column width="50%"}
::: {.fragment}
#### Output

Number of observations: `r 8*20`
:::
::::
:::::

::: {.notes}
Code: you don't have to use it for a new entry book but its possible
:::

### Referencing

-   You can name and references objects like figures, tables etc.
-   For example: @sec-citations (`@sec-citations`)

| Type         | Label Prefix |
|--------------|--------------|
| Figures      | fig-         |
| Tables       | tbl-         |
| Equations    | eq-          |
| Sections     | sec-         |
| Code listing | lst-         |
| Theorem      | thm-         |

::: footer
Sources: [RStudio - Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html), [Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto](https://drmowinckels.github.io/quartaki/)
:::

### Citations {#sec-citations}

-   Citations can be added via **Insert** > **Citation**
-   Citations can also be added directly with `@`
-   References are stored in [BibTeX](https://www.bibtex.org/) files in your project

+----------------------------------------------+--------------------------------------------------------------+
| Markdown Format                              | Output (author-date format)                                  |
+==============================================+==============================================================+
| ```                                          | Blip blop bloop [see @chacon2014, pp. 33-35; also , chap. 1] |
| Blip blop bloop [see @chacon2014, pp. 33-35; |                                                              |
| also @ggseg, chap. 1]                        |                                                              |
| ```                                          |                                                              |
+----------------------------------------------+--------------------------------------------------------------+
| ```                                          | Blip blop bloop [@chacon2014, pp. 33-35, 38-39 and passim]   |
| Blip blop bloop [@chacon2014, pp. 33-35,     |                                                              |
| 38-39 and passim]                            |                                                              |
| ```                                          |                                                              |
+----------------------------------------------+--------------------------------------------------------------+
| ```                                          | Blip blop bloop [@chacon2014].                               |
| Blip blop bloop [@chacon2014].               |                                                              |
| ```                                          |                                                              |
+----------------------------------------------+--------------------------------------------------------------+
| ```                                          | Lennart says blah [-@chacon2014]                             |
| They say blah [-@chacon2014]                 |                                                              |
| ```                                          |                                                              |
+----------------------------------------------+--------------------------------------------------------------+
| ```                                          | @chacon2014 says bloop.                                      |
| @chacon2014 says bloop.                      |                                                              |
| ```                                          |                                                              |
+----------------------------------------------+--------------------------------------------------------------+

::: footer
Sources: [RStudio - Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html), [Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto](https://drmowinckels.github.io/quartaki/)
:::

:::{.callout-note title="The `references.bib` file" collapse=true}
:::


## Quarto extensions

One nice feature of Quarto are it's [extensions](https://quarto.org/docs/extensions/).
These extensions are created from Quarto users to extend the behavior and functionality of quarto.
Since Quarto contributes to the movement of Open Science and Reproducibility, these extensions are freely available.

### The `apaquarto` extension {.unnumbered}

In this book, we will only deal with one extension - the `apaquarto` extension by William Joel Schneider.
With this extension, we can shape the output of our rendered quarto file into the format of the [APA guidelines](https://apastyle.apa.org/)[^1] without much effort.

[^1]: Many journals and universities require submissions to be in the APA format.
Thus, we think it is useful for many students and researchers to know about this extension.

### Install apaquarto

To install `apaquarto`, there are some prerequisites that you most likely already fulfil.

1. Install Quarto

1. Install a programming language (e.g {{< fa brands r-project >}})

1. Install a programming environment (e.g. RStudio)

After you have installed all things things, you can successfully install `apaquarto`.

To install apaquarto, the installation guide offers multiple scenarios (see @tip-apaquarto-installation-guide).
According to the guide, it is possible to install the extension from the Terminal and from the Console.
However, in our experience, the console sometimes lead to errors, which is why we recommend to use the Terminal.

Steps to install the apaquarto extension:

1. Open your project folder in RStudio.
In the folder you should write the Quarto document.

1. Go to the terminal in RStudio

1. Type the following command in the command line of the Terminal:

```{zsh filename="Terminal"}
quarto add wjschne/apaquarto
```

4. You will get an output like this:

```{zsh filename="Output"}
Quarto extensions may execute code when documents are rendered.
If you do not trust the author of the extension,
we recommend that you do not install or use the extension.
? Do you trust the authors of this extention (Y/n) >
```

5. Type in **Y** and hit **Enter**.
Then you will get another output like this:

```{zsh filename="Output"}

[:check:] Downloading
[:check:] Unzipping
          Found 1 extensions.
          
The following changes will be made:
My Document in APA Style, Seventh Edition    [No change]    (formats)
? Would you like to continue (Y/n) >
```

6. Again, type in **Y** and hit **Enter**

::: {#tip-apaquarto-installation-guide .callout-tip title="View: The `apaquarto` installation guide by William Joel Schneider" collapse="true"}

{{< fa display >}} <https://wjschne.github.io/apaquarto/installation.html>

```{=html}
<iframe width="100%" height="200%" src="https://wjschne.github.io/apaquarto/installation.html" title="Installation instructions for apaquarto extension"></iframe>
```

:::

### Resources

-   <https://quarto.org/>
-   <https://lennartwittkuhn.com/training/2023-12-01-training-quarto-uhh.html>
