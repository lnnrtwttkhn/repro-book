[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Repro Book",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "contents.html",
    "href": "contents.html",
    "title": "Contents",
    "section": "",
    "text": "The estimate of the reading time for each chapter is computed by counting the words in the chapter and assuming a reading speed of 200 words per minute.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Reading Time (Low to High)\n        \n         \n          Reading Time (High to Low)\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nDecember 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNaming things\n\n\n\n\n\n\nbeginner\n\n\nbasics\n\n\n\nIn this chapter you will learn how to name things. \n\n\n\n\n\n13 min\n\n\nDecember 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nGood Coding Practices\n\n\n\n\n\nIn the last chapters, you have learned how to name your names and variables and how to set up an organized project structure. In this chapter, you will learn good coding practices to help other researchers and your future self with the code you used for your analysis. \n\n\n\n\n\n21 min\n\n\nDecember 3, 2024\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Contents"
    ]
  },
  {
    "objectID": "chapters/intro.html",
    "href": "chapters/intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html",
    "href": "chapters/naming-things.html",
    "title": "2  Naming things",
    "section": "",
    "text": "2.1 Examples\nReflect on your first research project (or perhaps your most recent project). Take a moment to look at all the files you needed for that project. Can you determine what they contain just by their names? Below, you will find a real-life example from a second-semester undergraduate student in psychology. Which files would you want to encounter when you start reproducing results?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#examples",
    "href": "chapters/naming-things.html#examples",
    "title": "2  Naming things",
    "section": "",
    "text": "Exercise: What is bad or good about these file names?\n\n\n\n\n\nPause for a moment and think about what exactly makes the file names above bad or better? Discuss with a learning partner.\n\n\n\n\n2.1.1 Bad names\n\n PsychologyExample 2\n\n\n\n\n\nOutput\n\nAssignment BO\nDateien fÅr eigene Studien\nImages\nSessions by lecturer\nData results.pptx\nOutput behaviour observation 1. attempt.spv\nSPSS Results slightly shortened.pptx\nSPSS Results.pptx\nStatistical Analyses.docx\nSyntax behavior observation attempt 1.sps\n\n\n\n\n\n\n\nOutput\n\nmyabstract.docx\nJoe’s Filenames Use Spaces and Punctuation.xlsx\nfigure 1.png\nfig 2.png\nJW7d^(2sl@deletethisandyourcareerisoverWx2*.txt\n\n\n\n\n\n\n\n2.1.2 Better names\n\n PsychologyExample 2\n\n\n\n\n\nOutput\n\n01_session-slides\n02_images\n03_data\n04_assignment_behavior-observation\n2019-07-04_output_results_behavior-observation_attempt-1.spv\n2019-07-04_syntax_behavior-observation_attempt-1.sps\n2019-07-07_results_statistical-analyses.docx\n2019-07-09_SPSS_results.pptx\n2019-07-10_SPSS_results_short.pptx\n2019-07-11_data-results.pptx\n\n\n\n\n\n\n\nOutput\n\n2014-06-08_abstract-for-sla.docx\njoes-filenames-are-getting-better.xlsx\nfig01_scatterplot-talk-length-vs-interest.png\nfig02_histogram-talk-attendance.png\n1986-01-28_raw-data-from-challenger-o-rings.txt",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#introduction",
    "href": "chapters/naming-things.html#introduction",
    "title": "2  Naming things",
    "section": "2.2 Introduction",
    "text": "2.2 Introduction\n\n“There are only two hard things in Computer Science: cache invalidation and naming things.” – Phil Karlton\n\nIn research, naming things can often be more difficult than it seems. Whether you’re giving names to variables in a dataset, labeling files for your projects, or creating functions in a script, the names you choose are important for making your work clear and understandable. Good names help others (and yourself!) know what your work is about and how to use it.\nFinding the right names takes careful thought. You need to consider what makes sense in context and how to be clear and consistent. This chapter will look at some common challenges people face when naming things in research and provide simple tips to improve your naming practices. By understanding these challenges, you can make your research easier to follow and more accessible to others and avoid situations as illustrated in Figure 2.1.\n\n\n\n\n\n\nFigure 2.1: “A story told in file names” by Jorge Cham (License: ; All content copyright 1997-2003 Piled Higher and Deeper Publishing, LLC.)\n\n\n\n\n\n\n\n\n\nOk, what the heck is cache invalidation and why is it hard?\n\n\n\n\n\nCache invalidation is the process of updating or removing old data stored in a cache (a temporary storage area) when the original data changes. Caches are used to speed up access to frequently used data, but if the cache isn’t updated correctly, it may end up providing outdated or incorrect information. It is challenging for several reasons: first, determining the right moment to update the cache can be difficult, risking the delivery of outdated information. Additionally, many data pieces are interconnected, making it hard to track what needs updating when changes occur. Lastly, automatically updating caches can slow down systems, so finding a balance between performance and accuracy is tricky. These complexities make effective cache invalidation one of the more difficult problems in software development.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#principles-for-file-names",
    "href": "chapters/naming-things.html#principles-for-file-names",
    "title": "2  Naming things",
    "section": "2.3 Principles for (file) names",
    "text": "2.3 Principles for (file) names\nGood file naming practices are essential for organization, clarity, and efficient file management. Here are some key principles to follow when creating file names:\n\nMachine readable\nHuman readable\nConsistency\nPlay well with default ordering",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#machine-readable",
    "href": "chapters/naming-things.html#machine-readable",
    "title": "2  Naming things",
    "section": "2.4 Machine readable",
    "text": "2.4 Machine readable\nA file is machine-readable if information is formatted in a way that a computer can easily read and understand it without needing a human to interpret or manually enter the data. This often involves using standardized data formats like CSV, XML, or JSON, which are structured so that computer programs can process the information quickly and accurately. There are two main concepts that help computers quickly search and match patterns in text or file names, making data processing tasks easier and faster: regular expressions and globbing.\n\n2.4.1 Regular expression and globbing friendly\nBoth regular expression and globbing are concepts that help make working with files and data more efficient for automation and scripting tasks.\nA regular expression, often called a “regex”, is a sequence of characters that defines a search pattern. It’s used to find or match specific combinations of characters within text. You can think of it as a tool for searching text in a very precise and flexible way.\nGlobbing is a way to use special characters (called “wildcards”) to match multiple files or directories in command-line interfaces or scripts. It helps you to select groups of files without typing every single name.\nCommon wildcards in globbing:\n\n* (asterisk): Matches any number of characters. For example, *.txt matches all files ending with .txt.\n? (question mark): Matches exactly one character. For example, file?.txt matches file1.txt and file2.txt, but not file10.txt.\n\nSo, if you wanted to list all text files in a directory, you could use the pattern *.txt, and it would match all files with the .txt extension.\n\n\n2.4.2 How to make files regex and globbing friendy\nTo make file names regex and globbing friendly, avoid:\n\nspaces\npunctuation\naccented characters\ncase sensitivity\n\n\n\n\n\n\n\nWhat are regular expressions?\n\n\n\n\n\nA regular expression is a special sequence of characters that helps you to search for patterns in text. It allows you to find specific words or phrases within a larger body of text. For example, imagine you have a text document and you want to find all email addresses mentioned in it. You can use the following regular expression to search for email addresses:\n\n\n\nCode\n\n\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\n\n\nThis pattern will match any text that looks like an email address, such as example@email.com. Imagine that you have a text like the following:\n\nPlease contact me at john.doe@email.com for any inquiries. You can also reach out to jane.smith@example.com for more information.\n\nYou can see regular expression in action with this example:\n\n\n\nCode\n\necho \"Please contact me at john.doe@email.com for any inquiries. You can also reach out to jane.smith@example.com for more information.\" | grep -Eo \"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\"\n\n\nHere is what happens with this command:\n\necho is used to display the sample text.\nThe pipe (|) sends the output of echo as input to grep.\ngrep -Eo enables extended regular expressions and prints only the matching part of the line.\nThe regular expression \\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b is used to identify email addresses in the text output by echo.\n\nYou can also paste the example text into a text file, for example called example.txt and then apply the same command to the text file:\n\n\n\nCode\n\ngrep -Eo \"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\" example.txt\n\n\nHere you can see the output:\n\n\n\nOutput\n\njohn.doe@email.com\njane.smith@example.com\n\n\n\n\n\n\n\n\n\n\n\nWhat is globbing?\n\n\n\n\n\nGlobbing refers to the use of wildcard characters (like * and ?) to match multiple files or directories in command-line interfaces and scripting. Being globbing friendly means file names or paths are structured in a way that makes them easy to match using these wildcards.\nFor example, let’s assume that you have three files like YYYY-MM-DD_NEOFFI_numerical-stroop_bsc-thesis_01.csv and YYYY-MM-DD_NEOFFI_emotional-stroop_msc-thesis_01.csv. You can use a glob pattern like *emotional* to match all of your data sets associated with the emotional stroop task.\n\n PsychologyBiology\n\n\nExcerpt of complete file listing:\n\n\n\nOutput\n\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_01.csv\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_02.csv\n2021-02-19_NEOFFI_numerical-stroop_bsc-thesis_03.csv\n2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\n2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\n2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\n2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\n\n\n\n\nExcerpt of complete file listing:\n\n\n\nOutput\n\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H01.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H02.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A01.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A02.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A04.csv\n\n\n\n\n\n\n PsychologyBiology\n\n\n\n Bash macOS\n\n\n\n\n\nCode\n\nls *emotional*\n\n\n\n\n\nOutput\n\n2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\n2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\n2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\n2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\n\n\n\n\nPut image of macOS screenshot here\n\n\n\n\n\nCode\n\nlist.files(pattern = \"emotional\") |&gt; head\n\n\n\n\n\nOutput\n\n[1] \"2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\"\n[2] \"2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\"\n[3] \"2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\"\n[4] \"2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\"\n\n\n\n\n\n\n\n\n Bash macOS\n\n\n\n\n\nCode\n\nls *Plasmid*\n\n\n\n\n\nOutput\n\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H01.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H02.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H03.csv\n\n\n\n\nPut image of macOS screenshot here\n\n\n\n\n\nCode\n\nlist.files(pattern = \"Plasmid\") |&gt; head\n\n\n\n\n\nOutput\n\n[1] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_A01.csv\"\n[2] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_A02.csv\"\n[3] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_A03.csv\"\n[4] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_B01.csv\"\n[5] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_B02.csv\"\n[6] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_B03.csv\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.3 Recover meta data from file names\nMetadata is information that describes key details about a file, like the date it was created, the author, or the type of data it contains. Including metadata in a filename (for example, 2023_Experiment1_DrSmith.csv) is helpful because it makes important details visible at a glance. This helps with organizing, searching, and sorting files, especially in large projects where you may have many similar files. By storing metadata in filenames, you can quickly understand what each file contains without opening it, saving time and reducing errors in data management.\n\n2.4.3.1 How to recover meta data from file names\nDeliberate use of underscores (_) and hyphens (-) allows us to recover metadata from file names.\n\nUse underscores (_) to delimit units of metadata\nUse hyphens (-) to delimit words to improve human readability\n\n\n PsychologyBiology\n\n\n\n\n\n\n\n\n\nCode\n\nflist &lt;- list.files(pattern = \"emotional\") %&gt;% head\nstringr::str_split_fixed(flist, \"[_\\\\.]\", 6)\n\n\n\n\n\nOutput\n\n# date survey paradigm project participant\n      [ ,1]        [ ,2]    [ ,3]              [ ,4]        [ ,5] [ ,6]  \n[1, ] \"2021-06-04\" \"NEOFFI\" \"emotional-stroop\" \"msc-thesis\" \"001\" \"csv\"\n[2, ] \"2021-06-05\" \"NEOFFI\" \"emotional-stroop\" \"msc-thesis\" \"002\" \"csv\"\n[3, ] \"2021-06-07\" \"NEOFFI\" \"emotional-stroop\" \"msc-thesis\" \"003\" \"csv\"\n[4, ] \"2021-06-11\" \"NEOFFI\" \"emotional-stroop\" \"msc-thesis\" \"004\" \"csv\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\nflist &lt;- list.files(pattern = \"Plasmid\") %&gt;% head\nstringr::str_split_fixed(flist, \"[_\\\\.]\", 5)\n\n\n\n\n\nOutput\n\n# date assay sampleset well\n     [ ,1]        [ ,2]            [ ,3]                                  [ ,4] [ ,5]\n[1,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"A01\" \"csv\"\n[2,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"A02\" \"csv\"\n[3,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"A03\" \"csv\"\n[4,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"B01\" \"csv\"\n[5,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"B02\" \"csv\"\n[6,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"B03\" \"csv\"\n\n\n\n\n\n\n\n\n\n\n\n2.4.4 Summary\nNames are more easily machine-readable if they are:\n\nEasy to search for files later.\nEasy to narrow file lists based on names.\nEasy to extract information from file names, for example, by splitting them.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#human-readable",
    "href": "chapters/naming-things.html#human-readable",
    "title": "2  Naming things",
    "section": "2.5 Human readable",
    "text": "2.5 Human readable\nNames of files and folders should contain information about its content. It should make it easy to figure out what something is based on the file name. This idea connects to the concept of a slug from semantic URLs.\n\n\n\n\n\n\nWhat is a slug in a URL?\n\n\n\n\n\nA slug is a part of a URL that is easy to read and understand. It usually comes after the main website address and describes the content of the page in simple words. Slugs are important for both humans and search engines because they give a clear idea of what the page is about.\nFor example:\n\nThe full URL might be: https://www.example.com/blog/how-to-cook-pasta\nThe slug in this URL is: how-to-cook-pasta\n\nGood slugs are short, descriptive, and use hyphens to separate words. This makes the URL more user-friendly and helps search engines understand the page content.\n\n\n\nFind the slug in the following file names:\n\n PsychologyBiology\n\n\n\n\n\nOutput\n\n01_DSM-5-data.csv\n02_pre-analysis-filtering.r\n03_test-hypotheses.r\n04_exploratory-analyses.r\n90_DSM-V-codebook.csv\nhelper01_load-packages.r\nhelper02_load-codebook.r\nhelper03_test-assumptions.r\nhelper04_load-figure-template.r\n\n\n\n\n\n\n\nOutput\n\n01_marshal-data.r\n02_pre-dea-filtering.r\n03_dea-with-limma-voom.r\n04_explore-dea-results.r\n90_limma-model-term-name-fiasco.r\nhelper01_load-counts.r\nhelper02_load-exp-des.r\nhelper03_load-focus-statinf.r\nhelper04_extract-and-tidy.r\n\n\n\n\n\nWhich filenames make it easier to understand their content?\n\n PsychologyBiology\n\n\n\n\n\nOutput\n\n01_DSM-5-data.csv\n02_pre-analysis-filtering.md\n02_pre-analysis-filtering.r\n03_test-hypotheses.md\n03_test-hypotheses.r\n04_exploratory-analyses.md\n04_exploratory-analyses.r\n90_DSM-codebook.csv\nMakefile\nfigure\nhelper01_load-packages.r\nhelper02_load-codebook.r\nhelper03_test-assumptions.r\nhelper04_load-figure-template.r\ntmp.txt\n\n\n\n\n\nOutput\n\n01.csv\n02.md\n02.r\n03.md\n03.r\n04.md\n04.r\n90.md\n90.r\nMakefile\nfigure\nhelper01.r\nhelper02.r\nhelper03.r\nhelper04.r\ntmp.txt\n\n\n\n\n\n\n\nOutput\n\n01_marshal-data.md\n01_marshal-data.r\n02_pre-dea-filtering.md\n02_pre-dea-filtering.r\n03_dea-with-limma-voom.md\n03_dea-with-limma-voom.r\n04_explore-dea-results.md\n04_explore-dea-results.r\n90_limma-model-term-name-fiasco.md\n90_limma-model-term-name-fiasco.r\nMakefile\nfigure\nhelper01_load-counts.r\nhelper02_load-exp-des.r\nhelper03_load-focus-statinf.r\nhelper04_extract-and-tidy.r\ntmp.txt\n\n\n\n\n\nOutput\n\n01.md\n01.r\n02.md\n02.r\n03.md\n03.r\n04.md\n04.r\n90.md\n90.r\nMakefile\nfigure\nhelper01.r\nhelper02.r\nhelper03.r\nhelper04.r\ntmp.txt",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#consistency",
    "href": "chapters/naming-things.html#consistency",
    "title": "2  Naming things",
    "section": "2.6 Consistency",
    "text": "2.6 Consistency\nYou can find and organize files more easily when you name them consistently.\nSometimes, file names might be in multiple languages.\nFor example, you may study in the Netherlands or Germany, but your research project involves international colleagues, so the common language is English.\nIt is recommended to name your files in only one language that everyone involved can understand.\nEven if you use just one language, regional differences can lead to variations in spelling.\nFor example, the English word “behavior” is spelled with a u in British English (“behaviour”) but without it in American English (“behavior”).\nDecide as a team on a single language and spelling style for naming files and folders.\nBe mindful of capitalization as well, and choose a consistent style!\n\nConsistent namesInconsistent names\n\n\n\n\n\nOutput\n\ndecision-for-the-use-of-american-english.csv\nall-my-file-names-are-in-one-language.txt\nbehavioral-data-is-consistently-named.csv\nbehavioral-data-file-names-are-easy-to-understand.r\nconsistent-convention-about-capitalization.csv\n\n\n\n\n\n\n\nOutput\n\ndecision-for-the-use-of-plenty-languages.csv\ndette-dokumentet-har-et-norsk-navn.txt\nbehavioural-data-is-not-consistently-named.csv\nbehavioral-data-file-names-are-hard-to-understand.r\nSome-words-Are-written-in-upper-case.csv",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#play-well-with-default-ordering",
    "href": "chapters/naming-things.html#play-well-with-default-ordering",
    "title": "2  Naming things",
    "section": "2.7 Play well with default ordering",
    "text": "2.7 Play well with default ordering\nFilenames should be designed to work well with default ordering (like alphabetical or chronological order) so that files are easy to locate and understand at a glance Good ordering lets related files appear together, saves time when searching, and keeps files organized, especially in large projects.\n\n2.7.1 Put something numeric first\n\n2.7.1.1 Chronological order\n\n PsychologyBiology\n\n\n\n\n\nOutput\n\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_01.csv\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_02.csv\n2021-02-19_NEOFFI_numerical-stroop_bsc-thesis_03.csv\n2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\n2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\n2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\n2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\n\n\n\n\n\n\n\nOutput\n\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H01.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H02.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A01.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A02.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A04.csv\n\n\n\n\n\n\n\n\n\n\n\nWhen keeping copies of the same or similar files, consider version control!\n\n\n\nConsider the use of chronologically ordered files and folders! For specifying different versions of the same document, version control tools as Git and GitHub should be preferred. Otherwise you might feel as the person in the cartoon in Figure 2.2 writing on his “final document”. For different but similar files, a chronological order can make sense.\n\n\n\n\n\n\n\n\nFigure 2.2: “notFinal.doc” by Jorge Cham (License: All content copyright 1997-2003 Piled Higher and Deeper Publishing, LLC.; reused without modifications)\n\n\n\n\n\n2.7.1.2 Logical order\n\n PsychologyBiology\n\n\n\n01_DSM-5-data.csv\n02_pre-analysis-filtering.r\n03_test-hypotheses.r\n04_exploratory-analyses.r\n90_DSM-V-codebook.csv\nhelper01_load-packages.r\nhelper02_load-codebook.r\nhelper03_test-assumptions.r\nhelper04_load-figure-template.r\n\n\n\n\n01_marshal-data.r\n02_pre-dea-filtering.r\n03_dea-with-limma-voom.r\n04_explore-dea-results.r\n90_limma-model-term-name-fiasco.r\nhelper01_load-counts.r\nhelper02_load-exp-des.r\nhelper03_load-focus-statinf.r\nhelper04_extract-and-tidy.r\n\n\n\n\n\n\n2.7.1.3 Use the ISO 8601 standard for dates\nIn 1988, to avoid confusion, the International Organization for Standardization (ISO) set a global standard numeric date format, known as ISO 8601: YYYY-MM-DD, where YYYY stands for the year, e.g., 2024, MM stands for the month, e.g., 11 and DD stands for the day, e.g., 06. Using the ISO 8601 standard for dates (like 2023-11-06) ensures consistency and avoids confusion. This format starts with the year, followed by the month, and then the day, which makes it easy to sort dates in the correct order. It works well across different cultures and software, helping everyone read and organize dates the same way.\n\n PsychologyBiology\n\n\n\n\n\nOutput\n\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_01.csv\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_02.csv\n2021-02-19_NEOFFI_numerical-stroop_bsc-thesis_03.csv\n2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\n2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\n2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\n2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\n\n\n\n\n\n\n\nOutput\n\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H01.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H02.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A01.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A02.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A04.csv\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.3: “ISO 8601” by xkcd.com (Randall Munroe) (License: CC BY-NC 2.5; reused without modifications)\n\n\n\n\n\n2.7.1.4 Consider the output:\nFiles that are later turned into HTML should be exclusively delimited by hyphens (-).\n\n\n\n2.7.2 Left-pad numbers with zeros\nLeft-padding of numbers refers to the practice of adding zeros to the left of a number to make it reach a certain length. This can be useful, for example, when dealing with numerical data that needs to be formatted in a specific way for presentation or computational purposes. By left-padding numbers, you can ensure that they all have the same length and are easier to compare or work with in a numerical context.\n\n PsychologyBiology\n\n\n\n01_DSM-5-data.csv\n02_pre-analysis-filtering.r\n03_test-hypotheses.r\n04_exploratory-analyses.r\n90_DSM-V-codebook.csv\nhelper01_load-packages.r\nhelper02_load-codebook.r\nhelper03_test-assumptions.r\nhelper04_load-figure-template.r\n\n\n\n\n\n\nOutput\n\n01_marshal-data.r\n02_pre-dea-filtering.r\n03_dea-with-limma-voom.r\n04_explore-dea-results.r\n90_limma-model-term-name-fiasco.r\nhelper01_load-counts.r\nhelper02_load-exp-des.r\nhelper03_load-focus-statinf.r\nhelper04_extract-and-tidy.r\n\n\n\n\n\nIf you don’t left pad numbers, you get this:\n\n\n\nOutput\n\n10_final-figs-for-publication.R\n1_data-cleaning.R\n2_fit-model.R\n\n\n\n\n\n\n\n\nConsider how many leading zero you will need!\n\n\n\n\n\nWhen left-padding numbers, you can add as many leading zeros as you might need. In many cases, using one zero (i.e., 01) will be sufficient but you might also have more files, you could consider left-padding with two zeros (i.e., 001) if the number of relevant files go to or beyond a hundred.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#summary-1",
    "href": "chapters/naming-things.html#summary-1",
    "title": "2  Naming things",
    "section": "2.8 Summary",
    "text": "2.8 Summary\nHere is a summary of all recommendations for naming things:\n\n2.8.1 Machine readable\n\nFile names are regular expression and globbing friendly\nFile names allow to recover meta data\n\n\n\n2.8.2 Human readable\n\nFile names contain info on content\n\n\n\n2.8.3 Consistency\n\nFile names are named in one language\nBe aware of regional influences in spelling\nConsistent use of upper and lower case\n\n\n\n2.8.4 Plays well with default ordering\n\nPut something numeric first\nUse the ISO 8601 standard for dates: YYYY-MM-DD\nLeft pad other numbers with zeros: e.g., 01",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#acknowledgements-further-reading",
    "href": "chapters/naming-things.html#acknowledgements-further-reading",
    "title": "2  Naming things",
    "section": "2.9 Acknowledgements & further reading",
    "text": "2.9 Acknowledgements & further reading\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\nThe ideas provided in this chapter are mainly based on the slides from Bryan (2015). We are also thankful for the additional ideas of Danielle Navarro and the BERD Academy\n\n\n\n\nBryan, Jenny. 2015. “How to Name Files.” https://speakerdeck.com/jennybc/how-to-name-files.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html",
    "href": "chapters/good-coding-practices.html",
    "title": "3  Good Coding Practices",
    "section": "",
    "text": "3.1 R projects\nAs a researcher (and as a student), you work on different projects simultaneously. You have different research projects and teaching parts that you need to cover in your job. You attend different courses and give presentations and perform data analyses in these seminars and lectures. As you learned in the previous chapter about project structure, it makes sense to set up your files and folders in a particular research project folder.\nOutput\n\nprojects/\n├── version-control-book\n├── reproducibility-book\n├── grant_neuroscience_horizon\n├── grant_neuroscience_dfg\nWe highly recommend to use specific R-projects for each project, respectively. This will become clear throughout this chapter and the next chapter about renv.\nTo create an R-project, follow these steps:\nDepending on your situation, it makes sense to either create a new directory or turn an existing folder into an R project.\nWhen you are at the beginning of your project and have not set up a project structure yet, it makes sense to create a new directory.\nMake sure that, in this case, your directory name aligns well with your project.\nWhen you have already set up a project structure, it makes sense to turn your project folder into an R project. Make sure that, in this case, your project folder is the folder you turn into an R project.\nAfter you have created your R project, it is time to take a closer look at your R scripts containing the code for your projects.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#r-projects",
    "href": "chapters/good-coding-practices.html#r-projects",
    "title": "3  Good Coding Practices",
    "section": "",
    "text": "Open RStudio.\nClick on the blue  cube with a  in it and a green plus  on the outside.\nDecide whether you want to create a new directory or an existing directory.\n\n\n\n New directory Existing directory\n\n\nClick on New Directory, then New Project, and type in your directory name.\nMake sure that your project is in the correct place in your folder system.\nAt this point, it does not matter whether you want to create a Git repository and/or use renv with this project.\nIn future chapters, you will learn the advantages of using Git and renv.\nWhen you click on Create Project, your R project will be created.\nYou will see that R has created a folder named after your directory and that one file, directory-name.Rproj, is in this folder.\n\n\nClick on Existing Directory and make sure which folder you want to turn into an R project.\nWhen you click on Create Project, your R project will be created. You will see that R has placed a file in your chosen folder called directory-name.Rproj.\n\n\n\n\n\n\n\n\n\nWhat is an .Rproj-file?\n\n\n\nThe .Rproj file contains settings for all files associated with your specific R project.\nIt is automatically created when you set up an R project. By double-clicking on the file, you can open the project in RStudio.\nIt is not recommended to modify this file manually.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#comments",
    "href": "chapters/good-coding-practices.html#comments",
    "title": "3  Good Coding Practices",
    "section": "3.2 Comments",
    "text": "3.2 Comments\nComments are probably the most important part of your scripts (but also see the discussion in Tip 3.1). Whenever you write a # in your R-script, all code after that # will be identified as comment and therefore not be executed as code. Thus, if you put a # at the beginning of a line, the whole line will be identified as comment. Here are some thoughts about comments by Rennie (2024):\n\n\n\n\n\n\nAdding comments\n\n\n\n\nAdd comments using a # in R (in a separate line)\nComments don’t need to explain what your code does\nComments should explain why you did it\n\n\n\nYou can use # not only for comments but also for creating sections and subsections in your R-script. To do so, you must start a line with at least one hash # and put at least 4 hyphens after your comment. The number of hashes you use at the beginning determines the level of section.\n\n\n\nCode\n\n# Section 1 ----\n\n## Subsection 1.1 ----\n\n## Sebsection 1.2 ----\n\n# Section 2 ----\n\n\n\n\n\n\n\n\nTip 3.1: Discussion: Pros and cons of comments\n\n\n\n\n\nComments in code are useful because they help explain complex logic, provide context for why certain decisions were made, and assist future developers in understanding the code faster.\nHowever, ideally, code should be written clearly enough that its purpose and functionality are apparent without the need for excessive comments. Well-structured, self-explanatory code enhances readability and reduces maintenance.\nOn the other hand, beginners often find comments valuable, even in well-written code, as they can serve as a learning tool, guiding them through unfamiliar concepts and helping them understand the underlying logic.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#file-paths",
    "href": "chapters/good-coding-practices.html#file-paths",
    "title": "3  Good Coding Practices",
    "section": "3.3 File paths",
    "text": "3.3 File paths\nWhenever you are conducting research, you need to analyze some form of data. This data is typically stored in one or more files. Therefore, you need to read the data into your script. To do so, you must refer to the files you want to read. This is where the first advantage of setting up a dedicated R project for your research becomes apparent.\nYou can read data or code into your R environment by referring to your files using absolute paths, relative paths, and here::here().\n\n3.3.1 Absolute paths\nUsing an absolute path means referring to your file by specifying the entire folder structure on your computer:\n\n\n\nCode\n\ndata &lt;- read_csv(\"/Users/my-user-name/Documents/projects/my-project/data/data-raw.csv\")\n\n\nUsing absolute file paths is not recommended for computational reproducibility.\nA collaborator or interested researcher who downloads your scripts and wants to reproduce your analysis would need to adjust these paths before the scripts can run correctly.\n\n\n\nCode\n\ndata &lt;- read_csv(\"/Users/user-name-b/Desktop/work/research/my-project/data/data-raw.csv\")\n\n\n\n\n3.3.2 Relative paths\nA relative file path starts from your current working directory and appends the relative path.\nYou can check your current working directory in R by using the getwd() command in the R Console.\n\n\n\nR Console\n\n&gt; getwd()\n[1] \"Users/my-user-name/my-project\"\n\n\nBy default, the working directory in an R project is the project folder, which in this example is called my-project.\nYou can then use a relative file path from that folder to read your data.\nThe file path should start after the working directory:\n\n\n\nCode\n\ndata &lt;- read_csv(\"data/data-raw.csv\")\n\n\nThus, all relative paths to the files in an R project remain the same, regardless of who wants to work with the project. However, this does not hold true for scripts changing the working directory using the setwd() command.\n\nRelative file path does workRelative file path does not work\n\n\n\n\n\nConsole\n\n&gt; getwd()\n[1] \"Users/my-user-name/my-project\"\n&gt; file.edit(\"script/script01.R\")\n\n\n\n\n\n\n\nConsole\n\n&gt; setwd(\"script\")\n&gt; getwd()\n[1] \"Users/my-user-name/my-project/script\"\n&gt; file.edit(\"script/script01.R\")\n\n\n\n\n\n\n\n3.3.3 The here package\nA way to avoid confusion about which file paths to use is the here package (Müller 2020). The here() function works regardless of your current working directory.\nYou can install the here package by typing:\n\n\n\nCode\n\ninstall.packages(\"here\")\n\n\nWith here::here(), it is possible to refer to file paths regardless of your working directory. here() uses the top-level directory of a project to build the paths. It recognizes special files (e.g., .Rproj) and infers the project folder. Using here(), referencing file paths will always follow the same project structure regardless of the file you are referencing.\n\n\n\n\n\n\nExample\n\n\n\n\n\nhere() function works regardless of the current working directory.\n\nNo change in working directoryChange in working directory\n\n\n\n\n\nConsole\n\ngetwd()\n[1] \"/Users/my-user-name/my-project\"\n&gt; here()\n[1] \"/Users/my-user-name/my-project\"\n&gt; source(here(\"scripts\", \"script01.R\"))\n\n\n\n\n\n\n\nConsole\n\ngetwd()\n[1] \"/Users/my-user-name/my-project\"\n&gt; here()\n[1] \"/Users/my-user-name/my-project\"\n&gt; source(here(\"scripts\", \"script01.R\"))\n\n\n\n\n\n\n\n\nAnother benefit of using here() is enhanced readability because the paths always start at the project directory. Using relative paths would require the reader to consider the current working directory and how certain files are relatively located to it. Furthermore, here() remains unaffected by differences between operating systems when separating files with characters and commas.\n\n\n\n\n\n\nPath differences between operating systems\n\n\n\n\n\nmacOS and Linux use a slash / for path separators, while Windows uses a backslash \\. In R, \\ is an escape operator, causing R to misinterpret Windows backslashes \\ when used as path separators. On Windows, using \\\\ or / is necessary to handle path separators correctly.\nA benefit of here() is that paths can be specified within \"\" and separated by commas. Depending on the operating system, here() applies the correct path separator automatically.\n\n\n\nCode\n\nsource(here(\"folder\", \"subfolder\", \"subsubfolder\", \"file.R\"))\n\n\n\n\n\nIn summary, we recommend using the here::here() function because it is most robust against different paths. Relative file paths can also work if the working directory does not change in one of the project scripts and only / are used for path specifications. We recommend to never use absolute file paths, since they are a hurdle to computational reproducibility.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#sec-codestyle",
    "href": "chapters/good-coding-practices.html#sec-codestyle",
    "title": "3  Good Coding Practices",
    "section": "3.4 Code Style",
    "text": "3.4 Code Style\n\n“Good coding style is like correct punctuation: you can manage without it, butitsuremakethingseasiertoread” – Wickham, Çetinkaya-Rundel, and Grolemund (2023)\n\nOne important aspect that fosters understandability of code is the code style. In this section, we will present the tidyverse-codestyle (Wickham, Çetinkaya-Rundel, and Grolemund 2023). The Tidyverse is a collection of R packages particularly useful for data wrangling, manipulation and visualization. All packages share an underlying design philosophy, grammar, and data structures.\nIn psychology, the grammar of the tidyverse is widely used for data wrangling. In this section, we will provide a brief introduction to code style.\n\n3.4.1 Names\nNot only should files and folders be named well (see chapter on naming things), but the same applies to variable and function names in scripts. Variable and function names should only consist of lowercase letters, numbers, and underscores (_). It is better to use descriptive, longer names rather than short abbreviations that you may not understand in the future.\n\n\n\n\n\nStrive for\n\nshort_flights &lt;- flights |&gt;\n  filter(air_time &lt; 60)\n\n\n\n\n\n\n\n\nAvoid\n\nSHORTFLIGHTS &lt;- flights |&gt;\n  filter(air_time &lt; 60)\n\n\n\n\n\n\n3.4.2 Spaces\nPut spaces around mathematical operators (except ^) and around the assignment operator (&lt;-). Do not put spaces around parentheses when using functions. Put a space after a comma, as you would in standard English.\n\n\n\n\n\nStrive for\n\nmean(x, na.rm = TRUE)\n\n\n\n\n\n\n\n\nAvoid\n\nmean (x ,na.rm=TRUE)\n\n\n\n\n\n\n3.4.3 Pipes\nThe pipe (either |&gt; or %&gt;%) is a useful operator for connecting subsequent operations in your code. The pipe takes everything to the left of it and uses it as the first argument to the function on the right side.\n\n\n\n\n\nWithout pipe\n\nsum(c(1:4))\n\n\n\n\n\n\n\n\nWith pipe\n\nc(1:4) |&gt; sum()\n\n\n\n\nThe pipe is particularly useful when you chain many functions together. Therefore, use |&gt; at the end of a line and add a space before it. The complete sequence of functions connected by a pipe is also called a pipeline.\n\n\n\n\n\nStrive for\n\n1data |&gt;\n2  select(N, gender) |&gt;\n3  filter(\n    gender == \"male\" |\n    gender == \"female\"\n  ) |&gt;\n4  group_by(gender) |&gt;\n5  summarise(\n    mean = mean(N),\n    median = md(N)\n  )\n\n\n\n1\n\nTake the data and then\n\n2\n\nSelect the variables N and gender and then\n\n3\n\nFilter all observations where the variable gender either contains the value male or female and then\n\n4\n\nGroup the dataset by the variable gender and then\n\n5\n\nSummarize your datasets by calculating the mean and median for the variable N for each group.\n\n\n\n\n\n\n\n\n\n\nAvoid\n\nsummarise(group_by(filter(select(data, N, gender), gender == \"male\" | gender == \"female\"), gender), mean = mean(N))\n\n\n\n\nThe code displayed above is much easier to read and understand for your future self and other researchers, thereby increasing the likelihood of reproducibility. Translated into plain English, the pipe represents an “and then”:\n\n\n\n\n\n\nDifference between %&gt;% and |&gt;\n\n\n\n\n\nIn basic code, %&gt;% and |&gt; behave the same in the simple cases we cover here. In general, %&gt;% has some advantages when you want to code more complex cases. If you are interested when it matters if you either use %&gt;%or |&gt;, we recommend this resource.\n\n%&gt;%|&gt;\n\n\nThe %&gt;% pipe was introduced in the context of the tidyverse. It comes with the package magrittr and con only be used when this package is installed and loaded.\n\n\n\nCode\n\ninstall.packages(\"magrittr\")\nlibrary(magrittr)\n\n\nHowever, you can also use it, when you load another package from the tidyverse such as dplyr. This is because dplyr imports magrittr when it is loaded.\n\n\nThe |&gt; pipe comes with the basic R. To use |&gt; in R, you have to go to Tools &gt; Global Options &gt; Code and tick the box Use native pipe operator, |&gt; (repquires R 4.1+).\n\n\n\n\n\n\n\n\n3.4.4 Line breaks\nIf a function requires you to name arguments (as with summarise()), put each argument on a new line. If a function does not require you to name arguments (as with group_by()), keep your code on one line unless it extends beyond the width of a line. In that case, put each argument on its own line.\nWhen you start a new line after using |&gt; or a function like summarise(), indent the new line by two spaces (if not already done automatically). If you are putting each argument on a separate line, also indent the new line by two spaces. Make sure that the closing parenthesis ) is on its own line and not indented. Thus, the closing parenthesis should align with the horizontal position of the function you are using.\n\n\n\n\n\nStrive for\n\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(\n      x = arr_delay,\n      na.rm = TRUE\n    ),\n    n = n()\n  )\n\n\n\n\n\n\n\n\nAvoid\n\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n             delay = mean(arr_delay, na.rm = TRUE), \n             n = n()\n           )\n\n\n\n\n\nAvoid\n\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n  delay = mean(arr_delay, na.rm = TRUE), \n  n = n()\n  )\n\n\n\n\n\n\n3.4.5 Evaluate your code style: Linting\nAfter learning the tidyverse coding style, you can check your code for any deviations from that style.\nThis process is called “linting” and is comparable to a program that checks for spelling errors.\nThe lintr package (Hester et al. 2024) can perform this task by analyzing your code for potential issues and deviations from the recommended coding style.\n\nstylistic issues (e.g. x&lt;-3 vs. x &lt;- 3)\ncommon errors (e.g. mean(x, na.rm = T, na.rm = F))\nmissing packages\n…\n\n\n\n\n\n\n\nCaution\n\n\n\nHowever, note that lintr cannot check whether your code runs correctly!\n\n\n\n\n\n\n\n\nExample of lintr\n\n\n\n\n\nSuppose you have script called test-script.R in the folder scripts of your research projects. Your script looks as follows:\n\n\n\nScript\n\n# Test Script\n\ndf &lt;- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)\n\n\nAfter you installed and loaded the package lintr, run: lintr::lint(\"scripts/test-script.R\") in your R-console:\n\n\n\nCode\n\ninstall.packages(\"lintr\")\nlibrary(lintr)\nlintr::lint(\"scripts/test-script.R\")\n\n\nNext to your Console, a new tab will open called Markers, displaying all syntax messages lintr found in your script.\n\n\n\nMarkers\n\nLine 3 [commas_linter] Commas should always have a space after.\nLine 3 [commas_linter] Commas should always have a space after.\nLine 3 [commas_linter] Commas should always have a space after.\nLine 3 [commas_linter] Commas should always have a space after.\nLine 3 [commas_linter] Commas should always have a space after.\n\n\nIn test-script.R, lintr wants us to separate the numbers 1 to 6 by spaces after commas. For every missing comma, lintr displays a separate error message. After adding the spaces, saving the script, and running lintr::lint(\"scripts/test-script.R\") again, no error messages are displayed in the Markers tab.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#tidy-data",
    "href": "chapters/good-coding-practices.html#tidy-data",
    "title": "3  Good Coding Practices",
    "section": "3.5 Tidy Data",
    "text": "3.5 Tidy Data\n\n\n\n\n\n\nFigure 3.1: “Illustration from the Openscapes blog Tidy Data for reproducibility efficiency and collaboration” by Julia Lowndes and Allison Horst (License: CC-BY 4.0; reused without modifications)\n\n\n\nWhen working with datasets, you will likely not be able to directly conduct your data analysis (e.g., t-tests, ANOVAs, GLMs). In fact, most of the time, you will spend more time organizing your data than running your analysis. A helpful concept is tidy data, which is a common guideline for organizing datasets. Tidy data is closely related to the principles of the tidyverse introduced in Section 3.4. Following tidy data guidelines will help you run analyses and get the most out of your data.\n\n\n\n\n\n\nTidy Data\n\n\n\nTidy datasets follow three basic rules:\n\nEach variable is a column, and each column is a variable.\nEach observation is a row, and each row is an observation.\nEach value is a cell, and each cell contains a value.\n\n\n\n\n\n\n\n\n\nFigure 3.2: “Tidy Data” by Hadley Wickham and Mine Çetinkaya-Rundel and Garret Grolemund (License: CC BY-NC-ND 3.0 US; reused without modifications)\n\n\n\nThe journey from raw to tidy data can be long and frustrating. This book cannot provide a full overview of data wrangling and manipulation. However, if you are interested in learning functions for data manipulation, we recommend studying the dplyr package and its documentation, as well as the tidyr package and its documentation. From our experience, using and sharing code written in the tidyverse style fosters better understanding of the code, thereby enhancing computational reproducibility.\n\n3.5.1 Data structures\nData can be structured in different ways. When your data is tidy, you may still encounter wide or long formats. As a rule of thumb, you can remember this: Data structured in a long format usually contains repetitive values in the first column of the dataset. Data structured in a wide format usually contains non-repetitive values in the first column of the dataset.\n\n Wide format Long format\n\n\n\n\n# A tibble: 3 × 3\n  participant congruent incongruent\n        &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1           1       560         720\n2           2       623         799\n3           3       547         812\n\n\n\n\n\n\n# A tibble: 6 × 3\n  participant congruency  reaction_time\n        &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;\n1           1 congruent             560\n2           1 incongruent           720\n3           2 congruent             623\n4           2 incongruent           799\n5           3 congruent             547\n6           3 incongruent           812\n\n\n\n\n\nHowever, this rule of thumb does not always apply, for example when data is rearranged.\n\n\n[1] \"Data in long format\"\n\n\n# A tibble: 6 × 3\n  reaction_time congruency  participant\n          &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n1           560 congruent             1\n2           720 incongruent           1\n3           623 congruent             2\n4           799 incongruent           2\n5           547 congruent             3\n6           812 incongruent           3\n\n\nAnother perspective on wide vs. long data comes from the context of the data. In research, a common question is how variable A influences variable B. Variable B is dependent on variable A, making variable B the dependent variable (DV) and variable A the independent variable (IV).\nIn the wide data format, the names of the factor levels of the IV are usually column names, while the DV is displayed as the values across these cells. In contrast, in the long data format, the names of the factor levels of the IV are typically values in the column of the IV. The name of the IV becomes the column name, rather than the level of the IV. Simultaneously, the DV is displayed in one column with the name of the DV as the column name and the corresponding values in that column.\n\n\n3.5.2 Changing the data structure\nDepending on which R functions you want to use or other reasons, you may need to or want to change your data structure from wide to long or vice versa. An easy way to do this is by using pivot_wider() and pivot_longer() from the tidyr package.\n\n3.5.2.1 pivot_longer()\npivot_longer() takes your dataset and makes it longer. It takes certain columns and places their names as values into a new column. Additionally, it combines the values of these columns into a single column.\n\n\n\nCode\n\nlibrary(tidyr)\n1data_wide |&gt;\n2  pivot_longer(\n3    cols = c(\"congruent\", \"incongruent\"),\n4    names_to = \"congruency\",\n5    values_to = \"reaction_time\"\n  )\n\n\n\n1\n\nTake the dataset data_wide, then\n\n\n2\n\nApply the function pivot_longer() to the data by\n\n\n3\n\nSpecifying the columns that should be transformed into a long format,\n\n\n4\n\nNaming the new column to hold the previous column names, and\n\n\n5\n\nNaming the new column to hold the values of the previous columns.\n\n\n\n\n# A tibble: 6 × 3\n  participant congruency  reaction_time\n        &lt;int&gt; &lt;chr&gt;               &lt;dbl&gt;\n1           1 congruent             560\n2           1 incongruent           720\n3           2 congruent             623\n4           2 incongruent           799\n5           3 congruent             547\n6           3 incongruent           812\n\n\n\n\n3.5.2.2 pivot_wider()\npivot_wider() takes your dataset and makes it wider. It takes the names of a certain column and changes them to new column names. Further, it takes the values of a second column and puts them across the new columns to their corresponding names.\n\n\n\nCode\n\n1data_long |&gt;\n2  pivot_wider(\n3    names_from = \"congruency\",\n4    values_from = \"reaction_time\"\n  ) |&gt;\n  print()\n\n\n\n1\n\nTake the dataset data_long,\n\n\n2\n\nApply the function pivot_wider() to the data by\n\n\n3\n\nSpecifying the column name from which to create the new column names, and\n\n\n4\n\nSpecifying the column name from which to take the values for the new columns.\n\n\n\n\n# A tibble: 3 × 3\n  participant congruent incongruent\n        &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1           1       560         720\n2           2       623         799\n3           3       547         812",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#defensive-programming",
    "href": "chapters/good-coding-practices.html#defensive-programming",
    "title": "3  Good Coding Practices",
    "section": "3.6 Defensive programming",
    "text": "3.6 Defensive programming\nWhenever you write code for data analysis or any other purpose, it is useful to validate what you are doing. This is also known as defensive programming. “Defensive” in this context means cautious. Here are some potential benefits of validating your code:\n\nEarly error detection\n\nCode clarity\n\nProtection against invalid input\n\nMonitoring data quality\n\nImproved documentation\n\nImproved error handling\n\n\n3.6.1 The assertr package and it’s function verify()\nThe assertr package helps you when you start testing your code. Once you begin adopting the tidyverse coding style, the function verify() will be easy to apply in your code. verify() can be seamlessly integrated into a code pipeline.\nThe verify() function takes a data frame (which is the first argument of the function and provided by the |&gt; operator) and a logical expression. Then, the expression is evaluated in the context of the data frame. When the expression is TRUE, no error occurs and the pipe goes on. When the expression is FALSE, verify will raise an error that terminates any further processing of the pipeline (Fischetti 2023).\n\nVerification passedVerification failed\n\n\nIn this example, a dataframe will only be printed, if all values in the column reaction_time are higher than 200. This holds true for data_long, but not for data_long_2. data_long_2 has one value (24) violating the verify expression.\n\n\n\nCode\n\nlibrary(assertr)\n\n# verify if reaction time is longer than 200ms\ndata_long |&gt;\n  verify(reaction_time &gt; 200) |&gt;\n  print()\n\n\n# A tibble: 6 × 3\n  participant congruency  reaction_time\n        &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;\n1           1 congruent             560\n2           1 incongruent           720\n3           2 congruent             623\n4           2 incongruent           799\n5           3 congruent             547\n6           3 incongruent           812\n\n\n\n\nIn this example, a dataframe will only be printed, if all values in the column reaction_time are higher than 200. This holds true for data_long, but not for data_long_2. data_long_2 has one value (24) violating the verify expression.\n\n\n\nCode\n\ndata_long_2 &lt;- data_long\ndata_long_2[5,3] &lt;- 24\n\ndata_long_2 |&gt;\n  verify(reaction_time &gt; 200) |&gt;\n  print()\n\n\n\n\n\nConsole output\n\nverification [reaction_time &gt; 200] failed! (1 failure)\n\n    verb redux_fn           predicate column index value\n1 verify       NA reaction_time &lt; 200     NA     5    NA\n\nError: assertr stopped execution\n\n\n\n\n\n\n\n3.6.2 Further functions and packages\nThe verify() function provides an easy way to start validating your code within a tidyverse coding style. However, there are more functions from the assertr package that can be applied for defensive programming. Going through all of these functions exceeds the scope of this book. Therefore, we highly recommend reading the accompanying vignette by Tony Fischetti, the author of the assertr package.\nFurthermore, assertr is not the only  package dealing with defensive programming. assert, assertthat, and testthat are other powerful packages in this context. In general, code validation is not too popular in scientific practice. It is rather prevalent in software development contexts validating functions and whole scripts for specific purposes. These thorough testing processes extends the scope of computational reproducibility in our opinion. Thus, we recommend assertr::verify() as a good starting point for defensive programming in the context of computational reproducibility.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#acknowledgements-further-reading",
    "href": "chapters/good-coding-practices.html#acknowledgements-further-reading",
    "title": "3  Good Coding Practices",
    "section": "3.7 Acknowledgements & further reading",
    "text": "3.7 Acknowledgements & further reading\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\n\n\n\n\n\n\nResources\n\n\n\n\n(Rennie 2024)\n\n\n(Wickham, Çetinkaya-Rundel, and Grolemund 2023)\n\n\n\n\n\n\n\nFischetti, Tony. 2023. Assertr: Assertive Programming for r Analysis Pipelines. https://docs.ropensci.org/assertr/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. Lintr: A ’Linter’ for r Code. https://CRAN.R-project.org/package=lintr.\n\n\nMüller, Kirill. 2020. Here: A Simpler Way to Find Your Files. https://here.r-lib.org/.\n\n\nRennie, Nicola. 2024. “Writing Better r Code.” https://nrennie.rbind.io/training-better-r-code/.\n\n\nWickham, H., M. Çetinkaya-Rundel, and G. Grolemund. 2023. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media. https://r4ds.hadley.nz.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Bryan, Jenny. 2015. “How to Name Files.” https://speakerdeck.com/jennybc/how-to-name-files.\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6.\n\n\nFischetti, Tony. 2023. Assertr: Assertive Programming for r Analysis\nPipelines. https://docs.ropensci.org/assertr/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren,\nAlexander Rosenstock, and Indrajeet Patil. 2024. Lintr: A ’Linter’\nfor r Code. https://CRAN.R-project.org/package=lintr.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nMüller, Kirill. 2020. Here: A Simpler Way to Find Your Files.\nhttps://here.r-lib.org/.\n\n\nRennie, Nicola. 2024. “Writing Better r Code.” https://nrennie.rbind.io/training-better-r-code/.\n\n\nWickham, H., M. Çetinkaya-Rundel, and G. Grolemund. 2023. R for Data\nScience: Import, Tidy, Transform, Visualize, and Model Data.\nO’Reilly Media. https://r4ds.hadley.nz.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "Funding\nThis work is funded by the Digital and Data Literacy in Teaching Lab (DDLitLab), an initiative by the Center for Interdisciplinary Study Programs (Zentrum für Interdisziplinäre Studienangebote; ISA-Zentrum) at the University of Hamburg, Germany. The Digital and Data Literacy in Teaching Lab program is in turn funded by the Stiftung Innovation in der Hochschullehre (details about the funding program can be found here).",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#code",
    "href": "acknowledgements.html#code",
    "title": "Acknowledgements",
    "section": "Code",
    "text": "Code\nThis website is made with Quarto. The source code of this website can be found on GitHub.",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#images",
    "href": "acknowledgements.html#images",
    "title": "Acknowledgements",
    "section": "Images",
    "text": "Images\nImages are stored on Nextcloud (UHH Cloud). They can be retrieved using\n\n\n\nCode\n\nmake images\n\n\n\n\nClick here to view the full Makefile of this project.\n\n\n\n\nMakefile\n\nIMAGES_URL=https://cloud.uni-hamburg.de/s/pzEHT5DF3PzFdLH/download\nIMAGES_ARCHIVE=repro-book-images.zip\nIMAGES_DIR=images/\n\nall: render\n\n.PHONY: preview\npreview:\n    quarto preview\n\n.PHONY: render\nrender: clean images\n    quarto render\n\n.PHONY: pdf\npdf: clean images\n    quarto render --profile pdf\n    \n.PHONY: deploy\ndeploy: clean images\n    quarto publish gh-pages\n\n.PHONY: images\nimages:\n    curl $(IMAGES_URL) -o $(IMAGES_ARCHIVE)\n    unzip -j -o $(IMAGES_ARCHIVE) -d $(IMAGES_DIR)\n    rm -f $(IMAGES_ARCHIVE)\n\n.PHONY: clean\nclean:\n    rm -rf $(IMAGES_DIR)* _book/",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#analytics",
    "href": "acknowledgements.html#analytics",
    "title": "Acknowledgements",
    "section": "Analytics",
    "text": "Analytics\nWe use Plausible for website analytics. Plausible is an “intuitive, lightweight and open source web analytics”, does not use cookies and is fully compliant with GDPR, CCPA and PECR.",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#license",
    "href": "acknowledgements.html#license",
    "title": "Acknowledgements",
    "section": "License",
    "text": "License\nAll contents are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) license, unless indicated otherwise.",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#contact",
    "href": "acknowledgements.html#contact",
    "title": "Acknowledgements",
    "section": "Contact",
    "text": "Contact\nDid you spot an error? Is there an issue with the website? Do you have feedback, questions or comments? We would love to hear from you! Please open an issue on GitHub or send an email. Thank you!",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "Contributing",
    "section": "",
    "text": "Overview\nGitHub: This section explains how to get the source code from Github to work on this project.\nRStudio Project: This section explains how to use RStudio Project to work on this project.\nQuarto: This section explains how to use Quarto to work on this project.\nDependency Management: This section explains how this project manages package dependencies using renv.\nCode: This section explains how to add code snippets.\nImages: This section e explains how to add images.\nReferences: This section explains how to add references.\nVariables: This section explains how to use variables.\nFontawesome Icons: This section explains how to add icons.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-github",
    "href": "contributing.html#sec-github",
    "title": "Contributing",
    "section": "GitHub",
    "text": "GitHub\nThis book is developed with Git and within the  GitHub-environment. You can download the source code from GitHub by clicking on the Code-Button. You must then press either Open with GitHub Desktop (requires  GitHub Desktop) or Download ZIP. For a detailed introduction on Git and GitHub see this Version Control Book. For an overview about the project structure of this Reproducibility Book, look at the README.md-file on GitHub.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-rstudio-project",
    "href": "contributing.html#sec-rstudio-project",
    "title": "Contributing",
    "section": "RStudio Project",
    "text": "RStudio Project\n\n “Using RStudio Projects”\n\nWe recommend working in RStudio and open the RStudio Project.\n\n RStudio Terminal\n\n\n\nDouble-click on the project file repro-book.Rproj within your computer’s file system (for example, macOS Finder).\n\n\n\nIn the Terminal, run:\n\nopen repro-book.Rproj\n\nThis will open the RStudio Project in RStudio.\n\n\n\n\n\n Click here to view the full repro-book.Rproj file of this project.\n\n\n\n\nrepro-book.Rproj\n\nVersion: 1.0\n\nRestoreWorkspace: No\nSaveWorkspace: No\nAlwaysSaveHistory: No\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n\nBuildType: Makefile",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-quarto",
    "href": "contributing.html#sec-quarto",
    "title": "Contributing",
    "section": "Quarto",
    "text": "Quarto\nThis book is made with Quarto.\n\nLocal development\n\nSetup\n\nRead the Get Started chapter of the Quarto documentation, which includes details on installation.\n\n\n\nPreparation\n\nRead this guide on how to contribute.\nFamiliarize yourself with Quarto Books.\n\n\n\nLocal preview\n\nquarto preview\n\n\n\n\nAdd a new chapter\n\nCreate a new Quarto document inside the /chapters/ folder.\nAdd the new chapter to _quarto.yml. Don’t forget to specify the full path (including chapters/).\n\n\n\n\n_quarto.yml (excerpt)\n\nchapters:\n  - index.qmd\n1  - chapters/YOUR-NEW-CHAPTER.qmd\n  - another-chapter.qmd\n\n\n\n1\n\nReplace YOUR-NEW-CHAPTER with a concise filename.\n\n\n\n\n\n\n Click here to view the full _quarto.yml file of this project.\n\n\n\n\n_quarto.yml\n\nproject:\n  type: book\n  execute-dir: project\n  output-dir: _book\n  preview: \n    port: 7777\n    host: 127.0.0.1\n    browser: true\n    watch-inputs: true\n    navigate: true\n\nbook:\n  # book:\n  title: \"The Repro Book\"\n  subtitle: \"A Guide to Reproducible Research\"\n  # favicon: static/logo.svg\n  site-url: https://lennartwittkuhn.com/repro-book/\n  repo-url: https://github.com/lnnrtwttkhn/repro-book/\n  repo-branch: main\n  issue-url: https://github.com/lnnrtwttkhn/repro-book/issues\n  repo-actions: [edit, issue, source]\n  page-navigation: true\n  back-to-top-navigation: true\n  search: true\n  twitter-card: false\n  chapters:\n    - index.qmd\n    - contents.qmd\n    - chapters/intro.qmd\n    - chapters/naming-things.qmd\n    - chapters/good-coding-practices.qmd\n    - summary.qmd\n    - references.qmd\n    - acknowledgements.qmd\n    - contributing.qmd\n  sidebar:\n    id: sidebar\n    title: \"{{&lt; var project.title &gt;}}\"\n    # logo: static/logo.svg\n    search: true\n    tools:\n      - icon: globe\n        href: https://lennartwittkuhn.com/repro-book/\n      - icon: bug\n        href: https://github.com/lnnrtwttkhn/repro-book/\n    style: floating\n    type: light\n    border: false\n    alignment: center\n    collapse-level: 2\n    pinned: true\n    footer: |\n      [![Website](https://img.shields.io/website?url=https%3A%2F%2Flennartwittkuhn.com%2Frepro-book%2F)]({{&lt; var project.site-url &gt;}})\n      [![License: CC BY 4.0](https://img.shields.io/badge/License-CC_BY_4.0-lightgrey.svg)](https://creativecommons.org/licenses/by/4.0/)\n      [![Quarto Publish]({{&lt; var project.repo-url &gt;}}/actions/workflows/publish.yml/badge.svg)]({{&lt; var project.repo-url &gt;}}/actions/workflows/publish.yml)\n      [![Codespell]({{&lt; var project.repo-url &gt;}}/actions/workflows/codespell.yml/badge.svg)]({{&lt; var project.repo-url &gt;}}/actions/workflows/codespell.yml)\n      [![All Contributors](https://img.shields.io/github/all-contributors/projectOwner/projectName?color=ee8449&style=flat-square)]({{&lt; var project.contributors-url &gt;}})\n  page-footer:\n    left: |\n      &copy; {{&lt; var project.duration &gt;}} [{{&lt; var project.title &gt;}} Team]({{&lt; var project.contributors-url &gt;}})\n    center:\n      - text: \"Acknowledgements\"\n        href: acknowledgements.qmd\n    right: |\n      License: {{&lt; var project.license-short &gt;}}\n    border: false\n    background: light\n\ntoc: true\ntoc-depth: 3\ntoc-location: right\ntoc-title: \"Contents\"\nnumber-sections: true\nnumber-depth: 4\ncap-location: bottom\ncode-line-numbers: false\ncode-annotations: below\nhighlight-style: monokai\nreference-location: document  \nlang: en-US  \nbibliography: references.bib\ncitations-hover: true\ncitation-location: document\nciteproc: true\nfrom: markdown+emoji\nlicense: CC BY\nabstract-title: \"Summary\"\nmetadata-files:\n  - _images.yml\n\nformat:\n  html:\n    theme: [default, custom.scss]\n    anchor-sections: true\n    smooth-scroll: true\n    toc-expand: 2\n    page-layout: full\n    title-block-style: default\n    code-fold: false\n    code-overflow: wrap\n    code-copy: true\n    code-link: false\n    code-tools: false\n    link-external-newwindow: true\n    footnotes-hover: true\n    include-after-body: plausible.html",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-dependency-management",
    "href": "contributing.html#sec-dependency-management",
    "title": "Contributing",
    "section": "Dependency Management",
    "text": "Dependency Management\nWe use renv for project-local  dependency management. For details on renv, see the renv documentation.\n\nUsing renv for the first time\nAfter you open the Rstudio Project, you will (hopefully) see a similar output in the RStudio console:\n\n\n\nOutput\n\n# Bootstrapping renv 0.17.3 --------------------------------------------------\n* Downloading renv 0.17.3 ... OK (downloaded binary)\n* Installing renv 0.17.3 ... Done!\n* Successfully installed and loaded renv 0.17.3.\n* Project '~/repro-book' loaded. [renv 0.17.3]\n* This project contains a lockfile, but none of the recorded packages are installed.\n* Use `renv::restore()` to restore the project library.\n\n\nThis output tells you that (1) renv was automatically installed and loaded, (2) the renv environment for the project was loaded, and (3) that none of packages recorded in the renv lockfile are installed.\nThe renv lockfile captures the state of the package library of the project at some point in time. It is defining the version of renv used when generating the lockfile, the version of  used in that project, the R repositories that were active when the lockfile was created and the package records defining each  package, their version, and their installation source. For details on the anatomy of renv.lock, see this section in the renv documentation.\n\n\n Click here to view the full renv.lock file of this project.\n\n\n\n\nrenv.lock\n\n{\n  \"R\": {\n    \"Version\": \"4.4.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://packagemanager.posit.co/cran/latest\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"MASS\": {\n      \"Package\": \"MASS\",\n      \"Version\": \"7.3-61\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"graphics\",\n        \"methods\",\n        \"stats\",\n        \"utils\"\n      ],\n      \"Hash\": \"0cafd6f0500e5deba33be22c46bf6055\"\n    },\n    \"R6\": {\n      \"Package\": \"R6\",\n      \"Version\": \"2.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"470851b6d5d0ac559e9d01bb352b4021\"\n    },\n    \"assertr\": {\n      \"Package\": \"assertr\",\n      \"Version\": \"3.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"MASS\",\n        \"R\",\n        \"dplyr\",\n        \"methods\",\n        \"rlang\",\n        \"stats\",\n        \"utils\"\n      ],\n      \"Hash\": \"dd34511e88d11c95e80f8d9bb0606e79\"\n    },\n    \"backports\": {\n      \"Package\": \"backports\",\n      \"Version\": \"1.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"e1e1b9d75c37401117b636b7ae50827a\"\n    },\n    \"base64enc\": {\n      \"Package\": \"base64enc\",\n      \"Version\": \"0.1-3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"543776ae6848fde2f48ff3816d0628bc\"\n    },\n    \"bslib\": {\n      \"Package\": \"bslib\",\n      \"Version\": \"0.8.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"cachem\",\n        \"fastmap\",\n        \"grDevices\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"lifecycle\",\n        \"memoise\",\n        \"mime\",\n        \"rlang\",\n        \"sass\"\n      ],\n      \"Hash\": \"b299c6741ca9746fb227debcb0f9fb6c\"\n    },\n    \"cachem\": {\n      \"Package\": \"cachem\",\n      \"Version\": \"1.1.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"fastmap\",\n        \"rlang\"\n      ],\n      \"Hash\": \"cd9a672193789068eb5a2aad65a0dedf\"\n    },\n    \"callr\": {\n      \"Package\": \"callr\",\n      \"Version\": \"3.7.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"processx\",\n        \"utils\"\n      ],\n      \"Hash\": \"d7e13f49c19103ece9e58ad2d83a7354\"\n    },\n    \"cli\": {\n      \"Package\": \"cli\",\n      \"Version\": \"3.6.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"b21916dd77a27642b447374a5d30ecf3\"\n    },\n    \"codetools\": {\n      \"Package\": \"codetools\",\n      \"Version\": \"0.2-20\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"61e097f35917d342622f21cdc79c256e\"\n    },\n    \"cpp11\": {\n      \"Package\": \"cpp11\",\n      \"Version\": \"0.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"91570bba75d0c9d3f1040c835cee8fba\"\n    },\n    \"crayon\": {\n      \"Package\": \"crayon\",\n      \"Version\": \"1.5.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"grDevices\",\n        \"methods\",\n        \"utils\"\n      ],\n      \"Hash\": \"859d96e65ef198fd43e82b9628d593ef\"\n    },\n    \"cyclocomp\": {\n      \"Package\": \"cyclocomp\",\n      \"Version\": \"1.1.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"callr\",\n        \"crayon\",\n        \"desc\",\n        \"remotes\",\n        \"withr\"\n      ],\n      \"Hash\": \"cdc4a473222b0112d4df0bcfbed12d44\"\n    },\n    \"data.table\": {\n      \"Package\": \"data.table\",\n      \"Version\": \"1.16.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"2e00b378fc3be69c865120d9f313039a\"\n    },\n    \"desc\": {\n      \"Package\": \"desc\",\n      \"Version\": \"1.4.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"cli\",\n        \"utils\"\n      ],\n      \"Hash\": \"99b79fcbd6c4d1ce087f5c5c758b384f\"\n    },\n    \"digest\": {\n      \"Package\": \"digest\",\n      \"Version\": \"0.6.37\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"33698c4b3127fc9f506654607fb73676\"\n    },\n    \"dplyr\": {\n      \"Package\": \"dplyr\",\n      \"Version\": \"1.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"cli\",\n        \"generics\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"methods\",\n        \"pillar\",\n        \"rlang\",\n        \"tibble\",\n        \"tidyselect\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"fedd9d00c2944ff00a0e2696ccf048ec\"\n    },\n    \"evaluate\": {\n      \"Package\": \"evaluate\",\n      \"Version\": \"1.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"3fd29944b231036ad67c3edb32e02201\"\n    },\n    \"fansi\": {\n      \"Package\": \"fansi\",\n      \"Version\": \"1.0.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"utils\"\n      ],\n      \"Hash\": \"962174cf2aeb5b9eea581522286a911f\"\n    },\n    \"fastmap\": {\n      \"Package\": \"fastmap\",\n      \"Version\": \"1.2.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"aa5e1cd11c2d15497494c5292d7ffcc8\"\n    },\n    \"fontawesome\": {\n      \"Package\": \"fontawesome\",\n      \"Version\": \"0.5.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"htmltools\",\n        \"rlang\"\n      ],\n      \"Hash\": \"bd1297f9b5b1fc1372d19e2c4cd82215\"\n    },\n    \"fs\": {\n      \"Package\": \"fs\",\n      \"Version\": \"1.6.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"7f48af39fa27711ea5fbd183b399920d\"\n    },\n    \"generics\": {\n      \"Package\": \"generics\",\n      \"Version\": \"0.1.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"15e9634c0fcd294799e9b2e929ed1b86\"\n    },\n    \"glue\": {\n      \"Package\": \"glue\",\n      \"Version\": \"1.8.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"5899f1eaa825580172bb56c08266f37c\"\n    },\n    \"here\": {\n      \"Package\": \"here\",\n      \"Version\": \"1.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"rprojroot\"\n      ],\n      \"Hash\": \"24b224366f9c2e7534d2344d10d59211\"\n    },\n    \"highr\": {\n      \"Package\": \"highr\",\n      \"Version\": \"0.11\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"xfun\"\n      ],\n      \"Hash\": \"d65ba49117ca223614f71b60d85b8ab7\"\n    },\n    \"htmltools\": {\n      \"Package\": \"htmltools\",\n      \"Version\": \"0.5.8.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"digest\",\n        \"fastmap\",\n        \"grDevices\",\n        \"rlang\",\n        \"utils\"\n      ],\n      \"Hash\": \"81d371a9cc60640e74e4ab6ac46dcedc\"\n    },\n    \"jquerylib\": {\n      \"Package\": \"jquerylib\",\n      \"Version\": \"0.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"htmltools\"\n      ],\n      \"Hash\": \"5aab57a3bd297eee1c1d862735972182\"\n    },\n    \"jsonlite\": {\n      \"Package\": \"jsonlite\",\n      \"Version\": \"1.8.9\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"methods\"\n      ],\n      \"Hash\": \"4e993b65c2c3ffbffce7bb3e2c6f832b\"\n    },\n    \"knitr\": {\n      \"Package\": \"knitr\",\n      \"Version\": \"1.49\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"evaluate\",\n        \"highr\",\n        \"methods\",\n        \"tools\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"9fcb189926d93c636dea94fbe4f44480\"\n    },\n    \"lazyeval\": {\n      \"Package\": \"lazyeval\",\n      \"Version\": \"0.2.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"d908914ae53b04d4c0c0fd72ecc35370\"\n    },\n    \"lifecycle\": {\n      \"Package\": \"lifecycle\",\n      \"Version\": \"1.0.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"rlang\"\n      ],\n      \"Hash\": \"b8552d117e1b808b09a832f589b79035\"\n    },\n    \"lintr\": {\n      \"Package\": \"lintr\",\n      \"Version\": \"3.1.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"backports\",\n        \"codetools\",\n        \"cyclocomp\",\n        \"digest\",\n        \"glue\",\n        \"knitr\",\n        \"rex\",\n        \"stats\",\n        \"utils\",\n        \"xml2\",\n        \"xmlparsedata\"\n      ],\n      \"Hash\": \"08cff46381a242d44c0d8dd0aabd9f71\"\n    },\n    \"magrittr\": {\n      \"Package\": \"magrittr\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"7ce2733a9826b3aeb1775d56fd305472\"\n    },\n    \"memoise\": {\n      \"Package\": \"memoise\",\n      \"Version\": \"2.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"cachem\",\n        \"rlang\"\n      ],\n      \"Hash\": \"e2817ccf4a065c5d9d7f2cfbe7c1d78c\"\n    },\n    \"mime\": {\n      \"Package\": \"mime\",\n      \"Version\": \"0.12\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"tools\"\n      ],\n      \"Hash\": \"18e9c28c1d3ca1560ce30658b22ce104\"\n    },\n    \"pillar\": {\n      \"Package\": \"pillar\",\n      \"Version\": \"1.9.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"cli\",\n        \"fansi\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\",\n        \"utf8\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"15da5a8412f317beeee6175fbc76f4bb\"\n    },\n    \"pkgconfig\": {\n      \"Package\": \"pkgconfig\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"01f28d4278f15c76cddbea05899c5d6f\"\n    },\n    \"processx\": {\n      \"Package\": \"processx\",\n      \"Version\": \"3.8.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"ps\",\n        \"utils\"\n      ],\n      \"Hash\": \"0c90a7d71988856bad2a2a45dd871bb9\"\n    },\n    \"ps\": {\n      \"Package\": \"ps\",\n      \"Version\": \"1.8.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"b4404b1de13758dea1c0484ad0d48563\"\n    },\n    \"purrr\": {\n      \"Package\": \"purrr\",\n      \"Version\": \"1.0.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"rlang\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"1cba04a4e9414bdefc9dcaa99649a8dc\"\n    },\n    \"rappdirs\": {\n      \"Package\": \"rappdirs\",\n      \"Version\": \"0.3.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"5e3c5dc0b071b21fa128676560dbe94d\"\n    },\n    \"remotes\": {\n      \"Package\": \"remotes\",\n      \"Version\": \"2.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\",\n        \"stats\",\n        \"tools\",\n        \"utils\"\n      ],\n      \"Hash\": \"3ee025083e66f18db6cf27b56e23e141\"\n    },\n    \"renv\": {\n      \"Package\": \"renv\",\n      \"Version\": \"1.0.11\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"47623f66b4e80b3b0587bc5d7b309888\"\n    },\n    \"rex\": {\n      \"Package\": \"rex\",\n      \"Version\": \"1.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"lazyeval\"\n      ],\n      \"Hash\": \"ae34cd56890607370665bee5bd17812f\"\n    },\n    \"rlang\": {\n      \"Package\": \"rlang\",\n      \"Version\": \"1.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"3eec01f8b1dee337674b2e34ab1f9bc1\"\n    },\n    \"rmarkdown\": {\n      \"Package\": \"rmarkdown\",\n      \"Version\": \"2.29\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"bslib\",\n        \"evaluate\",\n        \"fontawesome\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"knitr\",\n        \"methods\",\n        \"tinytex\",\n        \"tools\",\n        \"utils\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"df99277f63d01c34e95e3d2f06a79736\"\n    },\n    \"rprojroot\": {\n      \"Package\": \"rprojroot\",\n      \"Version\": \"2.0.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"4c8415e0ec1e29f3f4f6fc108bef0144\"\n    },\n    \"sass\": {\n      \"Package\": \"sass\",\n      \"Version\": \"0.4.9\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R6\",\n        \"fs\",\n        \"htmltools\",\n        \"rappdirs\",\n        \"rlang\"\n      ],\n      \"Hash\": \"d53dbfddf695303ea4ad66f86e99b95d\"\n    },\n    \"stringi\": {\n      \"Package\": \"stringi\",\n      \"Version\": \"1.8.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"stats\",\n        \"tools\",\n        \"utils\"\n      ],\n      \"Hash\": \"39e1144fd75428983dc3f63aa53dfa91\"\n    },\n    \"stringr\": {\n      \"Package\": \"stringr\",\n      \"Version\": \"1.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"rlang\",\n        \"stringi\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"960e2ae9e09656611e0b8214ad543207\"\n    },\n    \"tibble\": {\n      \"Package\": \"tibble\",\n      \"Version\": \"3.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"fansi\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"methods\",\n        \"pillar\",\n        \"pkgconfig\",\n        \"rlang\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"a84e2cc86d07289b3b6f5069df7a004c\"\n    },\n    \"tidyr\": {\n      \"Package\": \"tidyr\",\n      \"Version\": \"1.3.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"cpp11\",\n        \"dplyr\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"purrr\",\n        \"rlang\",\n        \"stringr\",\n        \"tibble\",\n        \"tidyselect\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"915fb7ce036c22a6a33b5a8adb712eb1\"\n    },\n    \"tidyselect\": {\n      \"Package\": \"tidyselect\",\n      \"Version\": \"1.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\",\n        \"vctrs\",\n        \"withr\"\n      ],\n      \"Hash\": \"829f27b9c4919c16b593794a6344d6c0\"\n    },\n    \"tinytex\": {\n      \"Package\": \"tinytex\",\n      \"Version\": \"0.54\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"xfun\"\n      ],\n      \"Hash\": \"3ec7e3ddcacc2d34a9046941222bf94d\"\n    },\n    \"utf8\": {\n      \"Package\": \"utf8\",\n      \"Version\": \"1.2.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"62b65c52671e6665f803ff02954446e9\"\n    },\n    \"vctrs\": {\n      \"Package\": \"vctrs\",\n      \"Version\": \"0.6.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\"\n      ],\n      \"Hash\": \"c03fa420630029418f7e6da3667aac4a\"\n    },\n    \"withr\": {\n      \"Package\": \"withr\",\n      \"Version\": \"3.0.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"graphics\"\n      ],\n      \"Hash\": \"cc2d62c76458d425210d1eb1478b30b4\"\n    },\n    \"xfun\": {\n      \"Package\": \"xfun\",\n      \"Version\": \"0.49\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"stats\",\n        \"tools\"\n      ],\n      \"Hash\": \"8687398773806cfff9401a2feca96298\"\n    },\n    \"xml2\": {\n      \"Package\": \"xml2\",\n      \"Version\": \"1.3.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"methods\",\n        \"rlang\"\n      ],\n      \"Hash\": \"1d0336142f4cd25d8d23cd3ba7a8fb61\"\n    },\n    \"xmlparsedata\": {\n      \"Package\": \"xmlparsedata\",\n      \"Version\": \"1.0.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"45e4bf3c46476896e821fc0a408fb4fc\"\n    },\n    \"yaml\": {\n      \"Package\": \"yaml\",\n      \"Version\": \"2.3.10\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"51dab85c6c98e50a18d7551e9d49f76c\"\n    }\n  }\n}\n\n\n\n\n\nRestoring renv\nIf renv is activated but it recognized that the packages listed in the renv.lock file are not installed (or not all of them), renv will suggest to restore the project library using renv::restore():\n\n\n\nOutput\n\n* This project contains a lockfile, but none of the recorded packages are installed.\n* Use `renv::restore()` to restore the project library.\n\n\n\nrenv::restore()\n\nThis will generate a list of files that will be updated.\n\n\n Click here to view an example output of the renv::restore() command.\n\n\nThe following package(s) will be updated:\n\n# CRAN ===============================\n- R6            [* -&gt; 2.5.1]\n- base64enc     [* -&gt; 0.1-3]\n- bslib         [* -&gt; 0.5.0]\n- cachem        [* -&gt; 1.0.8]\n- cli           [* -&gt; 3.6.1]\n- data.table    [* -&gt; 1.14.8]\n- digest        [* -&gt; 0.6.31]\n- ellipsis      [* -&gt; 0.3.2]\n- evaluate      [* -&gt; 0.21]\n- fastmap       [* -&gt; 1.1.1]\n- fontawesome   [* -&gt; 0.5.1]\n- fs            [* -&gt; 1.6.2]\n- glue          [* -&gt; 1.6.2]\n- here          [* -&gt; 1.0.1]\n- highr         [* -&gt; 0.10]\n- htmltools     [* -&gt; 0.5.5]\n- jquerylib     [* -&gt; 0.1.4]\n- jsonlite      [* -&gt; 1.8.5]\n- knitr         [* -&gt; 1.43]\n- lifecycle     [* -&gt; 1.0.3]\n- magrittr      [* -&gt; 2.0.3]\n- memoise       [* -&gt; 2.0.1]\n- mime          [* -&gt; 0.12]\n- rappdirs      [* -&gt; 0.3.3]\n- rlang         [* -&gt; 1.1.1]\n- rmarkdown     [* -&gt; 2.22]\n- rprojroot     [* -&gt; 2.0.3]\n- sass          [* -&gt; 0.4.6]\n- stringi       [* -&gt; 1.7.12]\n- stringr       [* -&gt; 1.5.0]\n- tinytex       [* -&gt; 0.45]\n- vctrs         [* -&gt; 0.6.3]\n- xfun          [* -&gt; 0.39]\n- yaml          [* -&gt; 2.3.7]\n\nDo you want to proceed? [y/N]: \n\n\nIf you want to proceed with the update, type YY and hit enter.\n\n\nInstalling / removing packages\n\nInstall packages:\n\n\n\nCode\n\n1install.packages(\"PACKAGE_NAME\")\n2renv::install(\"PACKAGE_NAME\")\n\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you want to install.\n\n2\n\nReplace PACKAGE_NAME with the actual name of the package that you want to install.\n\n\n\n\n\n\nRemove packages:\n\n\n\nCode\n\n1remove.packages(\"PACKAGE_NAME\")\n2renv::remove(\"PACKAGE_NAME\")\n\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you want to remove.\n\n2\n\nReplace PACKAGE_NAME with the actual name of the package that you want to remove.\n\n\n\n\nCall renv::snapshot() to save the new state of the project library to the renv.lock:\n\n\n\nCode\n\nrenv::snapshot()\n\n\n\n\n\nCommit your changes\nThe renv.lock is checked into version control, so after you updated it, make a new commit:\n\n\n\nCode\n\ngit add renv.lock\n1git commit -m \"Add package PACKAGE_NAME to renv\"\n\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you installed. Adapt the commit message as needed.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-references",
    "href": "contributing.html#sec-references",
    "title": "Contributing",
    "section": "References",
    "text": "References\n\n “Citations & Footnotes” in the Quarto documentation.\n HTML options for references.\n\n\nCite a reference\nReferences are stored in references.bib.\n\n\n Click here to view the full references.bib file of this project.\n\n\n\n\nreferences.bib\n\n@article{knuth84,\n  author = {Knuth, Donald E.},\n  title = {Literate Programming},\n  year = {1984},\n  issue_date = {May 1984},\n  publisher = {Oxford University Press, Inc.},\n  address = {USA},\n  volume = {27},\n  number = {2},\n  issn = {0010-4620},\n  url = {https://doi.org/10.1093/comjnl/27.2.97},\n  doi = {10.1093/comjnl/27.2.97},\n  journal = {Comput. J.},\n  month = may,\n  pages = {97–111},\n  numpages = {15}\n}\n\n@misc{bryan2015,\n  author = {Bryan, Jenny},\n  title = {How to name files},\n  year = {2015},\n  month = {May},\n  note = {[Online; accessed 19. Nov. 2020]},\n  url = {https://speakerdeck.com/jennybc/how-to-name-files}\n}\n\n@book{chacon2014,\n    title = {Pro Git},\n    author = {Chacon, Scott and Straub, Ben},\n    year = {2014},\n    date = {2014},\n    publisher = {Apress},\n    doi = {10.1007/978-1-4842-0076-6},\n    url = {http://dx.doi.org/10.1007/978-1-4842-0076-6},\n    note = {License: CC BY-NC}\n}\n\n@Manual{fischetti2023,\n    title = {assertr: Assertive Programming for R Analysis Pipelines},\n    author = {Fischetti, Tony},\n    year = {2023},\n    note = {R package version 3.0.1https://docs.ropensci.org/assertr/ (website)\nhttps://github.com/ropensci/assertr},\n    url = {https://docs.ropensci.org/assertr/},\n}\n\n@book{wickham2023,\n    title = {R for Data science: Import, Tidy, Transform, Visualize, and Model Data},\n    author = {Wickham, H. and Çetinkaya-Rundel, M. and Grolemund, G.},\n    year = {2023},\n    data = {2023},\n    publisher = {O'Reilly Media},\n    url = {https://r4ds.hadley.nz},\n    note = {License: CC BY-NC-ND 3.0 US}\n}\n\n@Manual{hester2024,\n    title = {lintr: A 'Linter' for R Code},\n    author = {Jim Hester and Florent Angly and Russ Hyde and Michael Chirico and Kun Ren and Alexander Rosenstock and Indrajeet Patil},\n    year = {2024},\n    note = {R package version 3.1.2},\n    url = {https://CRAN.R-project.org/package=lintr},\n}\n\n@Manual{mueller2020,\n    title = {here: A Simpler Way to Find Your Files},\n    author = {Kirill Müller},\n    year = {2020},\n    note = {R package version 1.0.1, https://github.com/r-lib/here},\n    url = {https://here.r-lib.org/},\n  }\n  \n@misc{rennie2024,\n  author       = {Nicola Rennie},\n  title        = {Writing Better R Code},\n  year         = {2024},\n  url          = {https://nrennie.rbind.io/training-better-r-code/},\n  note         = {Accessed on 2024-11-19}\n}\n\n\n\nUse the citation handle of the .bib-entry that you want to cite. For example use @chacon2014 to cite Chacon and Straub (2014). For details, see the chapter on “Citations & Footnotes” in the Quarto documentation. Add the specific references that you used to the bottom of the document. If the reference consists of multiple chapters and pages, try to specify the exact chapter or page.\n\n\nAdd a new reference\n\nOpen references.qmd.\nSwitch to the Visual Quarto editor.\nMove the cursor into any place in the document.\nClick on Insert and select @ Citation ....\nIf the reference has a DOI:\n\nSelect From DOI.\nPaste the DOI.\nSelect Insert.\n\nThis should add the new reference to references.bib.\nMove the citation key to the correct place in the document.\n\n\n\nAdd license information\nWe want to keep track of license information. If you add a new reference, please add the license information manually.\n\nGo to references.bib and find the reference.\nInside the .bib-entry for the reference add a new field called note that includes the license information.\n\n\n@book{\n  note = {License: CC BY-NC}\n}\n\nFor example, this is the references for Chacon and Straub (2014):\n\n@book{chacon2014,\n    title = {Pro Git},\n    author = {Chacon, Scott and Straub, Ben},\n    year = {2014},\n    date = {2014},\n    publisher = {Apress},\n    doi = {10.1007/978-1-4842-0076-6},\n    url = {http://dx.doi.org/10.1007/978-1-4842-0076-6},\n    note = {License: CC BY-NC}\n}",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-code",
    "href": "contributing.html#sec-code",
    "title": "Contributing",
    "section": "Code",
    "text": "Code\n\n “HTML Code Blocks” in the Quarto documentation\n\n\nAdd code snippets\nAdd code snippets to a Quarto document like this:\n```{zsh}\necho \"Hello World!\"\n```\n\n\n\n\n\n\nDisable code execution in all Quarto documents by default!\n\n\n\nPlace the following code in the YAML header of each Quarto document:\n\n\n\nCode\n\nengine: knitr\nexecute:\n  eval: false\n\n\n\n\n Example: Click here for the YAML header of the current document.\n\n\n\n\ncontributing.qmd\n\n---\nengine: knitr\nexecute: \n  eval: false\n---\n\n\n\n\n\nClick here to learn more.\n\nQuarto enables the inclusion of executable code blocks in Markdown. This empowers users to create reproducible documents and reports, as the code needed for generating the output is embedded within the document and automatically executed during rendering.\nHowever, in this guide, we usually only want to display code but not execute it! We therefore need to disable code execution in the YAML header of each Quarto document.\nThe YAML header in a Quarto document is used to specify important metadata and settings for the document. It is typically placed at the top of the document enclosed between three dashes (---) to separate it from the main content. The YAML header provides instructions to the Quarto rendering engine on how to process and present the document.\n\n\n\n\n\nReference external code\nYou can reference external code. For example, the following code block will:\n\n\n\n\n\n\n\n\n\ndescription\ncode\n\n\n\n\n1\nreference the _quarto.yml file\n#&#124; file: _quarto.yml\n\n\n2\ndisplay the first five lines of code\necho=c(1:5)\n\n\n3\nadd code line numbers\n#&#124; code-line-numbers: true\n\n\n4\nadd a filename to the code block\nfilename=\"_quarto.yml\"\n\n\n\n```{bash, filename=\"_quarto.yml\", echo=c(1:5)}\n#| file: _quarto.yml\n#| code-line-numbers: true\n```\n\n\n Click here for the output of this example.\n\n\n\n\n_quarto.yml\n\nproject:\n  type: book\n  execute-dir: project\n  output-dir: _book\n  preview: \n\n\n\n\n\nAdd code annotations\n\n “Code Annotation” in the Quarto documentation\n\n\nCode blocks and executable code cells in Quarto can include line-based annotations. Line-based annotations provide a way to attach explanation to lines of code much like footnotes.\n\nFor example, this is a code annotation for the git status command:\n```{zsh}\ngit status\n```\n1. `git status` displays the state of the working directory and the staging area.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-images",
    "href": "contributing.html#sec-images",
    "title": "Contributing",
    "section": "Images",
    "text": "Images\n\nBackground\nImages are stored in a NextCloud folder. They are downloaded into the /images folder using the command specified in the Makefile.\n\n\nInstallation\nYou need to install the following packages:\n\nGNU Make\n\n\n macOS Windows Linux\n\n\nGNU Make should already be installed. Try by entering the following command into the Terminal:\n\n\n\nCode\n\nmake --version\n\n\n\n\nFind instructions to install make on Windows here.\n\n\nTBA\n\n\n\n\n\nRetrieve images\nAfter you installed all the required software, run this command:\n\nmake images\n\n\n\n\n\n\n\nWhat’s a Makefile and what does it do?\n\n\n\n\n\n\n\n\nMakefile\n\nIMAGES_URL=https://cloud.uni-hamburg.de/s/pzEHT5DF3PzFdLH/download\nIMAGES_ARCHIVE=repro-book-images.zip\nIMAGES_DIR=images/\n\nall: render\n\n.PHONY: preview\npreview:\n    quarto preview\n\n.PHONY: render\nrender: clean images\n    quarto render\n\n.PHONY: pdf\npdf: clean images\n    quarto render --profile pdf\n    \n.PHONY: deploy\ndeploy: clean images\n    quarto publish gh-pages\n\n.PHONY: images\nimages:\n    curl $(IMAGES_URL) -o $(IMAGES_ARCHIVE)\n    unzip -j -o $(IMAGES_ARCHIVE) -d $(IMAGES_DIR)\n    rm -f $(IMAGES_ARCHIVE)\n\n.PHONY: clean\nclean:\n    rm -rf $(IMAGES_DIR)* _book/\n\n\n\n\n\n\n\nAdd a new image\n\nBecome a collaborator on the UHH Cloud folder.\nGo to the UHH Cloud folder.\nPlace the new image inside the folder. Please use - to separate words in the filename.\nReference the image in the Quarto document relative to the root of the project directory:\n\n\n![](static/NEW-IMAGE.png)\n\n\n\nDownload images in pre-render command\nIt’s also possible to include the make static as a project script in the pre-render script. This would re-execute make static before every render. For the moment, we disabled this option, but it can be enabled in _quarto.yml.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-variables",
    "href": "contributing.html#sec-variables",
    "title": "Contributing",
    "section": "Variables",
    "text": "Variables\n\n “Variables” in the Quarto documentation\n\nQuarto offers a number of ways to include dynamic variables within documents. Dynamic variables are useful for externalizing content that varies depending on context, or as an alternative to repeating a value in multiple places.\n\nCreating a variable\nIn this project, we use a project-level _variables.yml file to define variables. Variables can be either simple values or can include arbitrary Markdown content.\n\n\n\n_variables.yml (excerpt)\n\n  name: \"repro-book\"\n  title: \"The Repro Book\"\n\n\n\n\n Click here to view the full _variables.yml file of this project.\n\n\n\n\n_variables.yml\n\nproject:\n  name: \"repro-book\"\n  title: \"The Repro Book\"\n  subtitle: \"A Guide to Reproducible Research\"\n  description: \"The Repro Book - A Guide to Reproducible Research\"\n  email: \"lennart.wittkuhn@uni-hamburg.de\"\n  mailto: \"mailto:{{&lt; var project.email &gt;}}\"\n  site-url: \"https://lennartwittkuhn.com/repro-book\"\n  repo-host: \"GitHub\"\n  repo-url: \"https://github.com/lnnrtwttkhn/repro-book\"\n  issue-url: \"{{&lt; var project.repo-url &gt;}}/issues\"\n  new-issue-url: \"{{&lt; var project.repo-url &gt;}}/issues/new\"\n  contributors-url: \"{{&lt; var project.repo-url &gt;}}?tab=readme-ov-file#contributors\"\n  images-url: \"https://cloud.uni-hamburg.de/s/pzEHT5DF3PzFdLH\"\n  license-long: \"Creative Commons Attribution 4.0 International ([CC BY 4.0](https://creativecommons.org/licenses/by/4.0/))\"\n  license-short: \"[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/)\"\n  license-badge: \"[![License: CC BY 4.0](https://img.shields.io/badge/License-CC_BY_4.0-lightgrey.svg)](https://creativecommons.org/licenses/by/4.0/)\"\n  duration: \"2024 -- 2025\"\n  website-badge: \"[![Website](https://img.shields.io/website?url=https%3A%2F%2Flennartwittkuhn.com%2Frepro-book%2F)]({{&lt; var project.site-url &gt;}})\"\n  codespell-badge: \"[![Codespell]({{&lt; var project.repo-url &gt;}}/actions/workflows/codespell.yml/badge.svg)]({{&lt; var project.repo-url &gt;}}/actions/workflows/codespell.yml)\"\n  all-contributors-badge: \"[![All Contributors](https://img.shields.io/github/all-contributors/projectOwner/projectName?color=ee8449&style=flat-square)]({{&lt; var project.contributors-url &gt;}})\"\n  rproj: \"repro-book.Rproj\"\n  readme: \"https://github.com/lnnrtwttkhn/repro-book/blob/main/README.md\"\nlinks:\n  uhh: \"https://www.uni-hamburg.de/en.html\"\n  uhh-ddlitlab: \"https://www.isa.uni-hamburg.de/en/ddlitlab.html\"\n  uhh-isa: \"https://www.isa.uni-hamburg.de/\"\n  stiftung-hochschullehre: \"https://stiftung-hochschullehre.de/en/\"\n  funding-info: \"https://stiftung-hochschullehre.de/projekt/ddlitlab/\"\n  plausible: \"https://plausible.io/\"\n  quarto: \"https://quarto.org/\"\n  git: \"https://git-scm.com/\"\n  github: \"https://github.com/\"\n  version-control-book: \"https://lennartwittkuhn.com/version-control-book/\"\n  gnu-make-windows: \"https://leangaurav.medium.com/how-to-setup-install-gnu-make-on-windows-324480f1da69\"\n\n\n\n\n\nUsing a variable\nThe var shortcode then allows to include references to those variables within any document in this project. For example, to include the link to the Nextcloud folder that stores static contents (images etc.) as a variable in a document, use:\n\n\n\nCode\n\n{{&lt; var project.images-url &gt;}}\n\n\nThis will inject the contents of the variable into the document. In this example, {{&lt; var project.images-url &gt;}} will be displayed as https://cloud.uni-hamburg.de/s/pzEHT5DF3PzFdLH.\nFor more details on variables, read the chapter on Variables in the Quarto documentation.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-icons",
    "href": "contributing.html#sec-icons",
    "title": "Contributing",
    "section": "Fontawesome Icons",
    "text": "Fontawesome Icons\n\n Font Awesome Extension for Quarto\n Free Font Awesome icons\n\nWe use the Font Awesome Extension for Quarto to include Font Awesome icons.\n\nThis extension provides support including free icons provided by Font Awesome. Icons can be used in both HTML (via Font Awesome 6 Free) and PDF (via the fontawesome5 LaTeX package).\n\nThis extension includes support for only free Font Awesome icons.\nTo embed an icon, use the {{&lt; fa &gt;}} shortcode. For example, {{&lt; fa thumbs-up &gt;}} will result in . For details, see the project documentation on GitHub.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#style-guide",
    "href": "contributing.html#style-guide",
    "title": "Contributing",
    "section": "Style Guide",
    "text": "Style Guide\nWe have compiled a set of guidelines to keep a consistent style across all chapters of the book.\n\nSummary\n\nWrite one sentence per line\nUse consistent language\n\n\n\nWrite one sentence per line\nPlease write each sentence on a new line. Having each sentence on a new line will make no difference to how the text is displayed, there will still be paragraphs, but it will mean that any pull requests will be easier to check; the changes will be on a single line instead of somewhere in a paragraph. Consider the example below.\nToday you are you, that is truer than true. There is no one alive who is youer than you. - Dr Seuss\nA pull request on this correcting it to have a ‘.’ after Dr would show as a change to the whole paragraph. Contrast this with the next example which will be displayed online in the exact same way, but would see a change to a single line.\nToday you are you, that is truer than true.\nThere is no one alive who is youer than you.\n- Dr Seuss",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-acknowledgements",
    "href": "contributing.html#sec-acknowledgements",
    "title": "Contributing",
    "section": "Acknowledgements & Attribution",
    "text": "Acknowledgements & Attribution\n\nThe Quarto documentation (allaire2022?), in particular the chapters on Variables, Quarto Extensions, “Code Annotation” (License: GNU GPL v2)\n(blischak2016?)\nThe Font Awesome Extension for Quarto (License: MIT)\n(community2022?): Style Guide\n\n\n\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6.",
    "crumbs": [
      "Contributing"
    ]
  }
]