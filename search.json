[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Repro Book",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "The Repro Book",
    "section": "Welcome",
    "text": "Welcome\nWelcome to the world of reproducibility and “The Repro Book - A Guide to Reproducible Research”! The purpose of this book is to empower scientists, researchers, and students with the knowledge and skills needed to conduct a research project that is easy to reproduce.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#who-is-this-book-for",
    "href": "index.html#who-is-this-book-for",
    "title": "The Repro Book",
    "section": "Who is this book for?",
    "text": "Who is this book for?\nThis guide is meant to be a gentle introduction to reproducibility for (aspiring) scientists who want to conduct research more reproducible. Whether you are conducting experiments, writing code, collaborating with scientific peers, or managing complex data sets, this book conveys useful concepts with hands-on tips and exercises to enhance the reproducibility of your research project. While this book was developed with scientists in mind, it is open to anyone who wants to learn more about reproducibility. We try to avoid technical jargon as much as we can. When we discuss best practices about reproducible guidelines, we try to offer multiple alternatives but also give opinionated recommendations as guidance to new users.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#what-is-the-purpose-of-this-book",
    "href": "index.html#what-is-the-purpose-of-this-book",
    "title": "The Repro Book",
    "section": "What is the purpose of this book?",
    "text": "What is the purpose of this book?\nReproducibility can take your scientific projects to the next level. By enhancing reproducibility, you will strengthen your results and evidence from your analysis (The Turing Way Community 2022). Of course, conducting research projects considering reproducibility also adds some layer of complexity to your workflow. We aim to simplify this workflow as much as possible for you. Whether you are new to reproducibility or have dabbled in it before, this book aims to add something for all levels of expertise.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how-to-use-this-book",
    "href": "index.html#how-to-use-this-book",
    "title": "The Repro Book",
    "section": "How to use this book?",
    "text": "How to use this book?\nWe believe in learning by doing and try to focus on implementation as much as possible. The concepts introduced in this book are accompanied by practical examples and hands on exercises.  Feel free to follow the exercises to gain the necessary “muscle memory” to start enhancing the reproducibility of your work step-by-step. Further, we recommend to work with a current research projects of yourself to apply different steps making your research more reproducible. However, we also provide an example project, which you can download here. \nThis book was initially created for the full-semester course “Open Science in Practice: A Toolkit for Research” at University of Hamburg, Germany. The book is therefore structured for a course that is spread out across multiple sessions. Each chapter and the accompanying exercises should roughly fill 90 minutes of class time during a course.\nThis book is available in HTML format and will soon be available as PDF version. However, we recommend using the HTML version for the most up-to-date content. The HTML version in continuously updated with new material, corrections, and interactive elements, ensuring you always have access to the latest information. The PDF version will be a static snapshot and may become outdated over time, making it useful for offline reading and archival but less reliable for the most current information.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how-can-i-contribute",
    "href": "index.html#how-can-i-contribute",
    "title": "The Repro Book",
    "section": "How can I contribute?",
    "text": "How can I contribute?\nThis book is constantly evolving and meant as a living resource, and your input can make it even better! If you spot typos, have suggestions for improvement, or want to contribute new content, we welcome your involvement! If you find a typo, have an idea for a new chapter or want to see a specific topic covered you are more than welcome to open an issue or submit a pull request in the GitHub repository of this book.\n\n\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "contents.html",
    "href": "contents.html",
    "title": "Contents",
    "section": "",
    "text": "The estimate of the reading time for each chapter is computed by counting the words in the chapter and assuming a reading speed of 200 words per minute.\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Modified - Oldest\n      \n      \n        Modified - Newest\n      \n      \n        Reading Time (Low to High)\n      \n      \n        Reading Time (High to Low)\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\n\n\n\n\nbeginner\n\nbasics\n\n\n\nIn this chapter, you get to know the concept of reproducibility, different types of reproducibility and related but somewhat different concepts.\n\n\n\n\n9 min\n\nJuly 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nMotivation for reproducible science\n\n\n\n\n\n\nbeginner\n\nbasics\n\n\n\nIn this chapter, you learn about typical arguments in the Open Science debate. You will learn why some people do or do not engage in a reproducible workflow.\n\n\n\n\n9 min\n\nJuly 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nNaming things\n\n\n\n\n\n\nbeginner\n\nbasics\n\n\n\nIn this chapter you will learn how to name things. You get to know different principles for naming files and folders and accompanying tips how to apply them.\n\n\n\n\n13 min\n\nJuly 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nProject Structure\n\n\n\n\n\nIn this chapter, you will explore various types of project structures. You will learn what elements are essential for a project structure and what key factors to consider. Additionally, you will gain insight into how to create a project structure for your own work and understand what should be included in a published reproducibility archive.\n\n\n\n\n27 min\n\nJuly 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nResearch Data Management\n\n\n\n\n\n\nintermediate\n\n\n\nIn this chapter you will learn the basics of research data management.\n\n\n\n\n25 min\n\nJuly 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nGit crashcourse\n\n\n\n\n\n\nbeginner\n\nbasics\n\n\n\nIn this chapter, you will learn the basics of using the distributed version control system Git in RStudio.\n\n\n\n\n31 min\n\nJuly 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nGood Coding Practices\n\n\n\n\n\nIn the last chapters, you have learned how to name your names and variables and how to set up an organized project structure. In this chapter, you will learn good coding practices to help other researchers and your future self with the code you used for your analysis.\n\n\n\n\n21 min\n\nJuly 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nRobust Environments: {renv}\n\n\n\n\n\n\nintermediate\n\n\n\nIn this chapter you will learn how your reproducible research project becomes robust against different package versions. You will make it easy for you to and collaborators to use the same package versions in your joint project.\n\n\n\n\n14 min\n\nJuly 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nLiterate Programming\n\n\n\n\n\n\nintermediate\n\n\n\nIn this chapter you will learn how you can automatically integrate your reproducible results into a paper. You will learn the basics of Markdown syntax, how to write a paper within Quarto, and how to format it for a required output. You will learn how to use extensions, specifically the apaquarto extension to write a reproducible paper in APA-style.\n\n\n\n\n57 min\n\nJuly 2, 2025\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.",
    "crumbs": [
      "Contents"
    ]
  },
  {
    "objectID": "chapters/intro.html",
    "href": "chapters/intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 What is reproducibility?\nA good definition of reproducibility is given by The Turing Way Company:\nWe will use this conceptualization of reproducibility throughout the book. Note, that reproducibility and replicability are two different terms. Replicability is achieved when the same analysis produce similar answers among different datasets, whereas reproducibility when the same analysis produce the same answer in the same dataset. That makes reproducibility the lowest common denominator in research.\nThe definition above is the most common definition of reproducibility. Note, that some research areas use the terms reproducibility and replicability the other way around. Thus, in computational science, reproducibility is given when the same result is obtained when the same analyses are carried out with different data. Other areas use these terms interchangeably.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/intro.html#what-is-reproducibility",
    "href": "chapters/intro.html#what-is-reproducibility",
    "title": "1  Introduction",
    "section": "",
    "text": "“At The Turing Way, we define reproducible research as work that can be independently recreated from the same data and the same code that the original team used. Reproducible is distinct from replicable, robust and generalisable as described in the figure below.” - The Turing Way Community (2022), chapter on Reproducibility.\n\n\n\n\n\n\n\nFigure 1.1: “Reproducible Matrix” by The Turing Way Company (License: CC-BY 4.0; reused without modifications)\n\n\n\n\n\n\n\n\n\n\n\nReproducibility vs. Replicability\n\n\n\nDependent on the research area, reproducibility and replicability are used differently. In this book, we use a consistent and distinct conceptualization. Reproducibility means that the same analysis of the same data leads to the same result. Replicability means that the same analysis of different data leads to the same result.\nIf you look in the literature, be aware of what these terms express respective of the study you are reading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWithin this book, we limit the term reproducibility to computational entities. Thus, we mainly focus on data and code.\n\n\n\n1.1.1 Two errors of reproducibility\nAs a researcher who wants to reproduce a result from a different research project, there are two main reasons why reproducibility might fail (Nosek et al. 2022). First, you may not be able to repeat the analysis that had been done before, because of data or code unavailability or the lack of information or software to recreate code. This is called a process-based reproducibility failure. Second, your reanalysis yield different results than the original report. This is called an outcome-based reproducibility failure and can happen due to an error either in the original or the reproduction study (Nosek et al. 2022).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/intro.html#benefits-of-reproducible-research",
    "href": "chapters/intro.html#benefits-of-reproducible-research",
    "title": "1  Introduction",
    "section": "1.2 Benefits of reproducible research",
    "text": "1.2 Benefits of reproducible research\n\nEnhances the clarity of research processes for other researchers and yourself\nAllows other researchers to verify your results\nIncreases the credibility of research findings\nSaves time in the long run by reusing methods and data\nAids in the identification of errors and biases\nEnsures that research outputs can be used in future studies\nPromotes better documentation of research processes\nStrengthen a researcher’s reputation and career prospects\nFosters public understanding of scientific processes\nPromotes better data management practices\nMinimizes duplication of research efforts",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/intro.html#current-state-of-reproducibility",
    "href": "chapters/intro.html#current-state-of-reproducibility",
    "title": "1  Introduction",
    "section": "1.3 Current state of reproducibility",
    "text": "1.3 Current state of reproducibility\nBefore going deeper into the applied methods of making research reproducible, let’s have a look at how good research (psychological research) is now. The investigation into reproducibility started around 2010 with the beginning of the replication crisis. Artner et al. (2021) investigated the reproducibility of 46 articles from 2012, published in 3 different APA journals. The authors extracted 232 statistical claims and were able to reproduce 163 (70%) of the results. More recently, a study evaluated the reproducibility of research on the study level rather than the statistical result level. Hardwicke et al. (2021) investigated 25 articles of the journal Psychological Science that were published between 2014 and 2015 and awarded with OpenData Badges. Overall, 15 articles (60%) were fully reproducible, 9 of them (60%) without author involvement. Another article investigated 14 articles from an issue of the same journal five years later and tried to reproduce the results of the articles in that issue (Crüwell et al. 2023). The researchers could only exactly reproduce the results of one of the 14 articles. Three articles were essentially reproducible with minor deviations (such as typographical mistakes). Noteworthy: All of these articles were certified with an OpenData-Badge. Another study investigated 62 registered reports from the psychological literature from 2014-2018. 36 of them (58%) provided shared data and code and 21 of these 36 (58%) were reproducible (Obels et al. 2020). This evidence shows that psychological literature is far from a reproducibility ratio of 100%. However, a substantial body of studies already is reproducible.\nDespite these raw findings the researchers of the above-mentioned studies also reported hindrances that weaken and opportunities that foster the reproducibility of results. Reproducibility is not easy, in fact one of the authors described the process of reproducing the results as “cumbersome and time-consuming trial-and-error work” (Artner et al. 2021, 527). Below, a list describes hindering and fostering factors for reproducible research.\n\n\n\n\n\n\n\n\nWhat hinders reproducibility?\n\n\n\n\nRaw and / or data not available\nCodebook / metadata not available\nError-prone workflow of copy-pasting values from long statistical outputs\nUnclear reporting of analytic procedures\nDifferent versions of packages and software\n\n\n\n\n\n\n\n\n\n\n\n\nWhat fosters reproducibility?\n\n\n\n\nAvailability of raw and tidy data\nAvailability of metadata / a codebook\nFlowchart of case selection\nData manipulation steps stored in code\nDynamic reports (e.g. RMarkdown or Quarto)\nCo-piloting of data analysis\n\n\n\n\n\nMaybe, some of the concepts (e.g. raw vs. tidy data) are not familiar to you. Do not worry, this book will cover all topics, explain the concepts and will provide exercises to directly apply the concepts to a research project. One exception is the Co-piloting of data analysis. It means that other colleagues reconduct your data analyses based on your shared data and code. To get the best out of this book, we recommend to find a partner with whom you work through this book.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/intro.html#reproducibility-in-the-context-of-open-science",
    "href": "chapters/intro.html#reproducibility-in-the-context-of-open-science",
    "title": "1  Introduction",
    "section": "1.4 Reproducibility in the context of open science",
    "text": "1.4 Reproducibility in the context of open science\n\n\n\n\n\n\n\n\nFigure 1.2: Terms related to OpenScience (selfmade)\n\n\n\n\nReproducibility is a buzzword that is inevitably linked to OpenScience. But what is Open Science? Many associations aiming to foster OpenScience exist, however, a clear definition is rare. In their article, Lakomý, Hlavová, and Machackova (2019) referred to a book from Cribb and Sari (2010), defining OpenScience as follows:\n\n“Open Science is a practice aiming to make scientifically generated knowledge and its method of production more accessible, applicable, transparent, and responsive to the needs of both scientists and the public.” (Lakomý, Hlavová, and Machackova 2019, 246)\n\nOpen Science policies arose not only but also because of the so-called replication crisis. In psychology, 100 original studies were replicated and the results attracted a lot of attention. The mean effect size of the replicated studies was half the magnitude of the original effect sizes and only 36% of the replications had significant results compared to 97% of the original studies (Open Science Collaboration 2015). Psychology was not the only research area failing to replicate their studies. For example, cancer research also found theirselves in a crisis facing a thorough replication crisis (Begley and Ellis 2012). As a result, many initiatives and institutions arose to enhance the credibility of research (e.g. Center for OpenScience, ORION, and many more). This comprised not only replicability of studies but the whole research process. Thus, reproducibility is a feature of this research process. Nowadays, policies aim to not only make research open, but also a variety of other topics which are disclosed in Figure 1.2 including educational materials. This is also the reason why this Repro-Book is published online without any restrictions. As the title suggests, this book mainly focuses on computational reproducibility. However, on our way to a reproducible research project, we will tangent many topics related to OpenScience.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/intro.html#what-this-book-is-not-about",
    "href": "chapters/intro.html#what-this-book-is-not-about",
    "title": "1  Introduction",
    "section": "1.5 What this book is not about",
    "text": "1.5 What this book is not about\nOpen Science is a huge movement with many aspects, that we cannot cover completely in this book. Reproducibility is one important aspect for striving to open science, but many topics are still left.\n\n1.5.1 Questionable Research Practices (QRPs)\nQuestionable research practices (QRPs) have gained increasing attention since a popular article by John, Loewenstein, and Prelec (2012). We acknowledge the variety of QRPs and the need to face the issues raised by the authors, but that topic can fill another full book. If you feel engaged to learn more about QRPs, we recommend to read the article and the embedded references. \n\n\n1.5.2 Pre-registration\nPre-registrations have become popular as one answer to QRPs. However, even pre-registered studies can be irreproducible when data and code is not findable, accessible or understandable. In turn, a fully reproducible research project does not necessarily have to be pre-registered. Both contribute in their own way to open science. If you want to pre-register your study, we recommend https://aspredicted.org or https://osf.io. If you want to learn more about pre-registration, we recommend the website of the Center for Open Science.\n\n\n1.5.3 Statistics\nMany aspects of this book will deal with R and RStudio, which are powerful tools for statistical programming. However, this book requires almost no statistical knowledge. You might find some t-tests or something similar in code-examples (see Section 7.5). The purpose of the book is not to increase your statistical knowledge and skills; the purpose of the book is to make your research more reproducible. If you want to learn more about statistics, we recommend this free E-book by Danielle Navarro. If you prefer an analogous book, we recommend Discovering statistics using R by Andy Field.\n\n\n1.5.4 Programming\nThe same applies to programming as to statistics. You will not learn anything new on purpose about a programming language. However, you will learn concepts derived from programming that benefits your research. Thus, some parts of the book seem quite technical. Nevertheless, these technical parts aim to make your research more robust and less error-prone regarding reproducibility.\n\n\n\n\nArtner, Richard, Thomas Verliefde, Sara Steegen, Sara Gomes, Frits Traets, Francis Tuerlinckx, and Wolf Vanpaemel. 2021. “The Reproducibility of Statistical Results in Psychological Research: An Investigation Using Unpublished Raw Data.” Psychological Methods 26: 527–46. https://doi.org/10.1037/met0000365.\n\n\nBegley, C. Glenn, and Lee M. Ellis. 2012. “Raise Standards for Preclinical Cancer Research.” Nature 483: 531–33. https://doi.org/10.1038/483531a.\n\n\nCribb, Julian, and Tjempaka Sari. 2010. Open Science: Sharing Knowledge in the Global Century. CSIRO Publishing. https://doi.org/10.1071/9780643097643.\n\n\nCrüwell, Sophia, Deborah Apthorp, Bradley J. Baker, Lincoln Colling, Malte Elson, Sandra J. Geiger, Sebastian Lobentanzer, et al. 2023. “What’s in a Badge? A Computational Reproducibility Investigation of the Open Data Badge Policy in One Issue of Psychological Science.” Psychological Science 34: 513–22. https://doi.org/10.1177/09567976221140828.\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nHardwicke, Tom E., Manuel Bohn, Kyle MacDonald, Emily Hembacher, Michéle B. Nuijten, Benjamin N. Peloquin, Benjamin E. deMayo, Bria Long, Erica J. Yoon, and Michael C. Frank. 2021. “Analytic Reproducibility in Articles Receiving Open Data Badges at the Journal *Psychological Science*: An Observational Study.” Royal Society Open Science 8: 201494. https://doi.org/10.1098/rsos.201494.\n\n\nJohn, Leslie K., George Loewenstein, and Drazen Prelec. 2012. “Measuring the Prevalence of Questionable Research Practices With Incentives for Truth Telling.” Psychological Science 23 (5): 524–32. https://doi.org/10.1177/0956797611430953.\n\n\nLakomý, Martin, Renata Hlavová, and Hana Machackova. 2019. “Open Science and the Science-Society Relationship.” Society 56: 246–55. https://doi.org/10.1007/s12115-019-00361-w.\n\n\nNosek, Brian A., Tom E. Hardwicke, Hannah Moshontz, Aurélien Allard, Katherine S. Corker, Anna Dreber, Fiona Fidler, et al. 2022. “Replicability, Robustness, and Reproducibility in Psychological Science.” Annual Review of Psychology 73 (1): 719–48. https://doi.org/10.1146/annurev-psych-020821-114157.\n\n\nObels, Pepijn, Daniël Lakens, Nicholas A. Coles, Jaroslav Gottfried, and Seth A. Green. 2020. “Analysis of Open Data and Computational Reproducibility in Registered Reports in Psychology.” Advances in Methods and Practices in Psychological Science 3: 229–37. https://doi.org/10.1177/2515245920918872.\n\n\nOpen Science Collaboration. 2015. “Estimating the Reproducibility of Psychological Science.” Science 349 (August): aac4716. https://doi.org/10.1126/science.aac4716.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/motivation-for-reproducibility.html",
    "href": "chapters/motivation-for-reproducibility.html",
    "title": "2  Motivation for reproducible science",
    "section": "",
    "text": "2.1 Reproducibility: Simple and unnecessary?\nReproducibility is a big topic, we spent a lot of work and time in writing a book about it and you will probably spend a lot time learning about it. If you are asking the question “What for? Why should I do reproducible research?”, that’s completely reasonable. We decided to dedicate a whole chapter to this question, because it is very important to us describing different facets of the topic of reproducibility. Most of the arguments we will point out are not restricted to reproducibility but cover the whole topic of Open Science.\nAfter the definition of reproducibility in the previous chapter, you might have one of two thoughts: Either you think, that getting the same results from the same data and code has to be common practice and super simple. Just to ruin your day, you can search for a paper with public code and data and try to reproduce the results from the article. While you are doing this (or wisely not) you may also start to figure out that many problems can occur when trying to reproduce scientific results. The amount of time spent on making your research reproducible and eventually prepare solutions for many different problems that can occur, can give you a headache. Or you think that spending your time on making your research reproducible is simply not worth it. When you want to succeed as a researcher (PhD, Post-doc) and get a professorship at a university you need to get published in journals with high impact factors, find significant results to get published in such journals and receive a lot of citations from other researchers (see Note 2.1). Where is the time for reproducibility? Isn’t the reward system of science directly against good research practices? If you do not publish your code you can (un)intentionally and undetectedly make code errors that might confirm your hypothesized results. You can selectively report outcomes that confirm your hypotheses and climb the career ladder. Making your research reproducible and spending time with this learning resource is not valuable for your research career.\nBut there is also a different narrative:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivation for reproducible science</span>"
    ]
  },
  {
    "objectID": "chapters/motivation-for-reproducibility.html#reproducibility-simple-and-unnecessary",
    "href": "chapters/motivation-for-reproducibility.html#reproducibility-simple-and-unnecessary",
    "title": "2  Motivation for reproducible science",
    "section": "",
    "text": "Note 2.1: Evaluation of selection criteria in appointment procedures in psychology\n\n\n\n\n\nIn a study by Abele-Brehm and Bühner (2016), about 1,450 researchers in Psychology (members of the German Psychological Association) answered an online questionnaire, in which they rated the desired relevance of 41 selection criteria as well as their actual relevance in hiring procedures in psychology (66% of the respondents were actually members of a professorship hiring committee at least once). While some qualitative indicators like the fit of research profile to the appointing institute (Rank 2) and the quality of the research presentation (Rank 3) were also deemed relevant, several of the actually relevant indicators were quantitative and considered the number of peer-reviewed publications (Rank 1), the number of publications (Rank 4), the volume of third-party funding acquired to date (Rank 5) as well as the number of first-author publications (Rank 6). Also notably, “indicators of research transparency” took the last rank of 41 selection criteria.\n\n\n\n\n\n\n\n\n\nArguments against Open Science practices\n\n\n\n\ntime consuming\nnot important for climbing the career-ladder\npossible data misuse of shared data\nagainst innovation-driven research\nagainst business model of private research companies",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivation for reproducible science</span>"
    ]
  },
  {
    "objectID": "chapters/motivation-for-reproducibility.html#reproducibility-hard-and-worth-it",
    "href": "chapters/motivation-for-reproducibility.html#reproducibility-hard-and-worth-it",
    "title": "2  Motivation for reproducible science",
    "section": "2.2 Reproducibility: Hard and worth-it",
    "text": "2.2 Reproducibility: Hard and worth-it\n\nGoodhart’s Law: When a measure becomes a target, it ceases to be a good measure. Goodhart (1984)\n\n\n\n\n\n\n\nFigure 2.1: “Goodharts Law” by xkcd.com (Randall Munroe) (License: CC BY-NC 2.5; reused without modifications)\n\n\n\nLet’s take another perspective. First of all, ask yourself: What is your primary goal as a researcher? Is it climbing the career ladder by publishing in high impact factor journals or conducting high quality research or something else? The focus on performing well on measures that quantify research quality (like Impact-Factor and h-index) can lead to a loss of the original objective for which these measures were constructed, the quality of research itself (see Figure 2.1). Does one of them exclude the other? Why do you think so?\n\n\n\n\n\n\nA short anecdote on believing in most citations = best\n\n\n\n\n\nFor the introductory section of this book, we were searching for the prevalence of reproducible and non-reproducible psychological research. We typed the search string (reproducib* and psycholog*).ti into ‘Web of Science’. The database found 64 articles related to the search string. 4 articles had a “Highly cited paper” badge. We clicked on them with the feeling of getting the most important articles. We fell into the citation trap. In the end, when we had screened all 64 articles, 2 articles of the highly cited papers and 2 of the not highly cited papers gave rise to the research question. As this example illustrates, citations can be used as a measure but one can not only rely on them to make the decision on which papers will be worthwhile.\n\n\n\nIn a highly-debated blog post, Tal Yarkoni stated that as researchers, we are not helpless prisoners in the reward system of science. We are an active part of our respective scientific community. We have the ability to shape our work and craft our jobs in the direction of reproducibility (which can also improve mental well-being and job performance (Bakker, Demerouti, and Sanz-Vergel 2023)). No matter what, we have to take responsibility for our actions, if we want to or not, and we cannot blame the incentives of science and lose our responsibility for our work (Yarkoni 2018). Apart from that, reproducibility makes knowledge and scientific processes easier for everyone to access (The Turing Way Community 2022).\nHowever, there are some arguments by McKiernan et al. (2016) that Open Science practices (e.g. reproducible data and code) can even enhance your visibility as a researcher and give you a headstart at the academic market. When you publish the code and data of your published articles, others can work with your data. They may rerun your analysis, try to answer different research questions with your data or apply new methods to it. Especially the conduction of meta-analyses is simplified if your data and code are available and reproducible. This could increase your citations in comparison to not making your code and data publicly available (McKiernan et al. 2016). And further along you could be cited in important review-articles which also increases your visibility as researcher. You can also benefit the other way around. If there is a data set or calculation that suits your research question, you can use open data sets, saving a lot of time on data acquisition.\nFurthermore, making your research reproducible makes your research more efficient from the second project on. There is no doubt that making your first project reproducible is more time-consuming than ignoring reproducibility efforts. However, imagine you submitted a paper in whatever discipline and in your research you conclude that a slight change of the experimental setup or the statistical analyses would deepen the understanding of your topic. For example, you conducted a Stroop task (Stroop 1935) aiming to investigate an influencing factor that explains the stroop effect. You did your research, published a paper and now you want to investigate whether your findings also apply to the emotional stroop task (Williams, Mathews, and MacLeod 1996). If you set up your first study reproducible, you have easy access to the experiment, all your code that constitutes your experiment is already there. You just have to make minor changes to convert your initial stroop task to an emotional stroop task. Thus, reproducibility saves you a lot of time in programming tasks. Of course, the analyses pipelines to test your hypotheses would also already exist. This example shows how you can save a lot of time from your second project on.\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can even save a lot of time for your first project, when you build your work on previous OpenAccess work. For example, the initial study was not conducted by yourself, but was shared in a reproducibility archive such as osf.io.\n\n\n\nThe example also illustrates that reproducibility and Open Science practices foster collaboration among researchers (Poldrack 2019). With openly available experimental materials, you can collaborate with others also interested in your topic and can conduct well-powered multilab studies. Or the other way around: If in a multilab study one laboratory does not share the project materials in a way that the other labs can reproduce them, how easy will collaboration in this project be? A nice side benefit might be that you get job opportunities from other labs you collaborated with.\nBut how do you convince your supervisor to give you the time to make your research reproducible? Supervisors need the research and jobs to be funded by different organisations (as the Horizon Europe funding pool from the European Commission). These organisations now require open access practices including a call for reproducible research (for Horizon Europe see here and here). That means your supervisor would lose funding opportunities, if they don’t engage with you in Open Science practices and reproducible research.\n\n\n\n\n\n\nArguments for Open Science practices\n\n\n\n\nscientific integrity\nmake knowledge public\nvisibility as researcher\n\nmore citations\nmore citations in high-impact articles\n\nfaster research output\ncollaboration\njob opportunities\nfunding opportunities",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivation for reproducible science</span>"
    ]
  },
  {
    "objectID": "chapters/motivation-for-reproducibility.html#reproducibility-pays-off-in-the-long-run",
    "href": "chapters/motivation-for-reproducibility.html#reproducibility-pays-off-in-the-long-run",
    "title": "2  Motivation for reproducible science",
    "section": "2.3 Reproducibility pays off in the long run",
    "text": "2.3 Reproducibility pays off in the long run\nDuring this book, you will learn about project management, folder structure, version control, docker environments, coding practices and more. At first, all these tools intend to improve your reproducibility but may slow down your current research process. In the long run, you will save a lot of time once you get used to the proposed working process. Maybe you can remember your first research project during your undergraduate program. Do you still have access to it? Can you reproduce what you have done there? Do you even understand what you have done there? In your research career (and also outside of research) you will have to deal with much larger projects. It is of great importance to keep your projects as tidy as possible - for your colleagues and collaborators and for future you.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivation for reproducible science</span>"
    ]
  },
  {
    "objectID": "chapters/motivation-for-reproducibility.html#extent-of-reproducibility",
    "href": "chapters/motivation-for-reproducibility.html#extent-of-reproducibility",
    "title": "2  Motivation for reproducible science",
    "section": "2.4 Extent of reproducibility",
    "text": "2.4 Extent of reproducibility\nAs you will learn throughout this book, reproducibility is not a binary construct. There is no checklist waiting for you to tick off the open bullet points. It’s not that you either do or don’t do reproducible research. You can think of reproducibility more as a scale (see Figure 2.2) and you are shifting your reproducibility upwards by applying the tools you learn in this online resource.\n\n\n\n\n\n\nFigure 2.2: “Reproducibility Scale” by Heidi Seibold and Rabea Müller and The Digital Research Academy Community and The BERD Academy (License: CC-BY 4.0; reused without modifications)\n\n\n\nSo let’s get started to improve your reproducibility.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivation for reproducible science</span>"
    ]
  },
  {
    "objectID": "chapters/motivation-for-reproducibility.html#resources",
    "href": "chapters/motivation-for-reproducibility.html#resources",
    "title": "2  Motivation for reproducible science",
    "section": "2.5 Resources",
    "text": "2.5 Resources\nIf you want to dive deeper in the discussion of the value of reproducibility and Open Science and how to change behavior, here are some resources:\n\nhttps://talyarkoni.org/blog/2018/10/02/no-its-not-the-incentives-its-you/\nhttps://www.sciencedirect.com/science/article/pii/S0896627318310390\nhttps://erc.europa.eu/manage-your-project/open-science\nhttps://topfactor.org/\nhttps://elifesciences.org/articles/16800\nhttps://osf.io/652qw\n\n\n\n\n\nAbele-Brehm, Andrea E., and Markus Bühner. 2016. “Wer soll die Professur bekommen?” Psychologische Rundschau 67 (4): 250–61. https://doi.org/10.1026/0033-3042/a000335.\n\n\nBakker, Arnold B., Evangelia Demerouti, and Ana Sanz-Vergel. 2023. “Job Demands-Resources Theory: Ten Years Later.” Annual Review of Organizational Psychology and Organizational Behavior 10 (January): 25–53. https://doi.org/10.1146/annurev-orgpsych-120920-053933.\n\n\nGoodhart, C. A. E. 1984. “Problems of Monetary Management: The UK Experience.” In, 91–121. Macmillan Education UK. https://doi.org/10.1007/978-1-349-17295-5_4.\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nMcKiernan, Erin C, Philip E Bourne, C Titus Brown, Stuart Buck, Amye Kenall, Jennifer Lin, Damon McDougall, et al. 2016. “How Open Science Helps Researchers Succeed.” eLife 5 (July). https://doi.org/10.7554/elife.16800.\n\n\nPoldrack, Russell A. 2019. “The Costs of Reproducibility.” Neuron 101 (1): 11–14. https://doi.org/https://doi.org/10.1016/j.neuron.2018.11.030.\n\n\nStroop, J. R. 1935. “Studies of Interference in Serial Verbal Reactions.” Journal of Experimental Psychology 18: 643–62. https://doi.org/10.1037/h0054651.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.\n\n\nWilliams, J. M. G., A. Mathews, and C. MacLeod. 1996. “The Emotional Stroop Task and Psychopathology.” Psychological Bulletin 120: 3–24. https://doi.org/10.1037/0033-2909.120.1.3.\n\n\nYarkoni, Tal. 2018. “No, It’s Not the Incentives — It’s You.” https://talyarkoni.org/blog/2018/10/02/no-its-not-the-incentives-its-you/.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Motivation for reproducible science</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html",
    "href": "chapters/naming-things.html",
    "title": "3  Naming things",
    "section": "",
    "text": "3.1 Examples\nReflect on your first research project (or perhaps your most recent project). Take a moment to look at all the files you needed for that project. Can you determine what they contain just by their names? Below, you will find a real-life example from a second-semester undergraduate student in psychology. Which files would you want to encounter when you start reproducing results?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#examples",
    "href": "chapters/naming-things.html#examples",
    "title": "3  Naming things",
    "section": "",
    "text": "Exercise: What is bad or good about these file names?\n\n\n\n\n\nPause for a moment and think about what exactly makes the file names above bad or better? Discuss with a learning partner.\n\n\n\n\n3.1.1 Bad names\n\n PsychologyExample 2\n\n\n\n\n\nOutput\n\nAssignment BO\nDateien fÅr eigene Studien\nImages\nSessions by lecturer\nData results.pptx\nOutput behaviour observation 1. attempt.spv\nSPSS Results slightly shortened.pptx\nSPSS Results.pptx\nStatistical Analyses.docx\nSyntax behavior observation attempt 1.sps\n\n\n\n\n\n\n\nOutput\n\nmyabstract.docx\nJoe’s Filenames Use Spaces and Punctuation.xlsx\nfigure 1.png\nfig 2.png\nJW7d^(2sl@deletethisandyourcareerisoverWx2*.txt\n\n\n\n\n\n\n\n3.1.2 Better names\n\n PsychologyExample 2\n\n\n\n\n\nOutput\n\n01_session-slides\n02_images\n03_data\n04_assignment_behavior-observation\n2019-07-04_output_results_behavior-observation_attempt-1.spv\n2019-07-04_syntax_behavior-observation_attempt-1.sps\n2019-07-07_results_statistical-analyses.docx\n2019-07-09_SPSS_results.pptx\n2019-07-10_SPSS_results_short.pptx\n2019-07-11_data-results.pptx\n\n\n\n\n\n\n\nOutput\n\n2014-06-08_abstract-for-sla.docx\njoes-filenames-are-getting-better.xlsx\nfig01_scatterplot-talk-length-vs-interest.png\nfig02_histogram-talk-attendance.png\n1986-01-28_raw-data-from-challenger-o-rings.txt",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#introduction",
    "href": "chapters/naming-things.html#introduction",
    "title": "3  Naming things",
    "section": "3.2 Introduction",
    "text": "3.2 Introduction\n\n“There are only two hard things in Computer Science: cache invalidation and naming things.” – Phil Karlton\n\nIn research, naming things can often be more difficult than it seems. Whether you’re giving names to variables in a dataset, labeling files for your projects, or creating functions in a script, the names you choose are important for making your work clear and understandable. Good names help others (and yourself!) know what your work is about and how to use it.\nFinding the right names takes careful thought. You need to consider what makes sense in context and how to be clear and consistent. This chapter will look at some common challenges people face when naming things in research and provide simple tips to improve your naming practices. By understanding these challenges, you can make your research easier to follow and more accessible to others and avoid situations as illustrated in Figure 3.1.\n\n\n\n\n\n\nFigure 3.1: “A story told in file names” by Jorge Cham (License: ; All content copyright 1997-2003 Piled Higher and Deeper Publishing, LLC.)\n\n\n\n\n\n\n\n\n\nOk, what the heck is cache invalidation and why is it hard?\n\n\n\n\n\nCache invalidation is the process of updating or removing old data stored in a cache (a temporary storage area) when the original data changes. Caches are used to speed up access to frequently used data, but if the cache isn’t updated correctly, it may end up providing outdated or incorrect information. It is challenging for several reasons: first, determining the right moment to update the cache can be difficult, risking the delivery of outdated information. Additionally, many data pieces are interconnected, making it hard to track what needs updating when changes occur. Lastly, automatically updating caches can slow down systems, so finding a balance between performance and accuracy is tricky. These complexities make effective cache invalidation one of the most difficult problems in software development.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#principles-for-file-names",
    "href": "chapters/naming-things.html#principles-for-file-names",
    "title": "3  Naming things",
    "section": "3.3 Principles for (file) names",
    "text": "3.3 Principles for (file) names\nGood file naming practices are essential for organization, clarity, and efficient file management. Here are some key principles to follow when creating file names:\n\nMachine readable\nHuman readable\nConsistency\nPlay well with default ordering",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#machine-readable",
    "href": "chapters/naming-things.html#machine-readable",
    "title": "3  Naming things",
    "section": "3.4 Machine readable",
    "text": "3.4 Machine readable\nA file is machine-readable if information is formatted in a way that a computer can easily read and understand it without needing a human to interpret or manually enter the data. This often involves using standardized data formats like CSV, XML, or JSON, which are structured so that computer programs can process the information quickly and accurately. There are two main concepts that help computers quickly search and match patterns in text or file names, making data processing tasks easier and faster: regular expressions and globbing.\n\n3.4.1 Regular expression and globbing friendly\nBoth regular expression and globbing are concepts that help make working with files and data more efficient for automation and scripting tasks.\nA regular expression, often called a “regex”, is a sequence of characters that defines a search pattern. It’s used to find or match specific combinations of characters within text. You can think of it as a tool for searching text in a very precise and flexible way.\nGlobbing is a way to use special characters (called “wildcards”) to match multiple files or directories in command-line interfaces or scripts. It helps you to select groups of files without typing every single name.\nCommon wildcards in globbing:\n\n* (asterisk): Matches any number of characters. For example, *.txt matches all files ending with .txt.\n? (question mark): Matches exactly one character. For example, file?.txt matches file1.txt and file2.txt, but not file10.txt.\n\nSo, if you wanted to list all text files in a directory, you could use the pattern *.txt, and it would match all files with the .txt extension.\n\n\n3.4.2 How to make files regex and globbing friendy\nTo make file names regex and globbing friendly, avoid:\n\nspaces\npunctuation\naccented characters\ncase sensitivity\n\n\n\n\n\n\n\nWhat are regular expressions?\n\n\n\n\n\nA regular expression is a special sequence of characters that helps you to search for patterns in text. It allows you to find specific words or phrases within a larger body of text. For example, imagine you have a text document and you want to find all email addresses mentioned in it. You can use the following regular expression to search for email addresses:\n\n\n\nCode\n\n\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\n\n\nThis pattern will match any text that looks like an email address, such as example@email.com. Imagine that you have a text like the following:\n\nPlease contact me at john.doe@email.com for any inquiries. You can also reach out to jane.smith@example.com for more information.\n\nYou can see regular expression in action with this example:\n\n\n\nCode\n\necho \"Please contact me at john.doe@email.com for any inquiries. You can also reach out to jane.smith@example.com for more information.\" | grep -Eo \"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\"\n\n\nHere is what happens with this command:\n\necho is used to display the sample text.\nThe pipe (|) sends the output of echo as input to grep.\ngrep -Eo enables extended regular expressions and prints only the matching part of the line.\nThe regular expression \\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b is used to identify email addresses in the text output by echo.\n\nYou can also paste the example text into a text file, for example called example.txt and then apply the same command to the text file:\n\n\n\nCode\n\ngrep -Eo \"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\" example.txt\n\n\nHere you can see the output:\n\n\n\nOutput\n\njohn.doe@email.com\njane.smith@example.com\n\n\n\n\n\n\n\n\n\n\n\nWhat is globbing?\n\n\n\n\n\nGlobbing refers to the use of wildcard characters (like * and ?) to match multiple files or directories in command-line interfaces and scripting. Being globbing friendly means file names or paths are structured in a way that makes them easy to match using these wildcards.\nFor example, let’s assume that you have three files like YYYY-MM-DD_NEOFFI_numerical-stroop_bsc-thesis_01.csv and YYYY-MM-DD_NEOFFI_emotional-stroop_msc-thesis_01.csv. You can use a glob pattern like *emotional* to match all of your data sets associated with the emotional stroop task.\n\n PsychologyBiology\n\n\nExcerpt of complete file listing:\n\n\n\nOutput\n\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_01.csv\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_02.csv\n2021-02-19_NEOFFI_numerical-stroop_bsc-thesis_03.csv\n2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\n2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\n2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\n2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\n\n\n\n\nExcerpt of complete file listing:\n\n\n\nOutput\n\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H01.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H02.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A01.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A02.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A04.csv\n\n\n\n\n\n\n PsychologyBiology\n\n\n\n Bash macOS\n\n\n\n\n\nCode\n\nlist.files(pattern = \"emotional\") |&gt; head\n\n\n\n\n\nOutput\n\n[1] \"2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\"\n[2] \"2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\"\n[3] \"2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\"\n[4] \"2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\"\n\n\n\n\n\n\n\nCode\n\nls *emotional*\n\n\n\n\n\nOutput\n\n2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\n2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\n2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\n2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\n\n\n\n\n\n\n\nThis screenshot was made by Justus Reihs on a MacBook. Used under a CC-BY 4.0 license.\n\n\n\n\n\n\n\n\n Bash macOS\n\n\n\n\n\nCode\n\nlist.files(pattern = \"Plasmid\") |&gt; head\n\n\n\n\n\nOutput\n\n[1] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_A01.csv\"\n[2] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_A02.csv\"\n[3] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_A03.csv\"\n[4] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_B01.csv\"\n[5] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_B02.csv\"\n[6] \"2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_B03.csv\"\n\n\n\n\n\n\n\nCode\n\nls *Plasmid*\n\n\n\n\n\nOutput\n\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H01.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H02.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H03.csv\n\n\n\n\n\n\n\nThis screenshot was made by Justus Reihs on a MacBook. Used under a CC-BY 4.0 license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.4.3 Recover meta data from file names\nMetadata is information that describes key details about a file, like the date it was created, the author, or the type of data it contains. Including metadata in a filename (for example, 2023_Experiment1_DrSmith.csv) is helpful because it makes important details visible at a glance. This helps with organizing, searching, and sorting files, especially in large projects where you may have many similar files. By storing metadata in filenames, you can quickly understand what each file contains without opening it, saving time and reducing errors in data management.\n\n3.4.3.1 How to recover meta data from file names\nDeliberate use of underscores (_) and hyphens (-) allows us to recover metadata from file names.\n\nUse underscores (_) to delimit units of metadata\nUse hyphens (-) to delimit words to improve human readability\n\n\n PsychologyBiology\n\n\n\n\n\n\n\n\n\nCode\n\nflist &lt;- list.files(pattern = \"emotional\") %&gt;% head\nstringr::str_split_fixed(flist, \"[_\\\\.]\", 6)\n\n\n\n\n\nOutput\n\n# date survey paradigm project participant\n      [ ,1]        [ ,2]    [ ,3]              [ ,4]        [ ,5] [ ,6]  \n[1, ] \"2021-06-04\" \"NEOFFI\" \"emotional-stroop\" \"msc-thesis\" \"001\" \"csv\"\n[2, ] \"2021-06-05\" \"NEOFFI\" \"emotional-stroop\" \"msc-thesis\" \"002\" \"csv\"\n[3, ] \"2021-06-07\" \"NEOFFI\" \"emotional-stroop\" \"msc-thesis\" \"003\" \"csv\"\n[4, ] \"2021-06-11\" \"NEOFFI\" \"emotional-stroop\" \"msc-thesis\" \"004\" \"csv\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\nflist &lt;- list.files(pattern = \"Plasmid\") %&gt;% head\nstringr::str_split_fixed(flist, \"[_\\\\.]\", 5)\n\n\n\n\n\nOutput\n\n# date assay sampleset well\n     [ ,1]        [ ,2]            [ ,3]                                  [ ,4] [ ,5]\n[1,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"A01\" \"csv\"\n[2,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"A02\" \"csv\"\n[3,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"A03\" \"csv\"\n[4,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"B01\" \"csv\"\n[5,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"B02\" \"csv\"\n[6,] \"2013-06-26\" \"BRAFWTNEGASSAY\" \"Plasmid-Cellline-100-1MutantFraction\" \"B03\" \"csv\"\n\n\n\n\n\n\n\n\n\n\n\n3.4.4 Summary\nNames are more easily machine-readable if they are:\n\nEasy to search for files later.\nEasy to narrow file lists based on names.\nEasy to extract information from file names, for example, by splitting them.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#human-readable",
    "href": "chapters/naming-things.html#human-readable",
    "title": "3  Naming things",
    "section": "3.5 Human readable",
    "text": "3.5 Human readable\nNames of files and folders should contain information about its content. It should make it easy to figure out what something is based on the file name. This idea connects to the concept of a slug from semantic URLs.\n\n\n\n\n\n\nWhat is a slug in a URL?\n\n\n\n\n\nA slug is a part of a URL that is easy to read and understand. It usually comes after the main website address and describes the content of the page in simple words. Slugs are important for both humans and search engines because they give a clear idea of what the page is about.\nFor example:\n\nThe full URL might be: https://www.example.com/blog/how-to-cook-pasta\nThe slug in this URL is: how-to-cook-pasta\n\nGood slugs are short, descriptive, and use hyphens to separate words. This makes the URL more user-friendly and helps search engines understand the page content.\n\n\n\nFind the slug in the following file names:\n\n PsychologyBiology\n\n\n\n\n\nOutput\n\n01_DSM-5-data.csv\n02_pre-analysis-filtering.r\n03_test-hypotheses.r\n04_exploratory-analyses.r\n90_DSM-V-codebook.csv\nhelper01_load-packages.r\nhelper02_load-codebook.r\nhelper03_test-assumptions.r\nhelper04_load-figure-template.r\n\n\n\n\n\n\n\nOutput\n\n01_marshal-data.r\n02_pre-dea-filtering.r\n03_dea-with-limma-voom.r\n04_explore-dea-results.r\n90_limma-model-term-name-fiasco.r\nhelper01_load-counts.r\nhelper02_load-exp-des.r\nhelper03_load-focus-statinf.r\nhelper04_extract-and-tidy.r\n\n\n\n\n\nWhich filenames make it easier to understand their content?\n\n PsychologyBiology\n\n\n\n\n\nOutput\n\n01_DSM-5-data.csv\n02_pre-analysis-filtering.md\n02_pre-analysis-filtering.r\n03_test-hypotheses.md\n03_test-hypotheses.r\n04_exploratory-analyses.md\n04_exploratory-analyses.r\n90_DSM-codebook.csv\nMakefile\nfigure\nhelper01_load-packages.r\nhelper02_load-codebook.r\nhelper03_test-assumptions.r\nhelper04_load-figure-template.r\ntmp.txt\n\n\n\n\n\nOutput\n\n01.csv\n02.md\n02.r\n03.md\n03.r\n04.md\n04.r\n90.md\n90.r\nMakefile\nfigure\nhelper01.r\nhelper02.r\nhelper03.r\nhelper04.r\ntmp.txt\n\n\n\n\n\n\n\nOutput\n\n01_marshal-data.md\n01_marshal-data.r\n02_pre-dea-filtering.md\n02_pre-dea-filtering.r\n03_dea-with-limma-voom.md\n03_dea-with-limma-voom.r\n04_explore-dea-results.md\n04_explore-dea-results.r\n90_limma-model-term-name-fiasco.md\n90_limma-model-term-name-fiasco.r\nMakefile\nfigure\nhelper01_load-counts.r\nhelper02_load-exp-des.r\nhelper03_load-focus-statinf.r\nhelper04_extract-and-tidy.r\ntmp.txt\n\n\n\n\n\nOutput\n\n01.md\n01.r\n02.md\n02.r\n03.md\n03.r\n04.md\n04.r\n90.md\n90.r\nMakefile\nfigure\nhelper01.r\nhelper02.r\nhelper03.r\nhelper04.r\ntmp.txt",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#consistency",
    "href": "chapters/naming-things.html#consistency",
    "title": "3  Naming things",
    "section": "3.6 Consistency",
    "text": "3.6 Consistency\nYou can find and organize files more easily when you name them consistently.\nSometimes, file names might be in multiple languages.\nFor example, you may study in the Netherlands or Germany, but your research project involves international colleagues, so the common language is English.\nIt is recommended to name your files in only one language that everyone involved can understand.\nEven if you use just one language, regional differences can lead to variations in spelling.\nFor example, the English word “behavior” is spelled with a u in British English (“behaviour”) but without it in American English (“behavior”).\nDecide as a team on a single language and spelling style for naming files and folders.\nBe mindful of capitalization as well, and choose a consistent style!\n\nConsistent namesInconsistent names\n\n\n\n\n\nOutput\n\ndecision-for-the-use-of-american-english.csv\nall-my-file-names-are-in-one-language.txt\nbehavioral-data-is-consistently-named.csv\nbehavioral-data-file-names-are-easy-to-understand.r\nconsistent-convention-about-capitalization.csv\n\n\n\n\n\n\n\nOutput\n\ndecision-for-the-use-of-plenty-languages.csv\ndette-dokumentet-har-et-norsk-navn.txt\nbehavioural-data-is-not-consistently-named.csv\nbehavioral-data-file-names-are-hard-to-understand.r\nSome-words-Are-written-in-upper-case.csv",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#play-well-with-default-ordering",
    "href": "chapters/naming-things.html#play-well-with-default-ordering",
    "title": "3  Naming things",
    "section": "3.7 Play well with default ordering",
    "text": "3.7 Play well with default ordering\nFilenames should be designed to work well with default ordering (like alphabetical or chronological order) so that files are easy to locate and understand at a glance Good ordering lets related files appear together, saves time when searching, and keeps files organized, especially in large projects.\n\n3.7.1 Put something numeric first\n\n3.7.1.1 Chronological order\n\n PsychologyBiology\n\n\n\n\n\nOutput\n\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_01.csv\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_02.csv\n2021-02-19_NEOFFI_numerical-stroop_bsc-thesis_03.csv\n2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\n2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\n2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\n2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\n\n\n\n\n\n\n\nOutput\n\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H01.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H02.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A01.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A02.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A04.csv\n\n\n\n\n\n\n\n\n\n\n\nWhen keeping copies of the same or similar files, consider version control!\n\n\n\nConsider the use of chronologically ordered files and folders! For specifying different versions of the same document, version control tools as Git and GitHub should be preferred. Otherwise you might feel as the person in the cartoon in Figure 6.2 writing on his “final document”. For different but similar files, a chronological order can make sense.\n\n\n\n\n\n\n\n\nFigure 3.2: “notFinal.doc” by Jorge Cham (License: All content copyright 1997-2003 Piled Higher and Deeper Publishing, LLC.; reused without modifications)\n\n\n\n\n\n3.7.1.2 Logical order\n\n PsychologyBiology\n\n\n\n01_DSM-5-data.csv\n02_pre-analysis-filtering.r\n03_test-hypotheses.r\n04_exploratory-analyses.r\n90_DSM-V-codebook.csv\nhelper01_load-packages.r\nhelper02_load-codebook.r\nhelper03_test-assumptions.r\nhelper04_load-figure-template.r\n\n\n\n\n01_marshal-data.r\n02_pre-dea-filtering.r\n03_dea-with-limma-voom.r\n04_explore-dea-results.r\n90_limma-model-term-name-fiasco.r\nhelper01_load-counts.r\nhelper02_load-exp-des.r\nhelper03_load-focus-statinf.r\nhelper04_extract-and-tidy.r\n\n\n\n\n\n\n3.7.1.3 Use the ISO 8601 standard for dates\nIn 1988, to avoid confusion, the International Organization for Standardization (ISO) set a global standard numeric date format, known as ISO 8601: YYYY-MM-DD, where YYYY stands for the year, e.g., 2024, MM stands for the month, e.g., 11, and DD stands for the day, e.g., 06. Using the ISO 8601 standard for dates (like 2023-11-06) ensures consistency and avoids confusion. This format starts with the year, followed by the month, and then the day, which makes it easy to sort dates in the correct order. It works well across different cultures and software, helping everyone read and organize dates the same way.\n\n PsychologyBiology\n\n\n\n\n\nOutput\n\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_01.csv\n2021-02-18_NEOFFI_numerical-stroop_bsc-thesis_02.csv\n2021-02-19_NEOFFI_numerical-stroop_bsc-thesis_03.csv\n2021-06-04_NEOFFI_emotional-stroop_msc-thesis_001.csv\n2021-06-05_NEOFFI_emotional-stroop_msc-thesis_002.csv\n2021-06-07_NEOFFI_emotional-stroop_msc-thesis_003.csv\n2021-06-11_NEOFFI_emotional-stroop_msc-thesis_004.csv\n\n\n\n\n\n\n\nOutput\n\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H01.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H02.csv\n2013-06-26_BRAFWTNEGASSAY_Plasmid-Cellline-100-1MutantFraction_H03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A01.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A02.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A03.csv\n2014-02-17_BRAFWTNEGASSAY_FFPEDNA-CRC-1-41_A04.csv\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.3: “ISO 8601” by xkcd.com (Randall Munroe) (License: CC BY-NC 2.5; reused without modifications)\n\n\n\n\n\n3.7.1.4 Consider the output:\nFiles that are later turned into HTML should be exclusively delimited by hyphens (-).\n\n\n\n3.7.2 Left-pad numbers with zeros\nLeft-padding of numbers refers to the practice of adding zeros to the left of a number to make it reach a certain length. This can be useful, for example, when dealing with numerical data that needs to be formatted in a specific way for presentation or computational purposes. By left-padding numbers, you can ensure that they all have the same length and are easier to compare or work with in a numerical context.\n\n PsychologyBiology\n\n\n\n01_DSM-5-data.csv\n02_pre-analysis-filtering.r\n03_test-hypotheses.r\n04_exploratory-analyses.r\n90_DSM-V-codebook.csv\nhelper01_load-packages.r\nhelper02_load-codebook.r\nhelper03_test-assumptions.r\nhelper04_load-figure-template.r\n\n\n\n\n\n\nOutput\n\n01_marshal-data.r\n02_pre-dea-filtering.r\n03_dea-with-limma-voom.r\n04_explore-dea-results.r\n90_limma-model-term-name-fiasco.r\nhelper01_load-counts.r\nhelper02_load-exp-des.r\nhelper03_load-focus-statinf.r\nhelper04_extract-and-tidy.r\n\n\n\n\n\nIf you don’t left pad numbers, you get this:\n\n\n\nOutput\n\n10_final-figs-for-publication.R\n1_data-cleaning.R\n2_fit-model.R\n\n\n\n\n\n\n\n\nConsider how many leading zero you will need!\n\n\n\n\n\nWhen left-padding numbers, you can add as many leading zeros as you might need. In many cases, using one zero (i.e., 01) will be sufficient but you might also have more files, you could consider left-padding with two zeros (i.e., 001) if the number of relevant files go to or beyond a hundred.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#summary-1",
    "href": "chapters/naming-things.html#summary-1",
    "title": "3  Naming things",
    "section": "3.8 Summary",
    "text": "3.8 Summary\nHere is a summary of all recommendations for naming things:\n\n3.8.1 Machine readable\n\nFile names are regular expression and globbing friendly\nFile names allow to recover meta data\n\n\n\n3.8.2 Human readable\n\nFile names contain info on content\n\n\n\n3.8.3 Consistency\n\nFile names are named in one language\nBe aware of regional influences in spelling\nConsistent use of upper and lower case\n\n\n\n3.8.4 Plays well with default ordering\n\nPut something numeric first\nUse the ISO 8601 standard for dates: YYYY-MM-DD\nLeft pad other numbers with zeros: e.g., 01",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/naming-things.html#acknowledgements-further-reading",
    "href": "chapters/naming-things.html#acknowledgements-further-reading",
    "title": "3  Naming things",
    "section": "3.9 Acknowledgements & further reading",
    "text": "3.9 Acknowledgements & further reading\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\nThe ideas provided in this chapter are mainly based on the slides from Bryan (2015). We are also thankful for the additional ideas of Danielle Navarro and the BERD Academy.\n\n\n\n\nBryan, Jenny. 2015. “How to Name Files.” https://speakerdeck.com/jennybc/how-to-name-files.\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming things</span>"
    ]
  },
  {
    "objectID": "chapters/project-structure.html",
    "href": "chapters/project-structure.html",
    "title": "4  Project Structure",
    "section": "",
    "text": "4.1 Examples\nProject structure addresses how the files and folder of your research project are structured. This is what this chapter is about. Other topics related to the term, such as setting a timeline for your project, will be neglected as this would lead to losing the focus on reproducibility. A good folder structure saves you and other researchers a lot of time when revisiting or trying to understand your data. However, there is no universal best practice standard for project structures. Below are several examples of different project structures:\nWhen looking at the different project structures, it becomes clear that there is no perfect or correct project structure for a research project. The variety and scale of projects is too diverse and include different demands of different parties. Nevertheless, in this chapter we try to summarise the most important aspects of a project structure in the context of research. We only tackle basic standards that help in every project. We will not handle optional standards for specific research contexts. Afterwards, we display reproducibility archives and the different requirements journals articulate for setting up an reproducibility archive.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Project Structure</span>"
    ]
  },
  {
    "objectID": "chapters/project-structure.html#examples",
    "href": "chapters/project-structure.html#examples",
    "title": "4  Project Structure",
    "section": "",
    "text": "The Turing WayHeidi SeiboldanalysistemplatesWORCS\n\n\n\n\n\nOutput\n\n├── LICENSE\n1├── README.md\n├── CODE_OF_CONDUCT.md &lt;- Guidelines for users and contributors of the project.\n├── CONTRIBUTING.md    &lt;- Information on how to contribute to the project.\n├── data\n│   ├── processed      &lt;- The final, canonical data sets for modeling.\n│   └── raw            &lt;- The original, immutable data dump.\n│\n├── docs               &lt;- A default Sphinx project; see sphinx-doc.org for details\n│\n├── models             &lt;- Trained and serialized models, model predictions, or model summaries\n│\n├── notebooks          &lt;- Jupyter notebooks. The naming convention is a number (for ordering),\n│                         the creator's initials, and a short `-` delimited description, e.g.\n│                         `1.0-jqp-initial-data-exploration`.\n│\n├── reports            &lt;- Generated analysis as HTML, PDF, LaTeX, etc.\n│   └── figures        &lt;- Generated graphics and figures to be used in reporting\n│\n├── project_management &lt;- Meeting notes and other project planning resources\n│\n├── src                &lt;- Source code for use in this project.\n│   │\n│   ├── data           &lt;- Scripts to download or generate data\n│   │   └── make_dataset.py\n│   │\n│   ├── models         &lt;- Scripts to train models and then use trained models to make\n│   │   │                 predictions\n│   │   ├── predict_model.py\n│   │   └── train_model.py\n│   │\n│   └── visualisation  &lt;- Scripts to create exploratory and results-oriented visualisations\n│       └── visualise.py\n└──\n\n\n\n1\n\nThe top-level README for users of this project.\n\n\n\n\nRepository Structure Template by The Turing Way. Used under the LICENSE CC-BY 4.0. Reused without any modifications.\n\n\n.\n├── README.md\n├── analysis            &lt;- all things data analysis\n│   └── src             &lt;- functions and other source files\n├── comm\n│   ├── internal_comm   &lt;- internal communication such as meeting notes\n│   └── journal_comm    &lt;- communication with the journal, e.g. peer review\n├── data\n│   ├── data_clean      &lt;- clean version of the data\n│   └── data_raw        &lt;- raw data (don't touch)\n├── dissemination\n│   ├── manuscripts\n│   ├── posters\n│   └── presentations\n├── documentation       &lt;- documentation, e.g. data management plan\n└── misc                &lt;- miscellaneous files that don't fit elsewhere\nResearch Project Template by Heidi Seibold. No license use specified. For source code, see here. Reused without modifications.\n\n\n|-- 01_Data\n|   |-- 01_Raw\n|   `-- 02_Clean\n|-- 02_Analysis\n|   |-- 01_Scripts\n|   |-- 02_Results\n|   |-- 03_Figures\n|   `-- 04_Tables\n|-- 03_Manuscript\n|   |-- 01_Text\n|   `-- 02_Final_figures\n|-- 04_Presentation\n|-- 05_Misc\n|-- 06_Analysis_for_publication &lt;-- optional\n|   |-- 01_Scripts              &lt;-- optional\n|   |-- 02_Results              &lt;-- optional\n|   |-- 03_Figures              &lt;-- optional\n|   `-- 04_Tables               &lt;-- optional\n|-- README.md\n|-- .gitignore                  &lt;-- optional\n|-- renv                        &lt;-- optional\nanalysis template packages by Jonas Hagenbeck. Used under the MIT License. Reused without any modifications.\n\n\n\n\n\nFile\nDescription\nUsage\n\n\n\n\n_pkgdown.yml\nYAML for package website\ndo not edit\n\n\nDESCRIPTION\nR-package DESCRIPTION\ndo not edit\n\n\nLICENSE.md\nProject license\ndo not edit\n\n\nNAMESPACE\nR-package namespace\nmachine-written\n\n\nREADME.md\nRead this file to get started!\ndo not edit\n\n\nREADME.Rmd\nR-markdown source for readme.md\nhuman editable\n\n\nworcs.Rproj\nRStudio project file\ndo not edit\n\n\ndocs/\nPackage website\nmachine-written\n\n\ninst/\nRStudio project template files\nhuman editable\n\n\nman/\nR-package documentation\ndo not edit\n\n\npaper/\nWORCS paper source files\nhuman editable\n\n\nR/\nR-package source code\nhuman editable\n\n\nvignettes/\nR-package vignettes\nhuman editable\n\n\n\nWORCS project structure by Van Lissa et al. (2021). Used under the GNU General Public License. No changes were made.\n\n\n\n\n\n\n\n\n\nExercise: Take on different perspectives\n\n\n\nPause for a moment after investigating the different project structures. Take the perspective of a researcher that is currently working in this project structure. How would you feel working with this structure? What helps you, hinders you to work productively and reproducible? Then change your perspective. Imagine you are a researcher aiming to reproduce the results of a different research project that uses such project structures. What would you need to reproduce analysis and results?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Project Structure</span>"
    ]
  },
  {
    "objectID": "chapters/project-structure.html#basic-standards-for-research-projects",
    "href": "chapters/project-structure.html#basic-standards-for-research-projects",
    "title": "4  Project Structure",
    "section": "4.2 Basic standards for research projects",
    "text": "4.2 Basic standards for research projects\nFirst of all, these basic standards are highly subjective. As researchers in the discipline of psychology, our experience comes from psychological research projects. Researchers from other disciplines might need to configure the project structure elements. In psychology research, we assess these standards as highly useful:\n\nHuman and machine-readable files\nREADME.md-file\nSeparation of data and code\nrenv-folder\nmisc-folder\n\nApart from these standards, it is always useful to look for already existing standards in your research discipline. Researchers working with fMRI data will find the convention of Brain Images Data Structures (BIDS). BIDS is a standard that aims to foster a simple and easy way of organizing neuroimaging and behavioural data. Inspired by BIDS, psych-DS started in 2018 to aiming to provide a systematic way of formatting and documenting scientific datasets. However, content creation by psych-DS has been low. If you want to contribute to the project, take a look at their  Github repository.\n\n4.2.1 Human and machine-readable files\nAs displayed in the chapter Naming things, human and machine-readable names for files and folders are relatively easy to modify, when starting a project. As your project grows, you will be thankful for good file and folder names. Since, we dedicated a whole chapter to this topic, we move on to the next basic standard of a project structure.\n\n\n4.2.2 README.md-file\nA README is a text file that provides basic information about a project. It is typically a Markdown (.md) file, which means you can use Markdown syntax in it. Markdown allows you to easily format text, create lists, include links, and embed images. The exact content depends on your repository, but some general things that you might want to include are:\n\nProject description: What function does this repository serve and what are it’s key features?\nInstallation instructions (if applicable): Explain how to install and set up your project, including any dependencies or prerequisites. This is particularly relevant for repositories that contain programming code. Provide clear instructions to help users or contributors get started with your project quickly.\nProject structure: Explain your project structure. Use one sentence to describe each file and folder. Examples are displayed above.\nUsage (if applicable): Provide examples or code snippets demonstrating how to use your project.\nContributing: If you welcome contributions, specify how others can contribute to your project. Here, you can also include guidelines for submitting bug reports, feature requests, or pull requests.\n\n\n\n\n\n\n\nAdding a CONTRIBUTING.md file to a repository\n\n\n\n\n\nFor larger or more complex projects where contributions may involve setting up a specific development environment or adhering to specific workflows, it is standard practice to create a file called CONTRIBUTING.md. GitHub recognizes the presence of a CONTRIBUTING.md file in a repository and, for example, automatically includes a link to the CONTRIBUTING.md file when users open a new issue or pull request.\n\n\n\n\nAcknowledgments: Give credit to any third-party libraries, tools, or individuals that contributed to your project.\nLicense: Choose a license that aligns with your project’s goals. You can use choosealicense.com for guidance. The chosen license influences contributions to your project. Researchers are often insecure about which license to use. We will there cover the topic license in a separate chapter.\n\n\n\n\n\n\n\nFind out more: View the README.md file of this project.\n\n\n\n\n\n5 The Repro Book\n    \n\n5.1 Description\nWelcome to the Repro Book, an open-source online learning resource on reproducible research. The main goal of the Repro Book is to provide a companion online course text book for courses on reproducible research.\n\n\n5.2 Repository Structure\n\n5.2.1 Folders\n.github/workflows is a folder that contains GitHub Actions workflows. Currently, two automatic workflows run automatically. This folder can be ignored by users who want to contribute to the book.\n_extensions is a folder that contains Quarto extensions. Currently, this book only uses the fontawesome-extension to create icons like this: . This folder can be ignored by users who want to contribute to the book.\nchapters is the heart of the book. The chapters folder contains all main chapters of the book. The content of each chapter is stored in its own .qmd file. If you want to contribute with content and modify chapters or create new ones, this is main the place where your adjustments take place.\nimages is a folder that does not contain images (yet). The images displayed in this book are stored in a NextCloud folder. If you want to contribute images to this book, please upload them to the NextCloud folder. For an explanation of how to use the images from NextCloud, see contributing.qmd.\nrenv is a folder that contains information about the R packages used in this book. If your contributions include the utility of an additional R package, see contributing.qmd for how to modify the relevant files.\n\n\n5.2.2 Files\n.Renviron is a file used in R that allows users to define environment variables.\n.Rprofile is a file used in R that allows users to customize their R sessions by specifying code that should be executed every time R starts.\n.all-contributorsrc is a file where the contributors of this project are listed. When you want to start working on this book, you will be included in this document. Content contribution is not affected by this file.\n.codespellrc is a file connected to a an automated codespell check at GitHub. Content contribution is not affected by this file.\n.gitignore is a file that specifies files and folders that should be ignored and not tracked by Git. It prevents certain files or directories that are not essential for the project or generated during the development process from being included in the version history. For more information about .gitignore, check out this link.\nLICENSE is a file where you can see what others are and are not allowed to do with this project.\nMakefile is a special text file that contains rules and instructions for automating the execution of software programs.\nREADME.md is the file you are currently reading. It provides basic information about a project and a description of a repository.\n_affiliations.yml is a metadata-file that contains information about the affiliations the contributors work at. If you contribute to this project and are affiliated to a different institution than University of Hamburg, you can extend the file for your institution.\n_authors.yml is a metadata-file that contains information about the authors of this project. If you contribute to this project as an author, you can extend the file for your information.\n_custom.scss is a used to customize the styling of Quarto documents by writing our own CSS (Cascading Style Sheets) rules.\n_quarto.yml is a metadata-file that configures the project settings. For example, it configures the book title and subtitle and how the book chapters are arranged. If you contribute to this project with a new chapter, you have to add the location of the chapter in a meaningful way to the chapters-section in the _quarto.yml-file.\n_quarto-pdf.yml is also a metadata-file that configures the project settings but only when we export the book to PDF.\n_variables.yml is a metadata-file that specifies variables in a project. It is possible to use the variables in the files that constitute the chapters or similar.\nacknowledgements.qmd is a closing book chapter where we describe which different tools we use for what.\ncontents.qmd is an opening book chapter where we describe what you can expect in each chapter.\nindex.qmd is a file that contains the content of the first site of the repro book. It serves as the cover of the book.\nplausible.html is used to integrate Plausible Analytics, a privacy-focused web analytics tool. This file serves as a way to include the necessary HTML code to track website or document usage without compromising user privacy.\nreferences.bib is a file that contains information about all the references we use in our book. It is written using BibTex. If you contribute to this book and add new references, please make sure that these references are stored in this file.\nreferences.qmd is a closing chapter that lists all the mentioned references. It is automatically generated from the references.bib-file.\nrenv.lock is a file that saves R packages and their versions used in this book. If you contribute to this book and need additional R packages, please make sure that these packages are stored in this file.\nrepro-book.Rproj is a project file used by RStudio, an integrated development environment for R. It serves as a container for all files and settings related to a specific R project.\nsummary.qmd is a closing chapter of the book. It summarizes the most important insights.\n\n\n\n5.3 License\nCreative Commons Attribution 4.0 International (CC BY 4.0)\nFor details, see the LICENSE file.\n\n\n5.4 Contributors\n\n\n\n\n\n\n\nLennart Wittkuhn🐛 💻 🖋 📖 🎨 💵 🔍 🤔 🚇 🚧 🧑‍🏫 📆 📣 💬 🔬 👀 🛡️ 📢\n\n\nJustus Johannes Reihs🐛 💻 🤔 🚧 🔬 👀 🖋 📖\n\n\n\n\n\n\n\n\n\n\n\nA README.md-file can include a lot of content. When writing your README, consider your perspective as on-working researcher and other researchers that might want to reproduce parts of your project results.\n\n\n5.4.1 Separation of data and code\nAs seen in the Examples, many researchers separate data and code in different folders. It is also recommended to separate raw and clean (or tidy) data. When conducting experiments in psychology, raw data usually do not come in a way that lets you start analysing the data. Most (if not all) of the time, you need to configure the data. These configurations should be based on code (rather than clicking in a graphical user interface). The code that makes the raw data clean, should be included in the code folder of your project. In R, a popular method for data cleaning is the use of the tidyverse, which we will cover in the chapter about good coding practices.\n\n\n5.4.2 renv folder\nA renv folder helps you to create reproducible environments for your r projects. renv saves and lists all your R-packages used in your project. That means you have for each project an own project library in R. When you are working in R to run your data analyses, you can create the renv-folder directly. However, the use of renv is not intuitive, so we will cover the topic in another separate chapter.\n\n\n5.4.3 misc-folder\nThe abbreviation misc stands for miscellaneous. This folder is particularly useful for files that do not fit into one of your other folders. It saves you from having a chaotic project folder when entering your project.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Project Structure</span>"
    ]
  },
  {
    "objectID": "chapters/project-structure.html#description",
    "href": "chapters/project-structure.html#description",
    "title": "4  Project Structure",
    "section": "5.1 Description",
    "text": "5.1 Description\nWelcome to the Repro Book, an open-source online learning resource on reproducible research. The main goal of the Repro Book is to provide a companion online course text book for courses on reproducible research.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Project Structure</span>"
    ]
  },
  {
    "objectID": "chapters/project-structure.html#repository-structure",
    "href": "chapters/project-structure.html#repository-structure",
    "title": "4  Project Structure",
    "section": "5.2 Repository Structure",
    "text": "5.2 Repository Structure\n\n5.2.1 Folders\n.github/workflows is a folder that contains GitHub Actions workflows. Currently, two automatic workflows run automatically. This folder can be ignored by users who want to contribute to the book.\n_extensions is a folder that contains Quarto extensions. Currently, this book only uses the fontawesome-extension to create icons like this: . This folder can be ignored by users who want to contribute to the book.\nchapters is the heart of the book. The chapters folder contains all main chapters of the book. The content of each chapter is stored in its own .qmd file. If you want to contribute with content and modify chapters or create new ones, this is main the place where your adjustments take place.\nimages is a folder that does not contain images (yet). The images displayed in this book are stored in a NextCloud folder. If you want to contribute images to this book, please upload them to the NextCloud folder. For an explanation of how to use the images from NextCloud, see contributing.qmd.\nrenv is a folder that contains information about the R packages used in this book. If your contributions include the utility of an additional R package, see contributing.qmd for how to modify the relevant files.\n\n\n5.2.2 Files\n.Renviron is a file used in R that allows users to define environment variables.\n.Rprofile is a file used in R that allows users to customize their R sessions by specifying code that should be executed every time R starts.\n.all-contributorsrc is a file where the contributors of this project are listed. When you want to start working on this book, you will be included in this document. Content contribution is not affected by this file.\n.codespellrc is a file connected to a an automated codespell check at GitHub. Content contribution is not affected by this file.\n.gitignore is a file that specifies files and folders that should be ignored and not tracked by Git. It prevents certain files or directories that are not essential for the project or generated during the development process from being included in the version history. For more information about .gitignore, check out this link.\nLICENSE is a file where you can see what others are and are not allowed to do with this project.\nMakefile is a special text file that contains rules and instructions for automating the execution of software programs.\nREADME.md is the file you are currently reading. It provides basic information about a project and a description of a repository.\n_affiliations.yml is a metadata-file that contains information about the affiliations the contributors work at. If you contribute to this project and are affiliated to a different institution than University of Hamburg, you can extend the file for your institution.\n_authors.yml is a metadata-file that contains information about the authors of this project. If you contribute to this project as an author, you can extend the file for your information.\n_custom.scss is a used to customize the styling of Quarto documents by writing our own CSS (Cascading Style Sheets) rules.\n_quarto.yml is a metadata-file that configures the project settings. For example, it configures the book title and subtitle and how the book chapters are arranged. If you contribute to this project with a new chapter, you have to add the location of the chapter in a meaningful way to the chapters-section in the _quarto.yml-file.\n_quarto-pdf.yml is also a metadata-file that configures the project settings but only when we export the book to PDF.\n_variables.yml is a metadata-file that specifies variables in a project. It is possible to use the variables in the files that constitute the chapters or similar.\nacknowledgements.qmd is a closing book chapter where we describe which different tools we use for what.\ncontents.qmd is an opening book chapter where we describe what you can expect in each chapter.\nindex.qmd is a file that contains the content of the first site of the repro book. It serves as the cover of the book.\nplausible.html is used to integrate Plausible Analytics, a privacy-focused web analytics tool. This file serves as a way to include the necessary HTML code to track website or document usage without compromising user privacy.\nreferences.bib is a file that contains information about all the references we use in our book. It is written using BibTex. If you contribute to this book and add new references, please make sure that these references are stored in this file.\nreferences.qmd is a closing chapter that lists all the mentioned references. It is automatically generated from the references.bib-file.\nrenv.lock is a file that saves R packages and their versions used in this book. If you contribute to this book and need additional R packages, please make sure that these packages are stored in this file.\nrepro-book.Rproj is a project file used by RStudio, an integrated development environment for R. It serves as a container for all files and settings related to a specific R project.\nsummary.qmd is a closing chapter of the book. It summarizes the most important insights.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Project Structure</span>"
    ]
  },
  {
    "objectID": "chapters/project-structure.html#license",
    "href": "chapters/project-structure.html#license",
    "title": "4  Project Structure",
    "section": "5.3 License",
    "text": "5.3 License\nCreative Commons Attribution 4.0 International (CC BY 4.0)\nFor details, see the LICENSE file.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Project Structure</span>"
    ]
  },
  {
    "objectID": "chapters/project-structure.html#contributors",
    "href": "chapters/project-structure.html#contributors",
    "title": "4  Project Structure",
    "section": "5.4 Contributors",
    "text": "5.4 Contributors\n\n\n\n\n\n\n\nLennart Wittkuhn🐛 💻 🖋 📖 🎨 💵 🔍 🤔 🚇 🚧 🧑‍🏫 📆 📣 💬 🔬 👀 🛡️ 📢\n\n\nJustus Johannes Reihs🐛 💻 🤔 🚧 🔬 👀 🖋 📖",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Project Structure</span>"
    ]
  },
  {
    "objectID": "chapters/project-structure.html#structure-of-reproducibility-archives",
    "href": "chapters/project-structure.html#structure-of-reproducibility-archives",
    "title": "4  Project Structure",
    "section": "5.5 Structure of reproducibility archives",
    "text": "5.5 Structure of reproducibility archives\n\nIn the first subsections of the chapter, you have learned how to set up your own project structure. The structure is flexible to different occasions, e.g. working collaboratively with other team members, working at your own research project during your studies at university. Nevertheless, you have not learned what is actually required by journals when you need or want to make your data and code publicly available. To cover this topic, we will go into the details of open science requirements of a couple of journals.\n\n5.5.1 Requirements of Journals\nThe TOP Guidelines by the Center of Open Science are a best practice formulation by journals, funders, and societies to implement better and more transparent research. The TOP Factor is a metric that reports the steps that a journal is taking to implement open science practices. Below you can see the TOP Factor evaluation of two psychological journals.\n\n\n\n\n\n\nLearn more: What is the TOP-Factor?\n\n\n\n\n\nThe TOP-FACTOR is a metric that assesses the open science policies of papers. It considers different dimensions, such as data transparency and materials transparency. In each dimension, a journal can achieve zero to three points. A journal receives zero points in a dimension, when it is not implemented in the open science policy. It receives three points in a dimension, when reproducibility of data and materials is not only required but also positively tested. The sum score over all dimensions constitutes the TOP Factor. The criteria for the scoring system is listed below:\n\n\n\n\n\n\n\n\n\n\n\nNOT IMPLEMENTED\nLEVEL I\nLEVEL II\nLEVEL III\n\n\n\n\nData Citation\nNo mention of data citation.\nJournal describes citation of data in guidelines to authors with clear rules and examples.\nArticle provides appropriate citation for data and materials used consistent with journal’s author guidelines.\nArticle is not published until providing appropriate citation for data and materials following journal’s author guidelines.\n\n\nData Transparency\nJournal encourages data sharing, or says nothing.\nArticle states whether data are available, and, if so, where to access them.\nData must be posted to a trusted repository. Exceptions must be identified at article submission.\nData must be posted to a trusted repository, and reported analyses will be reproduced independently prior to publication.\n\n\nAnalysis Code Transparency\nJournal encourages code sharing, or says nothing.\nArticle states whether code is available, and, if so, where to access it.\nCode must be posted to a trusted repository. Exceptions must be identified at article submission.\nCode must be posted to a trusted repository, and reported analyses will be reproduced independently prior to publication.\n\n\nMaterials Transparency\nJournal encourages materials sharing, or says nothing.\nArticle states whether materials are available, and, if so, where to access them.\nMaterials must be posted to a trusted repository. Exceptions must be identified at article submission.\nMaterials must be posted to a trusted repository, and reported analyses will be reproduced independently prior to publication.\n\n\nDesign & Analysis Reporting Guidelines\nJournal encourages design and analysis transparency, or says nothing.\nJournal articulates design transparency standards.\nJournal requires adherence to design transparency standards for review and publication.\nJournal requires and enforces adherence to design transparency standards for review and publication.\n\n\nStudy Preregistration\nJournal says nothing.\nArticle states whether preregistration of study exists, and, if so, where to access it.\nArticle states whether preregistration of study exists, and, if so, allows journal access during peer review for verification.\nJournal requires preregistration of studies and provides link and badge in article to meeting requirements.\n\n\nAnalysis Plan Preregistration\nJournal says nothing.\nArticle states whether preregistration of study exists, and, if so, where to access it.\nArticle states whether preregistration with analysis plan exists, and, if so, allows journal access during peer review for verification.\nJournal requires preregistration of studies with analysis plans and provides link and badge in article to meeting requirements.\n\n\nReplication\nJournal discourages submission of replication studies, or says nothing.\nJournal encourages submission of replication studies.\nJournal encourages submission of replication studies and conducts results blind review.\nJournal uses Registered Reports as a submission option for replication studies with peer review prior to observing the study outcomes.\n\n\n\nTOP Guidelines Summary Table. License: CC BY 4.0. Used without any modifications.\n\n\n\n\nFrontiersAMPPS\n\n\nTOP-Factor assessment of Frontiers in Psychology\n\n\n\n\n\n\n\n\n\nGUIDELINE\nLEVEL\nSUMMARY\nJUSTIFICATION\n\n\n\n\nTotal\n13\n\n\n\n\nData Citation\n1\nJournal describes citation of data in guidelines to authors with clear rules and examples.\n“Authors are encouraged to cite all datasets generated or analyzed in the study.” Includes example.\n\n\nData Transparency\n2\nData must be posted to a trusted repository. Exceptions must be identified at article submission.\n“Frontiers is committed to open science and open data; we require that authors make available all data relevant to the conclusions of the manuscript.”\n\n\nAnalysis Code Transparency\n2\nCode must be posted to a trusted repository. Exceptions must be identified at article submission.\n“Frontiers is committed to open science and open data; we require that authors make available all code used to conduct their research available to other researchers.”\n\n\nMaterials Transparency\n2\nMaterials must be posted to a trusted repository. Exceptions must be identified at article submission.\n“Authors are required to make all materials used to conduct their research available to other researchers.”\n\n\nDesign & Analysis Reporting Guidelines\n0\nJournal encourages design and analysis transparency, or says nothing.\nNo mention.\n\n\nStudy Preregistration\n0\nJournal says nothing.\nNo mention.\n\n\nAnalysis Plan Preregistration\n0\nJournal says nothing.\nNo mention.\n\n\nReplication\n3\nJournal uses Registered Reports as a submission option for replication studies with peer review prior to observing the study outcomes.\nJournal accepts Registered Reports.\n\n\nRegistered Reports & Publication Bias\n3\n\nJournal accepts Registered Reports.\n\n\nOpen Science Badges\n0\n\nNo mention.\n\n\n\nOpen access policy of Frontiers in Psychology summarised by TOP Factor. License: CC BY 4.0. Used without any modifications.\n\n\nTOP-Factor assessment of Advances in Methods and Practices in Psychological Science\n\n\n\n\n\n\n\n\n\nGUIDELINE\nLEVEL\nSUMMARY\nJUSTIFICATION\n\n\n\n\nTotal\n25\n\n\n\n\nData Citation\n2\nArticle provides appropriate citation for data and materials used consistent with journal’s author guidelines.\nJournal requires data citation.\n\n\nData Transparency\n2\nData must be posted to a trusted repository. Exceptions must be identified at article submission.\nJournal requires data sharing.\n\n\nAnalysis Code Transparency\n2\nCode must be posted to a trusted repository. Exceptions must be identified at article submission.\nJournal requires code sharing.\n\n\nMaterials Transparency\n2\nMaterials must be posted to a trusted repository. Exceptions must be identified at article submission.\nJournal requires materials sharing.\n\n\nDesign & Analysis Reporting Guidelines\n3\nJournal requires and enforces adherence to design transparency standards for review and publication.\nAdherence to reporting guidelines is enforced.\n\n\nStudy Preregistration\n3\nJournal requires preregistration of studies and provides link and badge in article to meeting requirements.\nPreregistration is required.\n\n\nAnalysis Plan Preregistration\n3\nJournal requires preregistration of studies with analysis plans and provides link and badge in article to meeting requirements.\nAnalysis plan preregistration is required.\n\n\nReplication\n3\nJournal uses Registered Reports as a submission option for replication studies with peer review prior to observing the study outcomes.\nJournal accepts Registered Reports for replication studies.\n\n\nRegistered Reports & Publication Bias\n3\n\nJournal accepts Registered Reports for novel studies.\n\n\nOpen Science Badges\n2\n\nJournal offers all Open Science Badges.\n\n\n\n\n\n\nAs you can see, journals do include requirements of public data and code for publishing articles. However, the specification of how to do that is scarce. Standards for research projects as stated above are missing. We further look at some examples of the application of open data and code policies in published articles.\n\n\n5.5.2 Current application of open science practices\n\nFrontiersAMPPS\n\n\nBelow, you can find the structure of the reproducibility archive of a paper from Laulié, Briceño-Jiménez, and Henríquez-Gomez (2023). The paper is placed in work and organizational psychology and postulates a relationship between the fulfillment of (implicit) expectation between employees and employers and the intention to leave the company for another job. The authors further assume that this relationship is mediated by emotional exhaustion and investigate whether emotional intelligence moderates the mediation effect of emotional exhaustion.\n\n\n\nOutput\n\n├── fpsyg-14-1090094.pdf                \n├── Materials - DataBase.xlsx           \n├── Materials - Informed Consent.pdf    \n├── Materials - Instruments.pdf         \n\n\nHere, you can find the link to the archive of the paper: Reproducibility Archive\n\n\nBelow you can find the structure of an archive of a paper from Nuijten and Wicherts (2024). The paper is placed in the methodological area of psychological science. The authors investigated whether inconsistencies in reporting statistical results could be reduced by implementing a software tool called statcheck.\n\n\n\n\n\n\nStructure of the Repro Archive from Nuijten and Wicherts (2024)\n\n\n\n\n\nFile descriptions\nThe file descriptions below are organized in the same way as the components and folders on the OSF page at https://osf.io/q84jn/.\n\n02 Preregistration\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\n221130preregistration_effectivitystatcheck.pdf\nPreregistration of the project\nMN, JW\n\n\n\n\nPower analysis\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\n00extract_dates.R\nHelper function with regexes to extract dates\nMN\n\n\n00extract_pattern.R\nHelper function to extract a pattern from text\nMN\n\n\n00html_to_txt.R\nHelper function to convert html files to plain txt\nMN\n\n\n00scrape_html_dir.R\nHelper function that allows scraping a directory of html files\nMN\n\n\n01scrape_articles.R\nFunction to run statcheck & scrape additional meta-data from articles\nMN\n\n\n02data_wrangling.R\nFunction to clean & reorder raw data\nMN\n\n\n2022-11-23scraped_articles.txt\nRaw, scraped data from articles\nMN\n\n\n2022-11-28data_per_article.txt\nData organized at article level\nMN\n\n\n2022-11-28data_wrangled.txt\nData with additional variables and missing values removed\nMN\n\n\npower_analysis.R\nR script to run power simulation\nMN\n\n\npowerplot_estimated.png\nGraph of power estimates per b3 value\nMN\n\n\n\n\n\n\n03 Data\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\n00extract_dates_v2.R\nHelper function with regexes to extract dates\nMN\n\n\n00extract_pattern.R\nHelper function to extract a pattern from text\nMN\n\n\n00html_to_txt_v2.R\nHelper function to convert html files to plain txt\nMN\n\n\n00scrape_html_dir.R\nHelper function that allows scraping a directory of html files\nMN\n\n\n01scrape_articles_v3.R\nFunction to run statcheck & scrape additional meta-data from articles\nMN\n\n\n02data_wrangling_v3.R\nFunction to clean & reorder raw data\nMN\n\n\n2024-04-15scraped_articles_v3.txt\nRaw statcheck data\nMN\n\n\n2024-04-15data_per_article_with_missings.txt\nData organized per article, including articles without NHST results\nMN\n\n\n2024-04-15data_per_article_with_stats.txt\nData organized per article, only including articles with NHST results\nMN\n\n\n2024-04-15data_wrangled_no_missings.txt\nClean data organized per NHST result, only including articles with NHST results\nMN\n\n\n2024-04-15data_wrangled_with_missings.txt\nClean data organized per NHST result, also including articles without NHST results (in these cases, only article level info is in the data frame)\nMN\n\n\nmissing_htmls_jepg.docx/-.pdf\nList of articles from JEPG with missing html file\nMN\n\n\ncodebook.xlsx\nCodebook explaining the variables in the main data files\nMN\n\n\n\n\n\n04 Analysis\n\n01 Descriptives\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\ndescriptives_V3.R\nMain analysis file to create descriptive statistics, figures, and tables\nMN\n\n\nfig1_violin_plots.png\nFigure 1\nMN\n\n\nfig2_line_graph_means.png\nFigure 2\nMN\n\n\ntable2.txt\nRaw data from Table 2\nMN\n\n\ntable3.txt\nRaw data from Table 3\nMN\n\n\n\n\n\n02 Confirmatory\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\nconfirmatory_analyses_v3.R\nMain analysis script for confirmatory analyses\nMN\n\n\nillustration_logits_odds_probs.xlsx\nToy example to convert obtained regression coefficients from logits to probabilities\nMN\n\n\nlm_dec_errors.rda\nR data object with output of the multilevel logistic model estimating the probability of a decision error\nMN\n\n\nlm_errors.rda\nR data object with output of the multilevel logistic model estimating the probability of an error\nMN\n\n\n\n\n\n03 Exploratory\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\nbayes_factors.R\nCalculating Bayes factors and posterior probabilities\nMN\n\n\nfig3_perc_articles_errors_over_time.png\nFigure 3\nMN\n\n\nseparate_journal_pairs.R\nFit regression models for journal pairs separately\nMN\n\n\ntrends_over_time.R\nCalculate and visualize trends over time\nMN\n\n\n\n\n\n\nrenv\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\nrenv (folder), .Rprofile, renv.lock\nFiles for syncing the same R package versions used in the data analysis\nMN\n\n\n\n\n\n\n\nHere you can fend the link to archive of the paper: Reproducibility Archive\n\n\n\n\n\n\n\n\n\nExercise: Study reproducibility archives\n\n\n\nInvestigate the reproducibility archives above and think about how these archives could help you to reproduce the analysis conducted in their papers. What is helpful and what is not?\n\n\n\n\n\n\n\n\nPostscript\n\n\n\nThe examples from Laulié, Briceño-Jiménez, and Henríquez-Gomez (2023) and Nuijten and Wicherts (2024) do not have the intention to discredit researchers. Rather, the paper were chosen from the respective journal websites on a random basis.\n\n\nAgain, it should be noted that there is no perfectly organized reproducibility archive. However, we hope that the displayed examples show that open science, open data and reproducibility can be applied in many different ways.\n\n\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nLaulié, Lyonel, Gabriel Briceño-Jiménez, and Gisselle Henríquez-Gomez. 2023. “Exploring Self-Regulation Theory as a Mechanism of the Effects of Psychological Contract Fulfillment: The Role of Emotional Intelligence.” Frontiers in Psychology 14. https://doi.org/10.3389/fpsyg.2023.1090094.\n\n\nNuijten, Michèle B., and Jelte M. Wicherts. 2024. “Implementing Statcheck During Peer Review Is Related to a Steep Decline in Statistical-Reporting Inconsistencies.” Advances in Methods and Practices in Psychological Science 7. https://doi.org/10.1177/25152459241258945.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Project Structure</span>"
    ]
  },
  {
    "objectID": "chapters/project-structure.html#file-descriptions",
    "href": "chapters/project-structure.html#file-descriptions",
    "title": "4  Project Structure",
    "section": "File descriptions",
    "text": "File descriptions\nThe file descriptions below are organized in the same way as the components and folders on the OSF page at https://osf.io/q84jn/.\n\n02 Preregistration\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\n221130preregistration_effectivitystatcheck.pdf\nPreregistration of the project\nMN, JW\n\n\n\n\nPower analysis\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\n00extract_dates.R\nHelper function with regexes to extract dates\nMN\n\n\n00extract_pattern.R\nHelper function to extract a pattern from text\nMN\n\n\n00html_to_txt.R\nHelper function to convert html files to plain txt\nMN\n\n\n00scrape_html_dir.R\nHelper function that allows scraping a directory of html files\nMN\n\n\n01scrape_articles.R\nFunction to run statcheck & scrape additional meta-data from articles\nMN\n\n\n02data_wrangling.R\nFunction to clean & reorder raw data\nMN\n\n\n2022-11-23scraped_articles.txt\nRaw, scraped data from articles\nMN\n\n\n2022-11-28data_per_article.txt\nData organized at article level\nMN\n\n\n2022-11-28data_wrangled.txt\nData with additional variables and missing values removed\nMN\n\n\npower_analysis.R\nR script to run power simulation\nMN\n\n\npowerplot_estimated.png\nGraph of power estimates per b3 value\nMN\n\n\n\n\n\n\n03 Data\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\n00extract_dates_v2.R\nHelper function with regexes to extract dates\nMN\n\n\n00extract_pattern.R\nHelper function to extract a pattern from text\nMN\n\n\n00html_to_txt_v2.R\nHelper function to convert html files to plain txt\nMN\n\n\n00scrape_html_dir.R\nHelper function that allows scraping a directory of html files\nMN\n\n\n01scrape_articles_v3.R\nFunction to run statcheck & scrape additional meta-data from articles\nMN\n\n\n02data_wrangling_v3.R\nFunction to clean & reorder raw data\nMN\n\n\n2024-04-15scraped_articles_v3.txt\nRaw statcheck data\nMN\n\n\n2024-04-15data_per_article_with_missings.txt\nData organized per article, including articles without NHST results\nMN\n\n\n2024-04-15data_per_article_with_stats.txt\nData organized per article, only including articles with NHST results\nMN\n\n\n2024-04-15data_wrangled_no_missings.txt\nClean data organized per NHST result, only including articles with NHST results\nMN\n\n\n2024-04-15data_wrangled_with_missings.txt\nClean data organized per NHST result, also including articles without NHST results (in these cases, only article level info is in the data frame)\nMN\n\n\nmissing_htmls_jepg.docx/-.pdf\nList of articles from JEPG with missing html file\nMN\n\n\ncodebook.xlsx\nCodebook explaining the variables in the main data files\nMN\n\n\n\n\n\n04 Analysis\n\n01 Descriptives\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\ndescriptives_V3.R\nMain analysis file to create descriptive statistics, figures, and tables\nMN\n\n\nfig1_violin_plots.png\nFigure 1\nMN\n\n\nfig2_line_graph_means.png\nFigure 2\nMN\n\n\ntable2.txt\nRaw data from Table 2\nMN\n\n\ntable3.txt\nRaw data from Table 3\nMN\n\n\n\n\n\n02 Confirmatory\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\nconfirmatory_analyses_v3.R\nMain analysis script for confirmatory analyses\nMN\n\n\nillustration_logits_odds_probs.xlsx\nToy example to convert obtained regression coefficients from logits to probabilities\nMN\n\n\nlm_dec_errors.rda\nR data object with output of the multilevel logistic model estimating the probability of a decision error\nMN\n\n\nlm_errors.rda\nR data object with output of the multilevel logistic model estimating the probability of an error\nMN\n\n\n\n\n\n03 Exploratory\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\nbayes_factors.R\nCalculating Bayes factors and posterior probabilities\nMN\n\n\nfig3_perc_articles_errors_over_time.png\nFigure 3\nMN\n\n\nseparate_journal_pairs.R\nFit regression models for journal pairs separately\nMN\n\n\ntrends_over_time.R\nCalculate and visualize trends over time\nMN\n\n\n\n\n\n\nrenv\n\n\n\n\n\n\n\n\nFile Name\nDescription\nCreated By\n\n\n\n\nrenv (folder), .Rprofile, renv.lock\nFiles for syncing the same R package versions used in the data analysis\nMN",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Project Structure</span>"
    ]
  },
  {
    "objectID": "chapters/rdm.html",
    "href": "chapters/rdm.html",
    "title": "5  Research Data Management",
    "section": "",
    "text": "5.1 Introduction\nAs the introductory sections highlighted, research data management (also referred to as RDM) is very important for increasing the reproducibility of your research. We follow the definition of The Turing Way for RDM:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Research Data Management</span>"
    ]
  },
  {
    "objectID": "chapters/rdm.html#introduction",
    "href": "chapters/rdm.html#introduction",
    "title": "5  Research Data Management",
    "section": "",
    "text": "Video 5.1: “Data Sharing and Management Snafu in 3 Short Acts”. The video by Hanson, Surkis, and Yacobucci (2019) from NYU Health Sciences Library features a cute animated panda researcher making a data sharing request to a bear researcher. It does not go well. The video aims to communicate some of the common and avoidable pitfalls of research data management in a light-hearted format. Topics include storage, documentation, and file formats. The video was produced using a tool called Xtranormal (now “nawmal”) and the characters are strangely expressive while talking in robotic text-to-speech voices with a limited range of movement. It was created and uploaded to YouTube by librarians at NYU School of Medicine in 2012 to be used for research data management education and has been included in numerous research data management courses and presentations. License: Creative Commons Attribution 4.0 International (CC BY 4.0). Reused without modifications.\n\n\n\n\n\n\n\n\n\nThe story of Reinhart & Rogoff\n\n\n\nIn 2010, the US economists Reinhart and Rogoff presented a research paper called Growth in a Time of Debt at the annual meeting of the American Economic Association. They found that economic growth slows dramatically when a country’s debt size rises above 90% of Gross Domestic Product (Reinhart and Rogoff 2010). EU Commissioner Olli Rehn and US Republican Paul Ryan both quoted a 90% debt-to-GDP limit to support political austerity strategies.\nMeanwhile, a student at the University of Massachusetts, Thomas Herndon, received a class assignment to reproduce the results of a research article. Herndon chose the article by Reinhart and Rogoff (2010) and failed to reproduce their results repeatedly, even after supervision with his professor.\nSubsequently, Herndon requested the spreadsheet from the authors of Reinhart and Rogoff (2010). He then realized that the paper contained selective data selection, odd data averaging methods, and coding errors that led to substantial miscalculations (Herndon, Ash, and Pollin 2014).\nHerndon, Ash, and Pollin (2014) concluded that the results of Reinhart and Rogoff (2010) are much less dramatic than originally assumed. However, the basic tendency that economic growth slows down with higher debt still held true.\nWhat matters most about this story is that Reinhart and Rogoff were able to share their original spreadsheet and that the results were then reproducible. Thus, reproducibility can enhance the scientific, and in this example the political, discussion about research findings and their implications for society.\n\n\n\n\n\n\n\n\nTip 5.1: Excel exercise\n\n\n\n\nOpen an Excel Sheet\n\nSet the first column to date-format\n\nEnter the year 2010 into the cell A1\n\nIsn’t it spectacular that Excel rendered your entry as 2nd July 1905?\nThink about this phenomenon in your research context: What problems might arise when using Excel?\n\n\n\n\n\n\n\n\nMore problems when using Excel …\n\n\n\nAs the exercise above showed, Excel can automatically convert specific data entries. In many everyday cases, this seems to be useful, for example for autocompletion of dates. However, in a research context, such conversions hinder reproducibility efforts. Thus, we highly recommend using  and RStudio to read and analyze data.\nThe described phenomenon of Excel conversions is highly prevalent in the scientific research area of biogenetics. A meta-analysis found that roughly 20% of published genetic research was affected by Excel errors (Ziemann, Eren, and El-Osta 2016). Instead of changing Excel’s default options, this situation led to a change in scientific standards. The HUGO Gene Nomenclature Committee (HGNC) updated their guidelines on how to name genes. It was easier to rename genes than to update Excel!\n\n\n\n\n\n\nFigure 5.1: “Excel converting genes” by The Verge (License: ; reused without modifications)\n\n\n\n\n\n\n\n\n\n\n\nWhy is Excel still widely used?\n\n\n\nGiven the information above, you might wonder why many researchers still use Excel. One aspect at least is that is very intuitive to use. It comes with many integrated functions that can be easily applied to data. Compared to  it takes much less time to work with data in Excel. However, the most important aspect might be that it is incredibly easy to enter data in a spreadsheet. It takes much less time in Excel compared to R, to open a table and add data to it. Thus, for data entry, Excel is still a good choice (apart from the problems in Tip 5.1). Nevertheless, all computations should be done in R or a different software program where data changes and computations are saved in scripts (e.g. Python), because the computations in Excel are hard to reproduce.\n\n\n\n\nRDM covers how research data can be stored, described and reused\n(The Turing Way Community 2022, chapter on Research Data Management).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Research Data Management</span>"
    ]
  },
  {
    "objectID": "chapters/rdm.html#benefits-of-research-data-management",
    "href": "chapters/rdm.html#benefits-of-research-data-management",
    "title": "5  Research Data Management",
    "section": "5.2 Benefits of research data management",
    "text": "5.2 Benefits of research data management\nManaging data well throughout the research process is crucial for successful research outcomes, including:\n\nUpholding research integrity and reproducibility\nImproving research productivity\nEnsuring the accuracy, completeness, authenticity, and reliability of research data and records\nSaving time and resources in the future\nStrengthening data security and reducing the likelihood of data loss\nAvoiding redundant work by facilitating data sharing\nMeeting the grant requirements of funding bodies\nAdhering to industry and commerce practices.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Research Data Management</span>"
    ]
  },
  {
    "objectID": "chapters/rdm.html#sec-modularity",
    "href": "chapters/rdm.html#sec-modularity",
    "title": "5  Research Data Management",
    "section": "5.3 Modularity of research data",
    "text": "5.3 Modularity of research data\nIn the previous sections of this chapter, you have seen pitfalls for reproducibility when not thinking about RDM. Further, you now know advantages of RDM. In this section, you will get to know the concept of modularity, that has been widely used in research that is meant to be reproducible.\nWhat we expect the data to look like …\n\n\n\n\n\n\n\n\n\nFigure 5.2: “Research Data Management explained with pasta: Source data” by Remi Gau (License: CC BY 4.0; reused without modifications)\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.3: “Raw data (Research Data Management explained with Pasta)” by Remi Gau (License: CC BY 4.0; reused without modifications)\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.4: “Derivative data (Research Data Management explained with Pasta)” by Remi Gau (License: CC BY 4.0; reused without modifications)\n\n\n\n\n\n\nWhat the dataset actually looks like …\n\n\n\n\n\n\n\n\n\nFigure 5.5: “Shared dataset (Research Data Management explained with Pasta)” by Remi Gau (License: CC BY 4.0; reused without modifications)\n\n\n\n\n\n\n\n\n\n\n\nFigure 5.6: “Shared dataset with a README (Research Data Management explained with Pasta)” by Remi Gau (License: CC BY 4.0; reused without modifications)\n\n\n\n\n\n\n\nIn software design, modularity refers to a logical partitioning of the “software design” that allows complex software to be manageable for the purpose of implementation and maintenance (Wikipedia Contributors 2025).\n\n\n\n\n\n\n\nTip\n\n\n\nEven though this section deals with modularity of data, the concept of modularity can also be applied to code.\n\n\nThe photo series displayed above shows how expectation and reality differ in terms of how well data is prepared. Reading a methods section of a published paper suggests a clear, tidy, and logic structure of the data and the respective analyses. When diving into the actual datasets, many things seem messy. Then, also a README will not help. Thus, it makes sense to have research data management from the beginning on in mind.\n\n\n\n\n\n\nQuestions helping to manage research data\n\n\n\n\nHow should my data look like before data analyses?\nWhich analyses do I want to conduct? Do they have special requirements for data?\nWhat would I need to reproduce my analyses in 10 years?\n\n\n\nModularity is a widely used concept for research data management. When applying the concept of modularity, data is stored in different phases of the research process, e.g. source data, raw data, and derivative data. Source data is typically the data as you get them. This can be the output of a software program (e.g. LimeSurvey or Unipark), pen-and-paper questionnaires, etc. Raw data is typically the digital form of the source data. When your data is originally collected via pen-and-paper-questionnaires, somehow the data must be transferred to a digital format. When the data is collected directly via software programs, source data and raw data remain the same. Derivative data is typically the data as you report them in a paper or a poster. This contains descriptive and inferential statistics, tables, and figures. Often, derivative data is stored in a results folder of a research project.\n\n\n\n\n\n\nNote\n\n\n\nThe terms of source, raw, tidy, and derivative data are not absolute. They rather reflect a personal understanding of the authors. It makes sense to talk with your research team what you mean by which term. For other researchers, document what you mean by which term e.g. in a README.\n\n\n\n\n\n\n\n\nTidy data as additional modular data\n\n\n\nIn Section 7.5, we will introduce another data module, called tidy data. Tidy data reflect the data as you analyze them. Thus, separation between data preprocessing and data analyses is enforced.\n\n\nBenefits of modular data:\n\neasier understanding of different analysis steps\neasier extraction of data for the conduction of own analyses\n\nBurden of modular data:\n\nprobably need for a dependency file\nhigher risk for chaotic project structure\n\n\n\n\n\n\n\nWhat is a file-dependency file?\n\n\n\nA dependency file displays how different files are related to each other, e.g. which scripts depend on which other scripts or on which data files. A dependency file can determine whether a file needs to be reexecuted based on changes in its dependent files. This can be useful for humans and machines, if this reexecution should be done automatically.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Research Data Management</span>"
    ]
  },
  {
    "objectID": "chapters/rdm.html#fair-principles",
    "href": "chapters/rdm.html#fair-principles",
    "title": "5  Research Data Management",
    "section": "5.4 FAIR principles",
    "text": "5.4 FAIR principles\n\n\n\n\n\n\nFigure 5.7: “FAIR” by U.S. National Library of Medicine (License: Public Domain Mark 1.0 Universal (PDM 1.0); Any such works found on National Library of Medicine (NLM) Web sites may be freely used or reproduced without permission in the U.S.)\n\n\n\nWilkinson et al. (2016) published the FAIR principles for research data management. FAIR stands for Findable, Accessible, Interoperable, and Reusable. FAIR is a popular concept that has been adopted for various research properties, such as FAIR data and FAIR research software (Wilkinson et al. 2016; Barker et al. 2022).\nThe FAIR data principles were originally introduced to enhance the machine readability of data. As a side effect, human readability also increased. However, enhancing reproducibility was not a primary goal when implementing FAIR principles.\nThus, we will only address two concepts we believe are relevant for computational reproducibility: persistent identifiers, such as Digital Object Identifiers (DOIs), and metadata. DOIs make your scientific output (e.g., articles, datasets, code) findable, thereby enhancing the possibility of other researchers reproducing your scientific output.\n\n\n\n\n\n\nWhat is a Digital Object Identifier (DOI)?\n\n\n\n\n\nA Digital Object Identifier (DOI) is a unique alphanumeric string assigned to a digital document or resource to provide a permanent and stable link to it. DOIs are commonly used to identify and provide a persistent link to scholarly articles, research papers, books, datasets, and other types of digital content. The purpose of a DOI is to ensure that the content can be reliably located and accessed over time, even if the web address (URL) of the resource changes.\nKey features of DOIs include:\n\nUniqueness: Each DOI is unique to a particular resource, ensuring that no two resources have the same identifier.\nPersistence: DOIs are designed to remain unchanged, providing a persistent link to the resource even if it is moved or the URL changes.\nInteroperability: DOIs are widely used in scholarly publishing and other sectors, making them interoperable across different systems and platforms.\nAccessibility: DOIs are often associated with metadata that provides information about the resource, such as author, title, publisher, publication date, and more.\nCitations: DOIs are commonly used in academic and scientific citations to provide a standardized and reliable reference to a specific resource.\n\nDOIs are typically assigned and managed by registration agencies, such as CrossRef for scholarly content or DataCite for research data. Organizations and publishers assign DOIs to their digital content to enhance discoverability, citation tracking, and long-term accessibility.\n\n\n\n\n\n\n\n\n\nHow to set up a persistent identifier with OSF?\n\n\n\n\n\n\nGo to https://osf.io/.\nLog in or sign up.\nClick on My Projects on the top bar.\n\nClick on the green button Create Project.\nType in a title (you can change it later).\nSpecify your storage location.\nClick on the green button Create.\nInsert all your data, code, and metadata.\nMake your project public — this will generate a DOI.\n\n\n\n\n\n\n\n\n\n\nHow to set up a persistent identifier with Zenodo?\n\n\n\n\n\nThe version control book by Wittkuhn and Pagenstedt (2024) gives a detailed instruction on how to set up a DOI with Zenodo. We therefore ask you to read the respective chapter.\n\n\n\n\n\n\n\n\n\nWhat is metadata?\n\n\n\n\n\nA short definition is that metadata is data about your data. More thoroughly, metadata is a set of data that describes and gives information about other data. However, metadata does not contain the data itself.\n*Example:\nImagine you write a text message to one of your friends. The data would be your message. Metadata would contain information about the forwarder, the recipient, the time the message was sent, the used device, and so on …\nThe same applies to your research data. Metadata contains information about your project, variable names and labels, response formats, affiliations, etc. Remember the pandas wondering what all the variables Sam1, …, Sam4 mean? That is what you can describe with metadata.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Research Data Management</span>"
    ]
  },
  {
    "objectID": "chapters/rdm.html#data-organization",
    "href": "chapters/rdm.html#data-organization",
    "title": "5  Research Data Management",
    "section": "5.5 Data organization",
    "text": "5.5 Data organization\nThere are many different ways to organize your data. There is really no right or wrong here, but there are some valuable guidelines aimed at enhancing reproducibility. Data organization is not only about folder structure and precise naming. It is also about choosing file formats that enhance usability for both humans and machines. Further, it includes the use of metadata to describe your data. Due to the variety of organizational styles, you should establish a consistent approach to organizing your data. Thus, you need to apply a standard for your data.\n\n5.5.1 Data standards\n\n\n\n\n\n\nFigure 5.8: “Standards” by xkcd.com (Randall Munroe) (License: CC BY-NC 2.5; reused without modifications)\n\n\n\n\n5.5.1.1 Questions to ask yourself:\n\nWhat data are you working with?\nWhich analysis pipelines are you working with?\nIs there a community standard?\n\nFirst, you should consider the type of data you are working with. EEG data might have different requirements than MRI data, eye-tracking data, cardiological data, questionnaire data, and so on. How complex is your data, and how should it be arranged?\nSecond, after determining your data type, you’ll realize that you’ll face specific analysis pipelines. For example, raw EEG data must be handled differently from MRI data, and so on. You might need to use specific analysis software that requires certain file formats or other specific requirements.\nThird, check whether there is a standard in your scientific community. Community standards help to organize your data, facilitating cooperation between different labs and ensuring consistency within your own lab. Additionally, if you want to reproduce data, you will have a harder time if the data is organized in a format you are not familiar with. Adopting a widely used data organization style will make reproducibility much easier.\n\n\n5.5.1.2 Example: Brain Imaging Data Structure (BIDS)\n\n\n\n\n\n\nFigure 5.9: “Illustration of a BIDS structured dataset” by Gorgolewski et al. (2016) (License: CC BY 4.0; reused without modifications)\n\n\n\nThe community standard Brain Imaging Data Structure (BIDS) was introduced by Gorgolewski et al. (2016), providing a data organization standard for the neuroimaging scientific community. MRI research faced the issue of producing many different output files, ranging from plain text to multidimensional image data files. Additionally, different scanners produced different output files, and there was no consensus on how to organize and share these data. This led to misunderstandings, wasted time rearranging data, and potential sources of error.\nReproducing the entire BIDS standard in all its facets would be beyond the scope of this book. Thus, we will focus on high-level concepts that could be analogously applied to a variety of scientific projects.\n\n\n\n\n\n\nSteps to create a BIDS compatible dataset\n\n\n\n\nConvert files\nCreate folder structure, rename, and copy files\nAdd remaining data\nAdd missing metadata\nValidate the dataset\n\n\n\nWhen your data analysis pipeline requires your data to be in a specific format, make sure to convert your data files into the correct format. Specific software is often used for this purpose in MRI research. In survey-based research, this might not be too complicated. However, when extracting data from your survey servers (such as Unipark or LimeSurvey), ensure you use the correct format.\nBIDS includes its own folder structure for research projects. When you have your own research project, ensure it aligns with our recommendations from Chapter 2 and project-structure.\nSometimes, you might need to add more information that was not captured during your data collection process (e.g., details of experimental tasks and additional demographic information of participants).\nIn BIDS, metadata files are created when converting files from one format to another. However, these metadata files may not be exhaustive. You might want to include task descriptions, task instructions, and so on. Section 5.6 describes which metadata can be used in less complex data management scenarios.\nA nice feature of BIDS is the BIDS Validator. It checks if any required or recommended metadata is missing. It also identifies incorrect definitions of missing values, wrong units, missing scans, and inconsistent scanning parameters across subjects. Even though you are unlikely to apply the validator outside of neuroimaging, the concept is quite powerful. We have provided a small section about verifying your code, which tackles the same topic but focuses more on your code than on your data. Click here to go to the section (section not merged yet).\n\n\n\n\n\n\nBenefits of BIDS\n\n\n\nWhat makes BIDS truly beneficial are BIDS apps. BIDS apps are automatically compatible with BIDS datasets. One example of such an app is fMRIPrep. This app provides researchers working with fMRI data an easy workflow for preprocessing fMRI data (Esteban et al. 2019). fMRIPrep automates several steps without requiring manual intervention from the researcher. Thus, BIDS, combined with its apps, is a powerful tool for saving time and effort as a researcher.\n\n\nfMRIPrep highlights another benefit of data organization standards: When many people rely on such a standard, new innovations emerge that improve the workflow.\nPreviously, preprocessing fMRI data was a time-consuming task for PhD students and PostDocs in the field of neuroimaging. With fMRIPrep, this process can be done automatically and without manual intervention. By applying the BIDS standard and fMRIPrep to your data, you will require far fewer resources to understand others’ analysis pipelines using the same standards. However, a data organization standard only works well when a lot of people use it. That is one reason why BIDS is successful: It is widely used in the field of neuroimaging.\n\n\n5.5.1.3 Example: Psychological Data Structure (Psych-DS)\nThe Psychological Data Structure (Psych-DS) aims to apply the principles of BIDS to behavioral data. Thus, it is heavily based on BIDS. The core idea is to consistently organize data, facilitating data sharing and enhancing the understanding of the data. There is also a guide to help researchers organize their research projects. Like BIDS, Psych-DS provides a validation tool that checks if the data organization has been done correctly. It also has the CEDAR wizard, a tool which creates a standard .json file. This file contains metadata informationen important to understand the dataset(s) someone is working on within a project.\nHowever, Psych-DS has not been widely adopted by researchers, and its development is not as fast as that of BIDS. Therefore, it does not yet have extension tools like fMRIPrep. Nevertheless, Psych-DS could have more impact if more people began using it. The benefit of Psych-DS is clearly its adaptation to behavioral data structures, which can be applied by a wide range of research communities in psychology.\n\n\n\n\n\n\nMinimum requirements of a Psych-DS congruent project\n\n\n\n\n\n\none folder for your study / research project\ninside that folder, there must exist a folder called data\ninside the data folder, all data must be with .csv extension\nif the primary data was not a .csv-file, it must be stored in another subfolder called raw\n.csv-files in the data folder must have the suffix _data.csv\ndeliberate use of - and _ to name data files as in Section 3.4.3.1\nnext to to the data folder a metadata file must exist, named dataset_description.json (see CEDAR wizard)\n\n\n\n\n\n\n\nMetadata requirements\n\n\n\n\n\"name\" - The name of the dataset\n\"description\"- A description for the dataset, which can be as long or as short as you like\nvariableMeasured - A list of all the variable names that appear anywhere in the CSV file headers in your dataset\n\n\n\n\n\n\n\n\n\nExample of a Psych-DS sample folder\n\n\n\n\n\nZebra-Questionnaire-Project/\n    dataset_description.json\n    analysis/\n        myanalysisfiles.R\n        my_excel_data.xlsx\n    data/\n        version-alltrials_participant-001_data.csv\n        version-alltrials_participant-002_data.csv\n        version-alltrials_participant-003_data.csv\n        version-nofillers_data.csv\n        summary-session_data.csv\n        raw/\n            questionnaire1.jpg\n            questionnaire2.jpg\n            questionnaire3.jpg\n\n\n\nInformation were extracted from the Psych-DS guide\nNote that Psych-DS uses the term raw data differently than described in the section about modularity. When someone using Psych-DS wording referring to raw data, it is meant what we described above as source data.\n\n\n\n\n\n\n5.5.2 Rectangular Data\nIf you do not have a community standard specifying the data organization, we highly recommend using the rules of rectangular data as proposed by Broman and Woo (2018).\n\n\n\n\n\n\nRules of rectangular data (Broman and Woo 2018)\n\n\n\n\nBe consistent.\nChoose good names for things (see Chapter Naming things).\nWrite dates in the format YYYY-MM-DD (see Chapter Naming things).\nDo not leave empty cells.\nPut just one thing in a cell.\nMake it a rectangle.\nCreate a data dictionary (see Section 5.6).\nDo not perform calculations in the raw data files.\nDo not use font color or highlighting as data.\nMake backups.\nUse data validation to avoid errors (see Section 7.6.1).\nSave the data in plain text files.\n\n\n\nWe will not go into detail on rules 2, 3, and 6, because we have either already covered these topics earlier or will address them in a separate section later.\n\n5.5.2.1 Be consistent\nIt sounds easier than it is. If you organize your data consistently from the start, you will not have to spend additional time later “harmonizing” the data. To do so, use consistent codes for categorical variables (decide between different versions of male, Male, m, M). Use a consistent fixed code for any missing values (we prefer using NA, but avoid -999 or similar). Use consistent variable names (decide between saliva_10wk, Saliva_10wk, sal_week10, etc.). Use consistent subject identifiers (decide between 003, pcp003, person-003, etc.). Use a consistent data layout across multiple files. It would be extra work to combine files with different layouts. Use consistent file names (decide between TSST_VR_2024-11-19.csv, 2024-11-19_TSST_virtual-reality.csv, etc.). Use a consistent format for all dates (see Section 3.7.1.3). Use consistent phrases in notes if you have a separate column for them. Be careful about extra spaces within cells (e.g., the difference between “male” and ” male “).\n\n\n5.5.2.2 No empty cells\nDo fill out every cell. When information is missing, use a common code to indicate that it is missing (preferably NA). Merging cells, as you can in Excel, is not recommended, since it will leave some cells empty. Repeat repeating values. If you leave cells empty, it will be harder to infer the repeating values, particularly after some data wrangling.\n\n\n5.5.2.3 Put just one thing in a cell\nIn one piece of a spreadsheet, which is a cell, there should only be one piece of information. Do not include units in your cells. It is better to put units in a data dictionary (see Section 5.6). The same applies to notes. Instead of writing 0 (below threshold), create a new column called note and write 0 in the first column and below threshold in the second.\n\n\n5.5.2.4 Make it a rectangle\nAs your data usually resides in a two-dimensional spreadsheet, it is best to layout your data in a two-dimensional format as well. Use columns for variables and rows for subjects or observations. The first row should contain variable names. If some data do not fit into one dataset, create a set of rectangular datasets and save them in separate files. Do not use multiple header rows. You can further apply the concept of tidy data (Wickham 2014) to your rectangular dataset (see Section 7.5).\n\n\n\n\n\n\nExample of multiple header rows\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n\nday_1\n\nday_2\n\n\n\nID\nsleep\nsport\nsleep\nsport\n\n\n34\n7.5\n3\n6\n0.5\n\n\n35\n8\n0\n8.5\n0.5\n\n\n36\n6\n2.5\n7.5\n3\n\n\n\nNote: This table deviates from the rectangle form. It also leaves multiple cells empty\n\n\n\n\n\n5.5.2.5 No calculations in the raw data files\nPrimary data should just be data. Only data. There should be no means and standard deviations calculated in that primary data. Use scripts to calculate whatever you want, but do not make changes in the primary dataset.\n\n\n5.5.2.6 Do not use font color or highlighting as data\nIf you identify outliers or other information you want to highlight, do not highlight them using visualization. Instead, create a new column called outlier and mark the identified outliers as TRUE and the others as FALSE. Visualization is useful in the short term, but it makes it difficult to extract this information for later analysis.\n\n\n5.5.2.7 Make Backups\nBack up your data regularly in multiple locations. Consider using a version control system like Git (see Version Control Book). When you have finished entering data, write-protect your data file. This ensures that you do not accidentally make changes to your dataset.\n\n\n\n\n\n\nWrite-protecting your data\n\n\n\n\n\n\n Mac Windows Linux\n\n\n\nOpen the folder in Finder where your file is located.\nRight-click on your file.\nClick on Get Info.\nOpen the section Sharing & Permissions.\nClick on Privilege next to your user account.\nSelect Read only.\n\n\n\n\nOpen the folder in Windows Explorer where your file is located.\nRight-click on your file.\nClick on Properties.\nSelect the General tab.\nNavigate to the Attributes section.\nCheck the box for Read-only.\nConfirm your choice by clicking the OK button.\n\n\n\nTBA\n\n\n\n\n\n\n\n\n5.5.2.8 Use Data Validation to Avoid Errors\nEnsure that your entered data is error-free by applying data validation techniques. You can create validation rules using the R package assertr (Fischetti 2023) and its function verify() (see Section 7.6.1).\n\n\n5.5.2.9 Save data in plain text files\nWe recommend saving your data files in .csv format. csv stands for “comma-separated values”. This file format is basic and not visually appealing. However, it requires no special software to open and is easy to handle in code. Thus, it enhances computational reproducibility. In countries where commas are used as decimal separators, tab-delimited text files (.tsv) might be an appropriate alternative to .csv. Note that if you have highlighted cells or applied any special features in an Excel file, these features will be lost when saving the file as .csv or .txt.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Research Data Management</span>"
    ]
  },
  {
    "objectID": "chapters/rdm.html#sec-dictionary",
    "href": "chapters/rdm.html#sec-dictionary",
    "title": "5  Research Data Management",
    "section": "5.6 Data dictionaries",
    "text": "5.6 Data dictionaries\nIn addition to rectangular data, it is also valuable to have a data dictionary describing how your data is structured. The data dictionary is also sometimes referred to as a codebook. Your dictionary enhances the understandability of your entire research project and is therefore crucial for computational reproducibility. According to Broman and Woo (2018), your dictionary should contain:\n\nThe exact variable name as in your data file.\n\nA version of the variable name that might be used in data visualizations.\n\nA longer explanation of what the variable means.\n\nThe measurement units.\n\nExpected minimum and maximum values.\n\nHowever, more information can be stored in your dictionary. When analyzing data collected from a survey, a variable in your dataset will likely represent an item from that survey. You can then provide information on:\n\nThe item in the survey.\nThe original wording of the item.\nThe subscale the item belongs to\nThe author responsible for that item/subscale.\nThe response format for the item.\nSpecial considerations regarding the item.\n\nIdeally, your data dictionary should also be stored in a rectangular format. Another option is to use a .json file. This offers more flexibility but also presents a new challenge in organizing the data.\n\n\n\n\n\n\nLearn more: What is a json file?\n\n\n\n\n\njson stands for JavaScript Object Notation. Thus, everything you write in that file must adhere to the JSON notation style. It would be beyond the scope of this book to explain how data in a .json file should be formatted. However, you can see a small example below to get a sense of how a .json file looks. If you want to dive deeper into the use of .json files, we recommend this Video that explains JSON more thoroughly.\n\n\n\njson Code\n\n[\n  {\n    \"name\": \"agr1\",\n    \"item_wording\": \"I make people feel at ease.\",\n    \"type\": \"numeric\",\n    \"scale\": \"agreeableness\",\n    \"min_value\": 1,\n    \"max_value\": 5\n  },\n  {\n    \"name\": \"agr2\",\n    \"item_wording\": \"I love children.\",\n    \"type\": \"numeric\",\n    \"scale\": \"agreeableness\",\n    \"min_value\": 1,\n    \"max_value\": 5\n  }\n]\n\n\n\n\n\n\n\n\n\n\n\nBenefits of a json-file\n\n\n\nProviding metadata in a json format has some useful advantages:\n\nIt is easy for humans and especially machines to read\nYou can read in the json file into R and use the data information for your data analyses\nIn comparison to spreadsheets, json files are not limited to two-dimensional in- and outputs\n\n\n\n\n\n\n\n\n\nHow to work with json files in R\n\n\n\n\n\n\nCreate a json fileRead json-file into R\n\n\n\nClick on File \\(\\rightarrow\\) New File \\(\\rightarrow\\) Text file\nSave the file in your desired location and name it with a .json suffix, e.g. dataset_description.json.\nThen, you can add content in your newly created json file.\n\n\n\n\nInstall the package {jsonlite} if you have not installed it before.\n\n\n\n\nCode\n\ninstall.packages(\"jsonlite\")\n\n\n\nLoad the package\n\n\n\n\nCode\n\nlibrary(jsonlite)\n\n\n\nLoad the json-file to your R environment. Make sure that you specified the correct file path from your working or project directory (see Section 7.3).\n\n\n\n\nCode\n\ncodebook &lt;- jsonlite::fromJSON(\"path/to/your-json-file.json\")\n\n\n\nyour json-file should now be a list object in R and you can use the values of the file with extracting the information you want with indexing 1.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Research Data Management</span>"
    ]
  },
  {
    "objectID": "chapters/rdm.html#acknowledgements",
    "href": "chapters/rdm.html#acknowledgements",
    "title": "5  Research Data Management",
    "section": "5.7 Acknowledgements",
    "text": "5.7 Acknowledgements\nDr. Maike Kleemeyer and the Research Data Management and Open Science working group at the Max Planck Institute for Human Development, Berlin.\n\n\n\n\nBarker, Michelle, Neil P. Chue Hong, Daniel S. Katz, Anna-Lena Lamprecht, Carlos Martinez-Ortiz, Fotis Psomopoulos, Jennifer Harrow, et al. 2022. “Introducing the FAIR Principles for Research Software.” Scientific Data 9: 622. https://doi.org/10.1038/s41597-022-01710-x.\n\n\nBroman, Karl W., and Kara H. Woo. 2018. “Data Organization in Spreadsheets.” The American Statistician 72 (1): 2–10. https://doi.org/10.1080/00031305.2017.1375989.\n\n\nEsteban, Oscar, Christopher J. Markiewicz, Ross W. Blair, Craig A. Moodie, A. Ilkay Isik, Asier Erramuzpe, James D. Kent, et al. 2019. “fMRIPrep: A Robust Preprocessing Pipeline for Functional MRI.” Nature Methods 16 (January): 111–16. https://doi.org/10.1038/s41592-018-0235-4.\n\n\nFischetti, Tony. 2023. Assertr: Assertive Programming for r Analysis Pipelines. https://doi.org/10.32614/CRAN.package.assertr.\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nHanson, Karen, Alisa Surkis, and Karen Yacobucci. 2019. “Data Sharing and Management Snafu in 3 Short Acts.” https://doi.org/10.6084/M9.FIGSHARE.8061722.V1.\n\n\nHerndon, Thomas, Michael Ash, and Robert Pollin. 2014. “Does High Public Debt Consistently Stifle Economic Growth? A Critique of Reinhart and Rogoff.” Cambridge Journal of Economics 38 (2): 257–79. https://doi.org/10.1093/cje/bet075.\n\n\nReinhart, Carmen M., and Kenneth S. Rogoff. 2010. “Growth in a Time of Debt.” American Economic Review 100 (2): 573–78. https://doi.org/10.1257/aer.100.2.573.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Jornal of Statistical Software 59 (10): 1–23. https://doi.org/10.18637/jss.v059.i10.\n\n\nWikipedia Contributors. 2025. “Modularity.” https://en.wikipedia.org/wiki/Modularity.\n\n\nWilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg, Gabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al. 2016. “The FAIR Guiding Principles for Scientific Data Management and Stewardship.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.18.\n\n\nWittkuhn, Lennart, and Konrad Pagenstedt. 2024. Version Control Book. ZFDM Repository. https://doi.org/10.25592/uhhfdm.14149.\n\n\nZiemann, M., Y. Eren, and A. El-Osta. 2016. “Gene Name Erorrs Are Widespread in the Scientific Literature.” Genome Biology 17 (August). https://doi.org/10.1186/s13059-016-1044-7.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Research Data Management</span>"
    ]
  },
  {
    "objectID": "chapters/rdm.html#footnotes",
    "href": "chapters/rdm.html#footnotes",
    "title": "5  Research Data Management",
    "section": "",
    "text": "Since indexing lists in R or RStudio is not part of this book, you can see how to do that in the online materials of a seminar on OpenScience that uses this book as online resource.↩︎",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Research Data Management</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html",
    "href": "chapters/git-crashcourse.html",
    "title": "6  Git crashcourse",
    "section": "",
    "text": "6.1 Introduction\nIn this chapter you will get to know the basic structure of Git and how you can use it in your own projects. This is simply meant as a crashcourse to understand the basics and only covers how to do so in RStudio. If you would like a more comprehensive approach to learning Git and version control, we highly recommend the Version Control Book. It was created by some of the same people as the Repro book, that you are currently reading and follows a similar structure. It does focus on teaching Git using the command line (see Tip 6.1) but can be a good place to go if you have questions, need to fix a mistake or simply want to learn more about the beautiful world of version control using Git. Another great resource, that is even more comprehensive and heavily informed the Version Control Book, is the Turing Way.\nIt is possible to work with Git completely through the command line. However, the command line might seem unintuitively for many people. Thus, we aim to use git as much as possible with GUIs as RStudio. Therefore, we aim to keep the chapter as user-friendly as possible. Nevertheless, we might need to work with the command line for specific commands that do not have a respective button in RStudio.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html#introduction",
    "href": "chapters/git-crashcourse.html#introduction",
    "title": "6  Git crashcourse",
    "section": "",
    "text": "Tip 6.1: What is the command line?\n\n\n\n\n\n\nYou are most likely used to interact with programs on your computer through graphical user interfaces (GUIs) where you can select options through graphical icons and visual indicators using the computer mouse. However, computers have historically been controlled through text-based commands typed into command-line interfaces (CLIs) using the computer keyboard. To this day, the command line has persisted as a reliable (and sometimes the only) way to effectively interact with computer programs. - Wittkuhn and Pagenstedt (2024), chapter on the command line\n\n\n\n\n\n\n\n\n\n\n\nHow to open the command line on your computer\n\n\n\n\n\n\nMacOSWindows\n\n\nTo open a command-line tool on a Mac there are multiple ways. Here we show you three ways:\n\nOpen Finder, click on Applications, then on Utilities. In the folder Utilities, you will find the application Terminal. Open it, and you can use the command line.\nOpen Finder, go to the GO menu, then on Utilities. Then, open the Terminal.\nOpen the Launchpad, hit Terminal into the search bar, and open it.\n\n\n\nPress the Windows-Button  so that your search pane opens on the computer. Type cmd into the search field. Then, the command line should pop up. Hit Enter and you open the command line.\n\n\n\n\n\n\nNote\n\n\n\nOpposed to MacOS, the default command line in Windows does not work with Git. To work with Git on a Windows computer, you have to install Git Bash first (Section 6.2.1) and then open Git Bash. Then you can work with a git-friendly command line on Windows (see Figure 6.1).\n\n\n\n\n\n\nFigure 6.1: This screenshot shows how the Git Bash command line looks like on a Windows computer. Code to check the current version of git: git --version Used under a CC-BY 4.0 license.\n\n\n\n\n\n\n\n\n\n\n\n\n6.1.1 What are Git and version control and why are they useful\nYou’ve likely come across the illustration below before in this book, but it helps illustrate why using version control can make your workflow and collaboration that much smoother.\n\n\n\n\n\n\nFigure 6.2: “notFinal.doc” by Jorge Cham (License: All content copyright 1997-2003 Piled Higher and Deeper Publishing, LLC.; reused without modifications)\n\n\n\nVersion control allows you to keep working on the same file whilst not losing your previous versions. Just imagine you are working on a code that’s working perfectly fine, let’s call this 01_code. You now add a new feature to 01_code for which you change parts of the previous code. Accidentally, you’ve created a bug and now your whole code doesn’t run anymore. You’ve changed too much to simply remember what you would need to do to get back to 01_code. Wouldn’t it be great to travel back in time to your working 01_code? In a way version control allows you to do this. It essentially allows you to take snapshots of your work that you can go back to at any point.\nGit is a software that allows you to do just that.\n\n\n6.1.2 Git and reproducibility\nGit as version control software is able to follow different versions of code and data. Thus, it provides information about code and data evolved over time. Hence, it becomes way easier to understand which code and data was used to create e.g. a particular figure. Further, Git saves a version history enabling us to understand the changes made, the purpose of analyses, even months or years later. Thus, we can remarkably reduce process-based reproducibility errors when using Git (Section 1.1.1) Meanwhile, Git hides older versions which keeps your project structure organized. However, you can still access them if you need them (The Turing Way Community 2022).\n\n\n6.1.3 Some limitations\nGit is not good at tracking very large files such as data sets, which can slow it down quite a bit. It is also not very good at tracking binary files like videos, images or ‘.docx’ files. But if you want to track written work you can use ‘.md’ (Markdown) files instead.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html#first-steps",
    "href": "chapters/git-crashcourse.html#first-steps",
    "title": "6  Git crashcourse",
    "section": "6.2 First steps",
    "text": "6.2 First steps\n\n6.2.1 Installation\nTo use Git, you have to install it first. Depending on your operating system, this will look different.\n\n\n\n\n\n\nHow to install Git on your computer\n\n\n\n\n\n\n MacOS Windows\n\n\nOn recent versions of MacOS (&gt; MacOS Sierra 10.12) Git should come pre- installed. To check whether Git is pre-installed, head to your command-line/Terminal and enter the following command.\n\n\n\nTerminal\n\ngit --version\n\n\nWhen Git is already installed, you should see an output similar to below.\n\n\n\nOutput\n\ngit version 2.39.2 (Apple Git-143)\n\n\nWhen Git is not installed, you will receive a prompt asking you if you want to install it along Xcode command line deleveloper tools. You will also be asked for your administrator password. Make sure that you have enough storage on your computer to install the Xcode command line developer tools.\nMaybe, you will receive an error message called xcrun:error. If so, check out the Git installation instructions in the version control book (Wittkuhn and Pagenstedt 2024). The authors describe how to fix it.\n\n\nOn Git for Windows you can download Git and Bash in one go. The Bash shell is a commonly used command-line interface, which can be useful for more complex commands. On the website simply click on the Download button and after it has finished downloading, double-click on the installer to start the installation process. You can accept all the default settings if you have no special requirements such as a specific installation destination. After running through all the settings, click Install. Once done installing, the Bash shell will open automatically. To confirm everything worked correctly and Git is installed, run the following command, which should return the Git version.\n\n\n\nTerminal\n\ngit --version\n\n\n\n\n\nOutput\n\ngit version 2.46.0.windows.1\n\n\n\n\n\n\n\n\n\n\n6.2.2 Setting up Git in .gitconfig\nWhen you first start using Git, there are some things you need to set up in the .gitconfig file. This file stores all your specific settings. Using the command line, you first need to let Git know who you are. Your username and email address will be associated with the changes you’re tracking with Git. This is useful, as it allows others to trace back who made which changes. As you will later use this email address to connect with GitHub, make sure you either use the same email as the one in your GitHub account or use an email address you would be happy to use for your GitHub profile as well!\nTo set this up, enter the command below in the command line, replacing ‘Your Name’ and ‘Your Email’ with your own.\n\n\n\nTerminal\n\ngit config --global user.name \"Name\"\ngit config --global user.email Your Email\n\n\n\n\n\n\n\n\nConsider privacy concerns!\n\n\n\n\n\nBeware that your username and email address will be publicly visible if you make changes to a public project on e.g., GitHub. This is very difficult to change or remove later on. This is relevant if you plan on potentially sharing private projects later on. Consider if you’d rather use a pseudonym for your username and email address.\n\n\n\nThe next step is not strictly necessary for functionality but comes highly recommended. Some older versions of Git still use the terminology of “master” to define the most important branch (There will be more explanation on what branches are later on). To make the terminology of Git less offensive and more inclusive, there has been a shift to refer to “main” instead. To ensure your Git will refer to “main” instead of “master”, simply run this in your command line:\n\n\n\nTerminal\n\ngit config --global init.defaultBranch main\n\n\n\n\n6.2.3 Repository\nIn the world of Git, your project is referred to as a repository. More specifically repository, or repo for short, refers to the folderstructure that you are tracking with Git, which usually is the same as your project. Sometimes project and repo are used interchangeably but when using Git and GitHub, your project is called a repository.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html#using-git-in-rstudio",
    "href": "chapters/git-crashcourse.html#using-git-in-rstudio",
    "title": "6  Git crashcourse",
    "section": "6.3 Using Git in RStudio",
    "text": "6.3 Using Git in RStudio\nGit is well integrated in RStudio and offers a GUI for Git. As long as you have Git installed on your computer, it is very easy to use it in RStudio and add it to existing projects. Whilst originally Git is a command line based program, using the GUI of RStudio makes it more intuitive and can be faster for standard commands than typing them out. However, for some actions, using the command line is still necessary.\n\n6.3.1 Setting up Git in an existing R project\nBefore setting up Git in an existing R-project, make sure you are in your intended project in RStudio 1. Now, to set up Git, simply go to Tools &gt; Version Control &gt; Project Setup… (see below) and choose Git as the version control system in the Pop-up window. Confirm both the initialization of a Git repository in your project, as well as the RStudio restart.\n\n\n\nThis screenshot shows where to find the version control feature in RStudio . Used under a CC-BY 4.0 license.\n\n\nWell done, now you should have an additional tab for Git next to your environment pane, which is usually found in the upper right corner. It should look something like below.\n\n\n\nThis screenshot shows where to find Git pane in RStudio. Used under a CC-BY 4.0 license.\n\n\nHere you can see all of your projects file, which so far are not tracked by Git.\n\n\n6.3.2 The .gitignore file\nNow that you’ve added Git to your repository, a .gitignore file was automatically added to it. This file lists all the files that are not tracked aka ignored by Git. You can and should add files that you don’t want to be included in the version history in here.\nThis is useful to:\n\nKeep your repository free of unnecessary files, that would only clutter it. You should ignore files that can be recreated by using code from your repository, e.g., plots you created in your data analysis.\nKeep private or sensitive information out of the version control history, which you might later share.\nNot slow down working with your repository by adding big files, such as datasets to the .gitignore file. Additionally, you shouldn’t need to track changes when it’s reproducible from your raw data and code.\n\nTo add files to .gitignore, just open the .gitignore file and list the files you don’t want to be tracked in it.\n\n\n\nExample .gitignore\n\n1*.pdf\n2misc\n\n\n\n1\n\nThis entry makes Git ignore all .pdf files inside your repository.\n\n2\n\nThis entry makes Git ignore the misc folder inside your repository.\n\n\n\n\nThere will already be some files listed there that are being ignored by default. Your .gitignore should look something like this.\n\n\n\n\n\n\nFigure 6.3: This screenshot shows how a .gitignore file looks like in RStudio . Used under a CC-BY 4.0 license.\n\n\n\n\n\n6.3.3 Ignore previously tracked files and folders\nThe simple addition to the .gitignore file of the desired files and folders (see Section 6.3.2) does only work conveniently, if they are added to the .gitignore file before the files and folders were created. However, it requires an extra step to add files and folders to the .gitignore file that have been tracked before. Consider you have a folder (e.g. misc) in your repository that you want to ignore but it was tracked before by git (see Figure 6.3). If you just add misc to the .gitignore file, what happens, is that git stops tracking changes for all new files and folders in that folder. However, the files and subfolders that were in the misc folder before, are still tracked by git. You have to use the command line to not track files and folders that have been tracked before2.\n\nIgnore tracked folderIgnore tracked file\n\n\nTo withdraw the tracking of a folder, you have to do two things:\n\nYou have to add the folder in the .gitignore file. To do so, write the name of your folder in a new line of the .gitignore file\nYou have to remove the folder from the cache specifying which documents Git is tracking. To do so, type the command below in to your command line.\n\n\n\n\nTerminal\n\n1git rm --cache -r &lt;folder-name&gt;\n\n\n\n1\n\nReplace &lt;folder-name&gt; by the name of your folder\n\n\n\n\nThe -r in that command stands for recursive and specifies that all subfolders and files in the target folder will be ignored, too.\n\n\nExample\nWithdraw tracking from the folder raw_data that is a subfolder of the the data folder.\n\n\n\n.gitignore\n\ndata/raw_data\n\n\n\n\n\nTerminal\n\ngit rm --cache data/raw_data\n\n\n\n\n\nTo withdraw the tracking of a file, you also have to do two things:\n\nYou have to add the folder in the .gitignore file. To do so, write the name of your folder in a new line of the .gitignore file\nYou have to remove the file from the cache specifying which documents Git is tracking. However, the command is slightly different in comparison to the one for folders.\n\n\n\n\nTerminal\n\n1git rm --cache &lt;file-name&gt;\n\n\n\n1\n\nReplace &lt;file-name&gt; by the name of your file. Remember to put the file extension on the name.\n\n\n\n\nThe -r is not required anymore, since a file cannot contain other subfolders and files.\n\n\nExample\nWithdraw tracking from the file participant-003_feedback.pdf that lies in the folder feedback which, in turn, is a subfolder of misc.\n\n\n\n.gitignore\n\nmisc/feedback/participant-003_feedback.pdf\n\n\n\n\n\nTerminal\n\ngit rm --cache -r misc/feedback/participant-003_feedback.pdf\n\n\n\n\n\n\nAs you should have figured out, it is useful to think about which files and folders you want or do not want to track before setting up your project. Nevertheless, changes might arise during your project and this helps you to keep your version control history clean, even when circumstances change.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html#general-workflow-with-git",
    "href": "chapters/git-crashcourse.html#general-workflow-with-git",
    "title": "6  Git crashcourse",
    "section": "6.4 General workflow with Git",
    "text": "6.4 General workflow with Git\nWhen using Git, the most basic workflow is:\n\nMake changes to your files and save them as usual\n\nStage files\n\nCommit your changes\n\n\n6.4.1 Staging\nStaging is essentially telling Git which files and changes you want it to track in your next commit. It is like adding items to your shopping cart but not yet buying them. You have to do this before being able to create a commit. When staging files, keep in mind what changes and files to include in a single commit. This can be all the files that you’ve changed in order to fix a bug or to include a new feature, but could be divided up into smaller commits as well.\nIn order to stage a file in RStudio, simply tick the box on the left of the file name in the Git pane. There, all your files that have saved changes but aren’t yet tracked with Git will show up. Logically, after you have first initialized Git in a repository, all the files will show up there as they have not yet been tracked. You can go ahead and stage all the files and then click Commit in the Git pane. Below you can see how this could look like.\n\n\n\nThis screenshot shows ow to stage files in RStudio. Used under a CC-BY 4.0 license.\n\n\n\n\n6.4.2 Committing\nA commit is like a screenshot of your current work. Everything that you have previously staged will be included in the next commit and makes up that specific version of your repository that you are saving.\n\n\n\nCommits can be compared to anchors in climbing. When you commit, you create a safety point you can’t fall past in your progress. Illustration from the Openscapes blog GitHub for supporting, contributing, and failing safely by Allison Horst and Julia Lowndes. Used under a CC-BY 4.0 license.\n\n\nIn RStudio, after having staged your files you can simply make a commit by pressing the Commit button in the Git pane. Now you add a commit message. Figure 6.4 shows how this would look like for the initial commit, including the commit message.\n\n\n\n\n\n\nFigure 6.4: This screenshot shows creating the initial commit in RStudio. Used under a CC-BY 4.0 license.\n\n\n\nFor the commit message, it’s important to be concise and descriptive of what your changes did, as this is what you will later see listed in the commit history. If you do want to go back to a previous version later on, the commit messages need to be understandable enough for you and others to easily spot the correct one. By convention, start your message with a verb in the imperative, e.g., ‘Add’, ‘Fix’, ‘Remove’. Now simply press the Commit button below the message. Congrats, you just created your first commit.\nYou can create a new commit at any point of time. It is usually better to commit often rather than seldom. But also committing too often can make your commit history overwhelming and hard to find specific changes.\n\n\n\n\n\n\nHow to create better commit messages\n\n\n\n\n\nIt might help you to imagine these two scenarios, when trying to create better commit messages:\n1. Impersonate a strict, tight-lipped, demanding commander that yells what you are supposed to be doing at you in one short sentence.\n2. Think about your message being read by your vicious archnemesis, who doesn’t want to understand what you did there. (Similarly, you could also think about yourself in 5 months time, not having touched your project at all and barely remembering what it was about.)\nAnother great way to think about what to include in your commit message are your answers to the questions: What? Why? Where? In all of this, please remember: It is still better to commit than to overthink the messages, however your collaborators, including your future self will thank you for not leaving them empty and being concise and precise.\n\n\n\n\n\n\n\n\n\nAmending a commit\n\n\n\n\n\nWhen creating a new commit you have the option to check the box Amend previous commit. This adds your newly staged changes to the commit you made previously and gives it the commit message you just entered. This can be useful if you forgot to add some changes or if you are essentially still working on the same thing and want to keep your commit history cleaner. It can also be useful if you just want to change your previous commit’s message. Simply write the corrected commit message, check the Amend previous commit button and commit it. Just be careful tat you did not stage any files, if you only want to change the message.\n\n\n\n\n\n\n\n\n\nWhy are staging and committing separate actions?\n\n\n\n\n\nStaging and committing being separate actions allow you to be more deliberate in what you include in one commit. Logical units can go together by staging several files before creating a singular commit. These changed files might depend upon each other or are part of one larger action. Even if you’ve made changes across many files already but want to create several commits across them, you can do this by deliberately staging them. By only staging some of the changed files and creating a first commit and then staging the rest and creating a second commit, you can create more logical and clean commits. In your workflow, you can get a better overview and avoid forgetting files to include in a commit, by already staging them once you are done with changes within them. You can also stage only parts of the changes you’ve made by staging chunks. This way you can include only some lines in a commit even if you made other changes to a file as well. You can do this in the commit window, by first selecting your file and then selecting Stage chunk above the parts you’ve changed within a file. If you want to stage most of the changes, you can first stage the whole file and then select Unstage chunks above the lines you don’t want to stage.\n\n\n\n\n\n\n\n\n\nTip 6.2: View the changes you are about to commit\n\n\n\n\n\nAs you can see in Figure 6.4, in the lower part of the window some lines are marked green. These are lines that have changed in that specific document compared to the last commit you made. In Figure 6.4, the first commit is shown. Thus, all lines are now added into that document. If you change your document and remove some lines of e.g. code, these lines are marked red (see Figure 6.5). Hence, Git shows you which document will change in which line.\n\n\n\n\n\n6.4.3 Retrieving previous versions\nOne major advantages of version control is being able to retrieve previous versions of your documents. To do this, click the History button in the Git pane. This shows you a list of your previous commits, e.g., in the screenshot below, you can see the commit ‘63289c71’ with the commit message “Add love message to version control”.\n\n\n\n\n\n\nFigure 6.5: This screenshot shows the commit history of a repository in RStudio. Used under a CC-BY 4.0 license.\n\n\n\nHere, you can already see, why descriptive commit messages are so valuable, especially when there will be more than just three commits.\nYou can see which changes were made in that commit. Navigate to the version you want to bring back and select View file @ .\nSave as allows you to replace your current file with the previous version you are looking at now.\n\n\n\nA screenshot of a previously committed file. Used under a CC-BY 4.0 license.\n\n\nSimply save it as you are prompted to do. Now as a last step, save, stage and commit the file again as you normally would, to have Git track the change you just made. Now, you just travelled back in time and reset your file to a previous version. The versions of the file that you have changed in between the commit you went back to and the first time you made that commit are still there in your commit history. This way you could also return to them later on if you change your mind.\n\n\n\n\n\n\nView changes of previous commits\n\n\n\n\n\nJust as you can view your current changes you are about to commit (see Tip 6.2), you can view the changes of previous commits in the history tab of the git pane (see Figure 6.5). To do so, click on the respective commit and in the lower part of the window you can see the files with its changes in it. The changes you see are always relative to the previous commit.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html#branches",
    "href": "chapters/git-crashcourse.html#branches",
    "title": "6  Git crashcourse",
    "section": "6.5 Branches",
    "text": "6.5 Branches\nBranches allow you to work on your project in several versions at the same time. You can keep your main repo unchanged, whilst figuring out how to fix a bug or plot your analysis on a different branch. This let’s you keep your working code safe whilst you add or modify things in a separate branch. Once you’re happy with changes made you can move them from that branch to your actual main branch. A good example for research could be that you want to try out different visualizations of your results. Instead of fidgeting with the same plot to try out different styles and having to revert to old commits to get back to the previous version, you can have several branches to try out new styles and if you like your plot, add it to your main branch. Another example might be that you write a research paper in a Git-friendly environment (see Chapter about Quarto). Branches are very helpful if you have different ideas of how to structure e.g. your theoretical background. You can work on different ideas simultaneously while keeping your project structure clean.\nThe default branch in Git, where essentially your final results will land is called main. As touched on previously in older versions of Git this was referred to as “master”.\n\n\n\nThis illustration shows a main branch in grey with several other branches. Each dot is a commit. From main at the third commit, a blue Feature A branch was created. From this Feature A branch another Feature A-1 branch was created after the second commit on Feature A. Feature A-1 now already includes the changes made in Feature A. Both branches were merged back into main. The Feature B branch has two commits but hasn’t yet been merged back into main. Image from Chapter “Git Branches” of the “The Turing Way handbook to reproducible, ethical and collaborative data science”, used under a Creative Commons Attribution 4.0 License.\n\n\nBranches allow you to work on a version of your repo whilst keeping the working version safe and separate as main. You can mess around and experiment on other branches and once you are content with your changes you can add them to your main branch. If you are not, you can just as easily abandon that branch, delete it and start fresh on a new branch, without impacting your main version.\nAdditionally to keeping a working version of your code safe, it allows you to work on several issues or additions at the same time in separate branches. You can always switch between these branches and your working code. You can refer back to main easily or quickly prioritize one addition whilst keeping your other work-in-progress separate and safe to return to later on their respective branches.\nIf you work on a repo together with other people, you can each work on a different branch at the same time and give each other access to these branches by using a remote repository, which we will briefly talk about later.\n\n6.5.1 Create a branch\nTo add a new branch to your repository, head to Git pane &gt; New Branch and give your branch a descriptive but short name. Naming your branches systematically with ‘bugfix/’or ’feature/’ etc. is helpful to easily identify what the aim of each branch is, making collaboration easier.\n\n\n\nScreenshot of adding a new branch called feature/intro in RStudio. Used under a CC-BY 4.0 license.\n\n\nOnce you’ve created a new branch, you essentially have a copy of your main and can change all the files however you want. Staging and committing works just as usual. You can switch between your branches by clicking on them in your Git pane. Always make sure you are on the correct branch when making changes.\n\n\n\nScreenshot of viewing branches in RStudio. Used under a CC-BY 4.0 license.\n\n\n\n\n\n\n\n\nPay attention to create new branches from main\n\n\n\n\n\nWhen creating a new branch, Git creates this branch from whichever branch you are on at the moment. If you want to create a new branch from main, always double-check that you are on main.\n\n\n\n\n\n6.5.2 Merging\nOnce you are happy with your changes in a branch and want to add it to your main you have to merge them. Merging one branch into another refers to adding the changes you’ve made there to your other branch, often ‘main’. To do this, make sure you are on the branch you want to merge into, so add your changes to, which will often be main. To merge, go to your terminal in RStudio and run the following command:\n\n\n\nTerminal\n\ngit merge &lt;your branch&gt;\n\n\n\n\n\n\n\n\nMerge conflicts\n\n\n\n\n\nSometimes, when you work on different branches and try to merge them, merge conflicts can occur. In this occasion, Git is unable to resolve differences between branches and requests you to specify how to handle these differences. When merge conflicts happen to you, do not be afraid. Take a good look at the respective section in the Version Control Book (Wittkuhn and Pagenstedt 2024).\n\n\n\n\n\n6.5.3 Delete a branch\nAfter you have merged the branch, you can also delete the branch to keep your working environment clean. Again, there is no button in RStudio to do that for you. Thus, you will need to use the command line to do that. To delete a branch, you use the git branch -d command:\n\n\n\nTerminal\n\ngit branch -d &lt;your branch&gt;\n\n\n\n\n\n\n\n\nDo not delete the main branch\n\n\n\nTechnically, you can delete your main branch like any other branch. However, we do not recommend it to avoid any confusion.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html#summary-steps-in-a-git-workflow",
    "href": "chapters/git-crashcourse.html#summary-steps-in-a-git-workflow",
    "title": "6  Git crashcourse",
    "section": "6.6 Summary: Steps in a Git Workflow",
    "text": "6.6 Summary: Steps in a Git Workflow\nAs all this new information can be overwhelming for people who are new to version control and Git, this section should help you to get to know the basic workflow with Git. We assume that you successfully installed Git on your operating system (Section 6.2.1) and set up your current project with version control (Section 6.3.1).\n\n\n\n\n\n\nTip 6.3: Recommended Git workflow\n\n\n\n\nMake sure to be in the main branch of your project / repository.\nCreate a new branch, when you want to do some changes.\nDo and save the changes in your current repository.\nStage and commit the changes in your repository in a meaningful way.\n\nRepeat steps 3 and 4 until you think you have finished your work on the topic you opened the branch for.\n\nGo back to your main branch\nMerge the branch you created in Step 2 into your main branch\nWhen your main branch is updated, delete the branch you created in Step 2. Thus, you keep your repository tidy and clean.\n\nYou can work on different branches simultaneously for different topics. Thus, when you have not finished your work on a branch, but need the help of another person to do so, you can create another branch to start working on that branch on another topic.\n\n\nTip 6.3 shows you a nice workflow with git. This workflow emphasizes the work on different branches, while the main branch is only touched for creating and merging branches. This is why this workflow is called branch-based workflow. However, there is much more potential in working with Git when you work collaboratively on a project on a remote server as GitHub (Section 6.7). When you are wondering how to apply a workflow with Git in the context of remote repositories, we recommend this workflow displayed in the version control book (Wittkuhn and Pagenstedt 2024).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html#sec-outlook",
    "href": "chapters/git-crashcourse.html#sec-outlook",
    "title": "6  Git crashcourse",
    "section": "6.7 Outlook: Remote repositories",
    "text": "6.7 Outlook: Remote repositories\nThis chapter introduced Git to you as software that makes it possible to track your changes of your research project, take snapshots of it, and go back to any given snapshot you want. However, Git is also very powerful when it comes to collaborative work. Think of Figure 6.2. A researcher and a supervisor work collaboratively on a manuscript. Opposed to the time consuming way displayed in Figure 6.2, remote repositories can make things easier. Thus, process-based reproducibility errors can also be reduced in collaborative settings.\nThe possibility to make your repositories available remotely makes Git and online platforms such as GitHub very valuable for collaboration. GitHub is often referred to as it is the most popular platform and as a student you can get a free pro-account. This allows you to transfer your local repositories to online platforms, where not only you can make use of features to better structure your project and workflow but most importantly your collaborators can easily access the repository.\nCollaborators can simultaneously work on the same file in different or the same branches on their local repositories and once done, both can “upload”, or push their versions to the remote repository. On these online platforms such as GitHub, you can easily comment on the changes and merge them into other branches. Other collaborators can easily “download”, or pull these other versions to their own local repository.\nAnother advantage is that you can easily make your repository accessible to others. In a publication, you can refer to your remote repository for easy access to not only your repository but also your version history. This can make it easier to follow your work and train of thought.\nYou can also use this to simply optimize your own workflow and have a backup that’s independent of your local computer and can be accessed from anywhere. Repositories don’t need to be public to to collaborated on, you can also keep them private and specifically invite your other contributors to them.\nAdvantages of using remote repositories:\n1. Collaboration\n2. Easy publishing/sharing of your work\n3. Backup\n4. Workflow optimization\nIf you want to learn more about using remote repositories and connecting your local repository to a remote one, check out The Version Control Book-Remotes: Introduction. You can also have a look at The Turing Way for how to begin using GitHub.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html#acknowledgments",
    "href": "chapters/git-crashcourse.html#acknowledgments",
    "title": "6  Git crashcourse",
    "section": "6.8 Acknowledgments",
    "text": "6.8 Acknowledgments\nThis chapter was heavily informed by The Version Control Book and The Turing Way.\n\n\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.\n\n\nWittkuhn, Lennart, and Konrad Pagenstedt. 2024. Version Control Book. ZFDM Repository. https://doi.org/10.25592/uhhfdm.14149.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/git-crashcourse.html#footnotes",
    "href": "chapters/git-crashcourse.html#footnotes",
    "title": "6  Git crashcourse",
    "section": "",
    "text": "💡 Tip: How to set up an R-project is explained in the Good coding practices chapter.↩︎\nTo the best of our knowledge, no graphical button exists for these cases. Thus, it requires the use of the command line.↩︎",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git crashcourse</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html",
    "href": "chapters/good-coding-practices.html",
    "title": "7  Good Coding Practices",
    "section": "",
    "text": "7.1 R projects\nAs a researcher (and as a student), you work on different projects simultaneously. You have different research projects and teaching parts that you need to cover in your job. You attend different courses and give presentations and perform data analyses in these seminars and lectures. As you learned in the previous chapter about project structure, it makes sense to set up your files and folders in a particular research project folder.\nOutput\n\nprojects/\n├── version-control-book\n├── reproducibility-book\n├── grant_neuroscience_horizon\n├── grant_neuroscience_dfg\nWe highly recommend to use specific R-projects for each project, respectively. This will become clear throughout this chapter and the next chapter about renv.\nTo create an R-project, follow these steps:\nDepending on your situation, it makes sense to either create a new directory or turn an existing folder into an R project.\nWhen you are at the beginning of your project and have not set up a project structure yet, it makes sense to create a new directory.\nMake sure that, in this case, your directory name aligns well with your project.\nWhen you have already set up a project structure, it makes sense to turn your project folder into an R project. Make sure that, in this case, your project folder is the folder you turn into an R project.\nAfter you have created your R project, it is time to take a closer look at your R scripts containing the code for your projects.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#sec-rproject",
    "href": "chapters/good-coding-practices.html#sec-rproject",
    "title": "7  Good Coding Practices",
    "section": "",
    "text": "Open RStudio.\nClick on the blue  cube with a  in it and a green plus  on the outside.\nDecide whether you want to create a new directory or an existing directory.\n\n\n\n New directory Existing directory\n\n\nClick on New Directory, then New Project, and type in your directory name.\nMake sure that your project is in the correct place in your folder system.\nAt this point, it does not matter whether you want to create a Git repository and/or use renv with this project.\nIn future chapters, you will learn the advantages of using Git and renv.\nWhen you click on Create Project, your R project will be created.\nYou will see that R has created a folder named after your directory and that one file, directory-name.Rproj, is in this folder.\n\n\nClick on Existing Directory and make sure which folder you want to turn into an R project.\nWhen you click on Create Project, your R project will be created. You will see that R has placed a file in your chosen folder called directory-name.Rproj.\n\n\n\n\n\n\n\n\n\nWhat is an .Rproj-file?\n\n\n\nThe .Rproj file contains settings for all files associated with your specific R project.\nIt is automatically created when you set up an R project. By double-clicking on the file, you can open the project in RStudio.\nIt is not recommended to modify this file manually.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#comments",
    "href": "chapters/good-coding-practices.html#comments",
    "title": "7  Good Coding Practices",
    "section": "7.2 Comments",
    "text": "7.2 Comments\nComments are probably the most important part of your scripts (but also see the discussion in Tip 7.1). Whenever you write a # in your R-script, all code after that # will be identified as comment and therefore not be executed as code. Thus, if you put a # at the beginning of a line, the whole line will be identified as comment. Here are some thoughts about comments by Rennie (2024):\n\n\n\n\n\n\nAdding comments\n\n\n\n\nAdd comments using a # in R (in a separate line)\nComments don’t need to explain what your code does\nComments should explain why you did it\n\n\n\nYou can use # not only for comments but also for creating sections and subsections in your R-script. To do so, you must start a line with at least one hash # and put at least 4 hyphens after your comment. The number of hashes you use at the beginning determines the level of section.\n\n\n\nCode\n\n# Section 1 ----\n\n## Subsection 1.1 ----\n\n## Sebsection 1.2 ----\n\n# Section 2 ----\n\n\n\n\n\n\n\n\nTip 7.1: Discussion: Pros and cons of comments\n\n\n\n\n\nComments in code are useful because they help explain complex logic, provide context for why certain decisions were made, and assist future developers in understanding the code faster.\nHowever, ideally, code should be written clearly enough that its purpose and functionality are apparent without the need for excessive comments. Well-structured, self-explanatory code enhances readability and reduces maintenance.\nOn the other hand, beginners often find comments valuable, even in well-written code, as they can serve as a learning tool, guiding them through unfamiliar concepts and helping them understand the underlying logic.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#sec-file-paths",
    "href": "chapters/good-coding-practices.html#sec-file-paths",
    "title": "7  Good Coding Practices",
    "section": "7.3 File paths",
    "text": "7.3 File paths\nWhenever you are conducting research, you need to analyze some form of data. This data is typically stored in one or more files. Therefore, you need to read the data into your script. To do so, you must refer to the files you want to read. This is where the first advantage of setting up a dedicated R project for your research becomes apparent.\nYou can read data or code into your R environment by referring to your files using absolute paths, relative paths, and here::here().\n\n7.3.1 Absolute paths\nUsing an absolute path means referring to your file by specifying the entire folder structure on your computer:\n\n\n\nCode\n\ndata &lt;- read_csv(\"/Users/my-user-name/Documents/projects/my-project/data/data-raw.csv\")\n\n\nUsing absolute file paths is not recommended for computational reproducibility.\nA collaborator or interested researcher who downloads your scripts and wants to reproduce your analysis would need to adjust these paths before the scripts can run correctly.\n\n\n\nCode\n\ndata &lt;- read_csv(\"/Users/user-name-b/Desktop/work/research/my-project/data/data-raw.csv\")\n\n\n\n\n7.3.2 Relative paths\nA relative file path starts from your current working directory and appends the relative path.\nYou can check your current working directory in R by using the getwd() command in the R Console.\n\n\n\nR Console\n\n&gt; getwd()\n[1] \"Users/my-user-name/my-project\"\n\n\nBy default, the working directory in an R project is the project folder, which in this example is called my-project.\nYou can then use a relative file path from that folder to read your data.\nThe file path should start after the working directory:\n\n\n\nCode\n\ndata &lt;- read_csv(\"data/data-raw.csv\")\n\n\nThus, all relative paths to the files in an R project remain the same, regardless of who wants to work with the project. However, this does not hold true for scripts changing the working directory using the setwd() command.\n\nRelative file path does workRelative file path does not work\n\n\n\n\n\nConsole\n\n&gt; getwd()\n[1] \"Users/my-user-name/my-project\"\n&gt; file.edit(\"script/script01.R\")\n\n\n\n\n\n\n\nConsole\n\n&gt; setwd(\"script\")\n&gt; getwd()\n[1] \"Users/my-user-name/my-project/script\"\n&gt; file.edit(\"script/script01.R\")\n\n\n\n\n\n\n\n7.3.3 The here package\nA way to avoid confusion about which file paths to use is the here package (Müller 2020). The here() function works regardless of your current working directory.\nYou can install the here package by typing:\n\n\n\nCode\n\ninstall.packages(\"here\")\n\n\nWith here::here(), it is possible to refer to file paths regardless of your working directory. here() uses the top-level directory of a project to build the paths. It recognizes special files (e.g., .Rproj) and infers the project folder. Using here(), referencing file paths will always follow the same project structure regardless of the file you are referencing.\n\n\n\n\n\n\nExample\n\n\n\n\n\nhere() function works regardless of the current working directory. This example demonstrates that the here package uses the same path for running the script script01.R lying in the folder scripts which, in turn, constitutes a subfolder of code.\n\nNo change in working directoryChange in working directory\n\n\n\n\n\nConsole\n\ngetwd()\n[1] \"/Users/my-user-name/my-project\"\n&gt; here()\n[1] \"/Users/my-user-name/my-project\"\n&gt; source(here(\"code\", \"scripts\", \"script01.R\"))\n\n\n\n\n\n\n\nConsole\n\ngetwd()\n[1] \"/Users/my-user-name/my-project\"\nsetwd(\"code\")\ngetwd()\n[1] \"/Users/my-user-name/my-project/code\"\n&gt; here()\n[1] \"/Users/my-user-name/my-project\"\n&gt; source(here(\"code\", \"scripts\", \"script01.R\"))\n\n\n\n\n\n\n\n\nAnother benefit of using here() is enhanced readability because the paths always start at the project directory. Using relative paths would require the reader to consider the current working directory and how certain files are relatively located to it. Furthermore, here() remains unaffected by differences between operating systems when separating files with characters and commas.\n\n\n\n\n\n\nPath differences between operating systems\n\n\n\n\n\nmacOS and Linux use a slash / for path separators, while Windows uses a backslash \\. In R, \\ is an escape operator, causing R to misinterpret Windows backslashes \\ when used as path separators. On Windows, using \\\\ or / is necessary to handle path separators correctly.\nA benefit of here() is that paths can be specified within \"\" and separated by commas. Depending on the operating system, here() applies the correct path separator automatically.\n\n\n\nCode\n\nsource(here(\"folder\", \"subfolder\", \"subsubfolder\", \"file.R\"))\n\n\n\n\n\nIn summary, we recommend using the here::here() function because it is most robust against different paths. Relative file paths can also work if the working directory does not change in one of the project scripts and only / are used for path specifications. We recommend to never use absolute file paths, since they are a hurdle to computational reproducibility.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#sec-codestyle",
    "href": "chapters/good-coding-practices.html#sec-codestyle",
    "title": "7  Good Coding Practices",
    "section": "7.4 Code Style",
    "text": "7.4 Code Style\n\n“Good coding style is like correct punctuation: you can manage without it, butitsuremakethingseasiertoread” – Wickham, Çetinkaya-Rundel, and Grolemund (2023)\n\nOne important aspect that fosters understandability of code is the code style. In this section, we will present the tidyverse-codestyle (Wickham, Çetinkaya-Rundel, and Grolemund 2023). The Tidyverse is a collection of R packages particularly useful for data wrangling, manipulation and visualization. All packages share an underlying design philosophy, grammar, and data structures.\nIn psychology, the grammar of the tidyverse is widely used for data wrangling. In this section, we will provide a brief introduction to code style.\n\n7.4.1 Names\nNot only should files and folders be named well (see chapter on naming things), but the same applies to variable and function names in scripts. Variable and function names should only consist of lowercase letters, numbers, and underscores (_). It is better to use descriptive, longer names rather than short abbreviations that you may not understand in the future.\n\n\n\n\n\nStrive for\n\nshort_flights &lt;- flights |&gt;\n  filter(air_time &lt; 60)\n\n\n\n\n\n\n\n\nAvoid\n\nSHORTFLIGHTS &lt;- flights |&gt;\n  filter(air_time &lt; 60)\n\n\n\n\n\n\n7.4.2 Spaces\nPut spaces around mathematical operators (except ^) and around the assignment operator (&lt;-). Do not put spaces around parentheses when using functions. Put a space after a comma, as you would in standard English.\n\n\n\n\n\nStrive for\n\nmean(x, na.rm = TRUE)\n\n\n\n\n\n\n\n\nAvoid\n\nmean (x ,na.rm=TRUE)\n\n\n\n\n\n\n7.4.3 Pipes\nThe pipe (either |&gt; or %&gt;%) is a useful operator for connecting subsequent operations in your code. The pipe takes everything to the left of it and uses it as the first argument to the function on the right side.\n\n\n\n\n\nWithout pipe\n\nsum(c(1:4))\n\n\n\n\n\n\n\n\nWith pipe\n\nc(1:4) |&gt; sum()\n\n\n\n\nThe pipe is particularly useful when you chain many functions together. Therefore, use |&gt; at the end of a line and add a space before it. The complete sequence of functions connected by a pipe is also called a pipeline.\n\n\n\n\n\nStrive for\n\n1data |&gt;\n2  select(N, gender) |&gt;\n3  filter(\n    gender == \"male\" |\n    gender == \"female\"\n  ) |&gt;\n4  group_by(gender) |&gt;\n5  summarise(\n    mean = mean(N),\n    median = md(N)\n  )\n\n\n\n1\n\nTake the data and then\n\n2\n\nSelect the variables N and gender and then\n\n3\n\nFilter all observations where the variable gender either contains the value male or female and then\n\n4\n\nGroup the dataset by the variable gender and then\n\n5\n\nSummarize your datasets by calculating the mean and median for the variable N for each group.\n\n\n\n\n\n\n\n\n\n\nAvoid\n\nsummarise(group_by(filter(select(data, N, gender), gender == \"male\" | gender == \"female\"), gender), mean = mean(N))\n\n\n\n\nThe code displayed above is much easier to read and understand for your future self and other researchers, thereby increasing the likelihood of reproducibility. Translated into plain English, the pipe represents an “and then”:\n\n\n\n\n\n\nDifference between %&gt;% and |&gt;\n\n\n\n\n\nIn basic code, %&gt;% and |&gt; behave the same in the simple cases we cover here. In general, %&gt;% has some advantages when you want to code more complex cases. If you are interested when it matters if you either use %&gt;%or |&gt;, we recommend this resource.\n\n%&gt;%|&gt;\n\n\nThe %&gt;% pipe was introduced in the context of the tidyverse. It comes with the package magrittr and con only be used when this package is installed and loaded.\n\n\n\nCode\n\ninstall.packages(\"magrittr\")\nlibrary(magrittr)\n\n\nHowever, you can also use it, when you load another package from the tidyverse such as dplyr. This is because dplyr imports magrittr when it is loaded.\n\n\nThe |&gt; pipe comes with the basic R. To use |&gt; in R, you have to go to Tools &gt; Global Options &gt; Code and tick the box Use native pipe operator, |&gt; (repquires R 4.1+).\n\n\n\n\n\n\n\n\n7.4.4 Line breaks\nIf a function requires you to name arguments (as with summarise()), put each argument on a new line. If a function does not require you to name arguments (as with group_by()), keep your code on one line unless it extends beyond the width of a line. In that case, put each argument on its own line.\nWhen you start a new line after using |&gt; or a function like summarise(), indent the new line by two spaces (if not already done automatically). If you are putting each argument on a separate line, also indent the new line by two spaces. Make sure that the closing parenthesis ) is on its own line and not indented. Thus, the closing parenthesis should align with the horizontal position of the function you are using.\n\n\n\n\n\nStrive for\n\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(\n      x = arr_delay,\n      na.rm = TRUE\n    ),\n    n = n()\n  )\n\n\n\n\n\n\n\n\nAvoid\n\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n             delay = mean(arr_delay, na.rm = TRUE), \n             n = n()\n           )\n\n\n\n\n\nAvoid\n\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n  delay = mean(arr_delay, na.rm = TRUE), \n  n = n()\n  )\n\n\n\n\n\n\n7.4.5 Evaluate your code style: Linting\nAfter learning the tidyverse coding style, you can check your code for any deviations from that style.\nThis process is called “linting” and is comparable to a program that checks for spelling errors.\nThe lintr package (Hester et al. 2024) can perform this task by analyzing your code for potential issues and deviations from the recommended coding style.\n\nstylistic issues (e.g. x&lt;-3 vs. x &lt;- 3)\ncommon errors (e.g. mean(x, na.rm = T, na.rm = F))\nmissing packages\n…\n\n\n\n\n\n\n\nCaution\n\n\n\nHowever, note that lintr cannot check whether your code runs correctly!\n\n\n\n\n\n\n\n\nExample of lintr\n\n\n\n\n\nSuppose you have script called test-script.R in the folder scripts of your research projects. Your script looks as follows:\n\n\n\nScript\n\n# Test Script\n\ndf &lt;- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)\n\n\nAfter you installed and loaded the package lintr, run: lintr::lint(\"scripts/test-script.R\") in your R-console:\n\n\n\nCode\n\ninstall.packages(\"lintr\")\nlibrary(lintr)\nlintr::lint(\"scripts/test-script.R\")\n\n\nNext to your Console, a new tab will open called Markers, displaying all syntax messages lintr found in your script.\n\n\n\nMarkers\n\nLine 3 [commas_linter] Commas should always have a space after.\nLine 3 [commas_linter] Commas should always have a space after.\nLine 3 [commas_linter] Commas should always have a space after.\nLine 3 [commas_linter] Commas should always have a space after.\nLine 3 [commas_linter] Commas should always have a space after.\n\n\nIn test-script.R, lintr wants us to separate the numbers 1 to 6 by spaces after commas. For every missing comma, lintr displays a separate error message. After adding the spaces, saving the script, and running lintr::lint(\"scripts/test-script.R\") again, no error messages are displayed in the Markers tab.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#sec-tidydata",
    "href": "chapters/good-coding-practices.html#sec-tidydata",
    "title": "7  Good Coding Practices",
    "section": "7.5 Tidy Data",
    "text": "7.5 Tidy Data\n\n\n\n\n\n\nFigure 7.1: “Illustration from the Openscapes blog Tidy Data for reproducibility efficiency and collaboration” by Julia Lowndes and Allison Horst (License: CC-BY 4.0; reused without modifications)\n\n\n\nWhen working with datasets, you will likely not be able to directly conduct your data analysis (e.g., t-tests, ANOVAs, GLMs). In fact, most of the time, you will spend more time organizing your data than running your analysis. A helpful concept is tidy data, which is a common guideline for organizing datasets. Tidy data is closely related to the principles of the tidyverse introduced in Section 7.4. Following tidy data guidelines will help you run analyses and get the most out of your data.\n\n\n\n\n\n\nTidy Data\n\n\n\nTidy datasets follow three basic rules:\n\nEach variable is a column, and each column is a variable.\nEach observation is a row, and each row is an observation.\nEach value is a cell, and each cell contains a value.\n\n\n\n\n\n\n\n\n\nFigure 7.2: “Tidy Data” by Hadley Wickham and Mine Çetinkaya-Rundel and Garret Grolemund (License: CC BY-NC-ND 3.0 US; reused without modifications)\n\n\n\nThe journey from raw to tidy data can be long and frustrating. This book cannot provide a full overview of data wrangling and manipulation. However, if you are interested in learning functions for data manipulation, we recommend studying the dplyr package and its documentation, as well as the tidyr package and its documentation. From our experience, using and sharing code written in the tidyverse style fosters better understanding of the code, thereby enhancing computational reproducibility.\n\n7.5.1 Data structures\nData can be structured in different ways. When your data is tidy, you may still encounter wide or long formats. The long format is usually applied for data with repeated measurements (e.g. when you collect data over multiple sessions). As a rule of thumb, you can remember this: Data structured in a long format usually contains repetitive values in the first column of the dataset. Data structured in a wide format usually contains non-repetitive values in the first column of the dataset.\n\n Wide format Long format\n\n\n\n\n# A tibble: 3 × 3\n  participant congruent incongruent\n        &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1           1       560         720\n2           2       623         799\n3           3       547         812\n\n\n\n\n\n\n# A tibble: 6 × 3\n  participant congruency  reaction_time\n        &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;\n1           1 congruent             560\n2           1 incongruent           720\n3           2 congruent             623\n4           2 incongruent           799\n5           3 congruent             547\n6           3 incongruent           812\n\n\n\n\n\nHowever, this rule of thumb does not always apply, for example when data is rearranged.\n\n\n[1] \"Data in long format\"\n\n\n# A tibble: 6 × 3\n  reaction_time congruency  participant\n          &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n1           560 congruent             1\n2           720 incongruent           1\n3           623 congruent             2\n4           799 incongruent           2\n5           547 congruent             3\n6           812 incongruent           3\n\n\nAnother perspective on wide vs. long data comes from the context of the data. In research, a common question is how variable A influences variable B. Variable B is dependent on variable A, making variable B the dependent variable (DV) and variable A the independent variable (IV).\nIn the wide data format, the names of the factor levels of the IV are usually column names, while the DV is displayed as the values across these cells. In contrast, in the long data format, the names of the factor levels of the IV are typically values in the column of the IV. The name of the IV becomes the column name, rather than the level of the IV. Simultaneously, the DV is displayed in one column with the name of the DV as the column name and the corresponding values in that column.\n\n\n7.5.2 Changing the data structure\nDepending on which R functions you want to use or other reasons, you may need to or want to change your data structure from wide to long or vice versa. An easy way to do this is by using pivot_wider() and pivot_longer() from the tidyr package.\n\n7.5.2.1 pivot_longer()\npivot_longer() takes your dataset and makes it longer. It takes certain columns and places their names as values into a new column. Additionally, it combines the values of these columns into a single column.\n\n\n\nCode\n\nlibrary(tidyr)\n1data_wide |&gt;\n2  pivot_longer(\n3    cols = c(\"congruent\", \"incongruent\"),\n4    names_to = \"congruency\",\n5    values_to = \"reaction_time\"\n  )\n\n\n\n1\n\nTake the dataset data_wide, then\n\n\n2\n\nApply the function pivot_longer() to the data by\n\n\n3\n\nSpecifying the columns that should be transformed into a long format,\n\n\n4\n\nNaming the new column to hold the previous column names, and\n\n\n5\n\nNaming the new column to hold the values of the previous columns.\n\n\n\n\n# A tibble: 6 × 3\n  participant congruency  reaction_time\n        &lt;int&gt; &lt;chr&gt;               &lt;dbl&gt;\n1           1 congruent             560\n2           1 incongruent           720\n3           2 congruent             623\n4           2 incongruent           799\n5           3 congruent             547\n6           3 incongruent           812\n\n\n\n\n7.5.2.2 pivot_wider()\npivot_wider() takes your dataset and makes it wider. It takes the names of a certain column and changes them to new column names. Further, it takes the values of a second column and puts them across the new columns to their corresponding names.\n\n\n\nCode\n\n1data_long |&gt;\n2  pivot_wider(\n3    names_from = \"congruency\",\n4    values_from = \"reaction_time\"\n  ) |&gt;\n  print()\n\n\n\n1\n\nTake the dataset data_long,\n\n\n2\n\nApply the function pivot_wider() to the data by\n\n\n3\n\nSpecifying the column name from which to create the new column names, and\n\n\n4\n\nSpecifying the column name from which to take the values for the new columns.\n\n\n\n\n# A tibble: 3 × 3\n  participant congruent incongruent\n        &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1           1       560         720\n2           2       623         799\n3           3       547         812",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#defensive-programming",
    "href": "chapters/good-coding-practices.html#defensive-programming",
    "title": "7  Good Coding Practices",
    "section": "7.6 Defensive programming",
    "text": "7.6 Defensive programming\nWhenever you write code for data analysis or any other purpose, it is useful to validate what you are doing. This is also known as defensive programming. “Defensive” in this context means cautious. Here are some potential benefits of validating your code:\n\nEarly error detection\n\nCode clarity\n\nProtection against invalid input\n\nMonitoring data quality\n\nImproved documentation\n\nImproved error handling\n\n\n7.6.1 The assertr package and it’s function verify()\nThe assertr package helps you when you start testing your code. Once you begin adopting the tidyverse coding style, the function verify() will be easy to apply in your code. verify() can be seamlessly integrated into a code pipeline.\nThe verify() function takes a data frame (which is the first argument of the function and provided by the |&gt; operator) and a logical expression. Then, the expression is evaluated in the context of the data frame. When the expression is TRUE, no error occurs and the pipe goes on. When the expression is FALSE, verify will raise an error that terminates any further processing of the pipeline (Fischetti 2023).\n\nVerification passedVerification failed\n\n\nIn this example, a dataframe will only be printed, if all values in the column reaction_time are higher than 200. This holds true for data_long, but not for data_long_2. data_long_2 has one value (24) violating the verify expression.\n\n\n\nCode\n\nlibrary(assertr)\n\n# verify if reaction time is longer than 200ms\ndata_long |&gt;\n  verify(reaction_time &gt; 200) |&gt;\n  print()\n\n\n# A tibble: 6 × 3\n  participant congruency  reaction_time\n        &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;\n1           1 congruent             560\n2           1 incongruent           720\n3           2 congruent             623\n4           2 incongruent           799\n5           3 congruent             547\n6           3 incongruent           812\n\n\n\n\nIn this example, a dataframe will only be printed, if all values in the column reaction_time are higher than 200. This holds true for data_long, but not for data_long_2. data_long_2 has one value (24) violating the verify expression.\n\n\n\nCode\n\ndata_long_2 &lt;- data_long\ndata_long_2[5,3] &lt;- 24\n\ndata_long_2 |&gt;\n  verify(reaction_time &gt; 200) |&gt;\n  print()\n\n\n\n\n\nConsole output\n\nverification [reaction_time &gt; 200] failed! (1 failure)\n\n    verb redux_fn           predicate column index value\n1 verify       NA reaction_time &lt; 200     NA     5    NA\n\nError: assertr stopped execution\n\n\n\n\n\n\n\n7.6.2 Further functions and packages\nThe verify() function provides an easy way to start validating your code within a tidyverse coding style. However, there are more functions from the assertr package that can be applied for defensive programming. Going through all of these functions exceeds the scope of this book. Therefore, we highly recommend reading the accompanying vignette by Tony Fischetti, the author of the assertr package.\nFurthermore, assertr is not the only  package dealing with defensive programming. assert, assertthat, and testthat are other powerful packages in this context. In general, code validation is not too popular in scientific practice. It is rather prevalent in software development contexts validating functions and whole scripts for specific purposes. These thorough testing processes extends the scope of computational reproducibility in our opinion. Thus, we recommend assertr::verify() as a good starting point for defensive programming in the context of computational reproducibility.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/good-coding-practices.html#acknowledgements-further-reading",
    "href": "chapters/good-coding-practices.html#acknowledgements-further-reading",
    "title": "7  Good Coding Practices",
    "section": "7.7 Acknowledgements & further reading",
    "text": "7.7 Acknowledgements & further reading\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\n\n\n\n\n\n\nResources\n\n\n\n\n(Rennie 2024)\n\n\n(Wickham, Çetinkaya-Rundel, and Grolemund 2023)\n\n\n\n\n\n\n\nFischetti, Tony. 2023. Assertr: Assertive Programming for r Analysis Pipelines. https://doi.org/10.32614/CRAN.package.assertr.\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. Lintr: A ’Linter’ for r Code. https://CRAN.R-project.org/package=lintr.\n\n\nMüller, Kirill. 2020. Here: A Simpler Way to Find Your Files. https://here.r-lib.org/.\n\n\nRennie, Nicola. 2024. “Writing Better r Code.” https://nrennie.rbind.io/training-better-r-code/.\n\n\nWickham, H., M. Çetinkaya-Rundel, and G. Grolemund. 2023. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media. https://r4ds.hadley.nz.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Good Coding Practices</span>"
    ]
  },
  {
    "objectID": "chapters/renv.html",
    "href": "chapters/renv.html",
    "title": "8  Robust Environments: {renv}",
    "section": "",
    "text": "8.1 Introduction\nNow a project is well-named including its files and folders. It is well-structured and follows a community standard as Psych-DS. It follows the FAIR principles. The code is written in the tidyverse-style. Is it reproducible? Well, it may be. Very likely, it is not. However, we have done a great job in organizing our research project. The previous chapters dealt with a possible architecture of a reproducible research project. But still, there are things to improve. The next chapter will deal with reproducible computational environments. For an introduction, read the example below:\nImagine you need to reproduce the results of a research article from 2019. The project structure is openly available at OSF or at Zenodo. You find a nice structure, run a script but then you get an error message in R like:\nOutput\n\nError in function_name(object[[i]], ...) : could not find function \"function_name\"\nR is telling you that it cannot find a function called function_name. A similar problem can be that only arguments of a function are not found. However, the script runs correctly at the device of the researcher writing the script. Thus, you are facing a research project that is only reproducible on the same device it was written on. A possible reason is that your computational environment differs from the environment of the other researcher. You might have installed different versions of R packages or of  itself.\nDifferent computational environments can hinder computational reproducibility. In the example above, the code cannot be executed. However, sometimes package updates do only change the calculation of a function or an argument. Thus, a different package version leads to different results even though the code runs correctly.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Robust Environments: `{renv}`</span>"
    ]
  },
  {
    "objectID": "chapters/renv.html#introduction",
    "href": "chapters/renv.html#introduction",
    "title": "8  Robust Environments: {renv}",
    "section": "",
    "text": "Computational environments\n\n\n\n\n\nComputational environments include everything associated with technical infrastructure and software for conducting data analyses and reproducing scientific results. This comprises operating systems (Apple, Windows, Linux), software versions (R 4.3.1, 4.4.1, 4.4.2, etc.), and different versions of packages (dplyr 0.8.0, 1.1.4). It is important to consider your computational environment when it comes to computational reproducibility. The longer the time interval between creation and reproduction of your code is, the more likely reproducibility is not possible because of different computational environments. Software progresses over time, which is good in general. However, different versions of software include that some functions will not work in future versions or will do different things. Thus, it is important to keep track of the computational environment during creation of code and analyses.\nThis done by so called Package Management Systems. Package Management Systems install and keep track of software and software versions, export files that specify these required software packages/versions and that can be shared with others (The Turing Way Community 2022). Thus, environments can be replicated, either manually or via the Package Management System. In this chapter, we will introduce the Package Mangament System {renv}.\n\n\n\n\n\n\n\n\n\n\nProblems of different computational environments\n\n\n\n\nscripts could stop running because of different functions or arguments\nscripts could run correctly but produce different results\n\n\n\n\n\n\n\n\n\nHow renv helps aligning computational environments\n\n\n\nWith renv…\n\npackage versions can be safed inside a research project\ncollaborators can easily load the same package versions independent of their device\nR projects become isolated, portable and reproducible (Ushey and Wickham 2024)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Robust Environments: `{renv}`</span>"
    ]
  },
  {
    "objectID": "chapters/renv.html#renv",
    "href": "chapters/renv.html#renv",
    "title": "8  Robust Environments: {renv}",
    "section": "8.2 renv",
    "text": "8.2 renv\nrenv is a package that cares about the different versions of your used packages. To get the most out of this chapter, we encourage you to create a new test project in RStudio where you can try out the functions that you are about to learn. To use renv as package dependency manager, you only need to install it, as every other package in .\n\n\n\nConsole\n\ninstall.packages(\"renv\")\n\n\n\n\n\n\n\n\nBenefits of renv\n\n\n\n\neasy documenting package versions\neasy restoring of older package versions \n\n\n\n\n8.2.1 renv-functions\nThe renv package is very powerful because it does a lot of useful things while only needing 4 (+1) functions. Before we start, it is helpful to disentangle a couple of terms. A library is a directory containing multiple packages. This is confusing because you load packages with the command library(package). The command does not load a library, but a package. Until now you install packages into your System library with install.packages(\"package\") and load these packages within this library with library(package). Packages in the system library are independent from your project. With renv, we will start to use project libraries. Thus, we will install and use packages to a library that meets the requirement for your specific projects. However, it might occur that you have to install the same packages multiple times when you want to use them across multiple projects.\n\n8.2.1.1 renv::init\nWhen you start using renv, we recommend you to set up an R-project before. If you do not know how to do that, see Section 7.1. With renv::init(), we initialize our reproducible, computational environment. With this command, a couple of files and folders are created.\n\n.Rprofile is a file that automatically runs every time you start your R-project. renv uses it to set up your project library. Thus, once you have turned on your project library, it remains active until you turn it off.\nrenv/library contains all the packages you are currently using. This is now your project library. With different libraries for different projects you have the benefit of isolation. When a package version changes in one project, it does not affect your other projects.\nThe lockfile renv.lock contains all the metadata of your packages to reinstall it on a new machine. It serves as documentation about which package and which version of the packages you use. It also displays the R version used in your particular project.\n\n\n\nClick here to view the full renv.lock file of this project.\n\n\n\n\nrenv.lock\n\n{\n  \"R\": {\n    \"Version\": \"4.4.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://packagemanager.posit.co/cran/latest\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"MASS\": {\n      \"Package\": \"MASS\",\n      \"Version\": \"7.3-61\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"graphics\",\n        \"methods\",\n        \"stats\",\n        \"utils\"\n      ],\n      \"Hash\": \"0cafd6f0500e5deba33be22c46bf6055\"\n    },\n    \"R6\": {\n      \"Package\": \"R6\",\n      \"Version\": \"2.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"470851b6d5d0ac559e9d01bb352b4021\"\n    },\n    \"assertr\": {\n      \"Package\": \"assertr\",\n      \"Version\": \"3.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"MASS\",\n        \"R\",\n        \"dplyr\",\n        \"methods\",\n        \"rlang\",\n        \"stats\",\n        \"utils\"\n      ],\n      \"Hash\": \"dd34511e88d11c95e80f8d9bb0606e79\"\n    },\n    \"backports\": {\n      \"Package\": \"backports\",\n      \"Version\": \"1.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"e1e1b9d75c37401117b636b7ae50827a\"\n    },\n    \"base64enc\": {\n      \"Package\": \"base64enc\",\n      \"Version\": \"0.1-3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"543776ae6848fde2f48ff3816d0628bc\"\n    },\n    \"bslib\": {\n      \"Package\": \"bslib\",\n      \"Version\": \"0.8.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"cachem\",\n        \"fastmap\",\n        \"grDevices\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"lifecycle\",\n        \"memoise\",\n        \"mime\",\n        \"rlang\",\n        \"sass\"\n      ],\n      \"Hash\": \"b299c6741ca9746fb227debcb0f9fb6c\"\n    },\n    \"cachem\": {\n      \"Package\": \"cachem\",\n      \"Version\": \"1.1.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"fastmap\",\n        \"rlang\"\n      ],\n      \"Hash\": \"cd9a672193789068eb5a2aad65a0dedf\"\n    },\n    \"callr\": {\n      \"Package\": \"callr\",\n      \"Version\": \"3.7.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"processx\",\n        \"utils\"\n      ],\n      \"Hash\": \"d7e13f49c19103ece9e58ad2d83a7354\"\n    },\n    \"cli\": {\n      \"Package\": \"cli\",\n      \"Version\": \"3.6.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"b21916dd77a27642b447374a5d30ecf3\"\n    },\n    \"codetools\": {\n      \"Package\": \"codetools\",\n      \"Version\": \"0.2-20\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"61e097f35917d342622f21cdc79c256e\"\n    },\n    \"cpp11\": {\n      \"Package\": \"cpp11\",\n      \"Version\": \"0.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"91570bba75d0c9d3f1040c835cee8fba\"\n    },\n    \"crayon\": {\n      \"Package\": \"crayon\",\n      \"Version\": \"1.5.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"grDevices\",\n        \"methods\",\n        \"utils\"\n      ],\n      \"Hash\": \"859d96e65ef198fd43e82b9628d593ef\"\n    },\n    \"cyclocomp\": {\n      \"Package\": \"cyclocomp\",\n      \"Version\": \"1.1.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"callr\",\n        \"crayon\",\n        \"desc\",\n        \"remotes\",\n        \"withr\"\n      ],\n      \"Hash\": \"cdc4a473222b0112d4df0bcfbed12d44\"\n    },\n    \"data.table\": {\n      \"Package\": \"data.table\",\n      \"Version\": \"1.16.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"2e00b378fc3be69c865120d9f313039a\"\n    },\n    \"desc\": {\n      \"Package\": \"desc\",\n      \"Version\": \"1.4.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"cli\",\n        \"utils\"\n      ],\n      \"Hash\": \"99b79fcbd6c4d1ce087f5c5c758b384f\"\n    },\n    \"digest\": {\n      \"Package\": \"digest\",\n      \"Version\": \"0.6.37\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"33698c4b3127fc9f506654607fb73676\"\n    },\n    \"dplyr\": {\n      \"Package\": \"dplyr\",\n      \"Version\": \"1.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"cli\",\n        \"generics\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"methods\",\n        \"pillar\",\n        \"rlang\",\n        \"tibble\",\n        \"tidyselect\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"fedd9d00c2944ff00a0e2696ccf048ec\"\n    },\n    \"evaluate\": {\n      \"Package\": \"evaluate\",\n      \"Version\": \"1.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"3fd29944b231036ad67c3edb32e02201\"\n    },\n    \"fansi\": {\n      \"Package\": \"fansi\",\n      \"Version\": \"1.0.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"utils\"\n      ],\n      \"Hash\": \"962174cf2aeb5b9eea581522286a911f\"\n    },\n    \"fastmap\": {\n      \"Package\": \"fastmap\",\n      \"Version\": \"1.2.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"aa5e1cd11c2d15497494c5292d7ffcc8\"\n    },\n    \"fontawesome\": {\n      \"Package\": \"fontawesome\",\n      \"Version\": \"0.5.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"htmltools\",\n        \"rlang\"\n      ],\n      \"Hash\": \"bd1297f9b5b1fc1372d19e2c4cd82215\"\n    },\n    \"fs\": {\n      \"Package\": \"fs\",\n      \"Version\": \"1.6.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"7f48af39fa27711ea5fbd183b399920d\"\n    },\n    \"generics\": {\n      \"Package\": \"generics\",\n      \"Version\": \"0.1.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"15e9634c0fcd294799e9b2e929ed1b86\"\n    },\n    \"glue\": {\n      \"Package\": \"glue\",\n      \"Version\": \"1.8.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"5899f1eaa825580172bb56c08266f37c\"\n    },\n    \"here\": {\n      \"Package\": \"here\",\n      \"Version\": \"1.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"rprojroot\"\n      ],\n      \"Hash\": \"24b224366f9c2e7534d2344d10d59211\"\n    },\n    \"highr\": {\n      \"Package\": \"highr\",\n      \"Version\": \"0.11\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"xfun\"\n      ],\n      \"Hash\": \"d65ba49117ca223614f71b60d85b8ab7\"\n    },\n    \"htmltools\": {\n      \"Package\": \"htmltools\",\n      \"Version\": \"0.5.8.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"digest\",\n        \"fastmap\",\n        \"grDevices\",\n        \"rlang\",\n        \"utils\"\n      ],\n      \"Hash\": \"81d371a9cc60640e74e4ab6ac46dcedc\"\n    },\n    \"htmlwidgets\": {\n      \"Package\": \"htmlwidgets\",\n      \"Version\": \"1.6.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"grDevices\",\n        \"htmltools\",\n        \"jsonlite\",\n        \"knitr\",\n        \"rmarkdown\",\n        \"yaml\"\n      ],\n      \"Hash\": \"04291cc45198225444a397606810ac37\"\n    },\n    \"jquerylib\": {\n      \"Package\": \"jquerylib\",\n      \"Version\": \"0.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"htmltools\"\n      ],\n      \"Hash\": \"5aab57a3bd297eee1c1d862735972182\"\n    },\n    \"jsonlite\": {\n      \"Package\": \"jsonlite\",\n      \"Version\": \"1.8.9\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"methods\"\n      ],\n      \"Hash\": \"4e993b65c2c3ffbffce7bb3e2c6f832b\"\n    },\n    \"knitr\": {\n      \"Package\": \"knitr\",\n      \"Version\": \"1.49\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"evaluate\",\n        \"highr\",\n        \"methods\",\n        \"tools\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"9fcb189926d93c636dea94fbe4f44480\"\n    },\n    \"lazyeval\": {\n      \"Package\": \"lazyeval\",\n      \"Version\": \"0.2.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"d908914ae53b04d4c0c0fd72ecc35370\"\n    },\n    \"lifecycle\": {\n      \"Package\": \"lifecycle\",\n      \"Version\": \"1.0.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"rlang\"\n      ],\n      \"Hash\": \"b8552d117e1b808b09a832f589b79035\"\n    },\n    \"lintr\": {\n      \"Package\": \"lintr\",\n      \"Version\": \"3.1.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"backports\",\n        \"codetools\",\n        \"cyclocomp\",\n        \"digest\",\n        \"glue\",\n        \"knitr\",\n        \"rex\",\n        \"stats\",\n        \"utils\",\n        \"xml2\",\n        \"xmlparsedata\"\n      ],\n      \"Hash\": \"08cff46381a242d44c0d8dd0aabd9f71\"\n    },\n    \"magrittr\": {\n      \"Package\": \"magrittr\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"7ce2733a9826b3aeb1775d56fd305472\"\n    },\n    \"memoise\": {\n      \"Package\": \"memoise\",\n      \"Version\": \"2.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"cachem\",\n        \"rlang\"\n      ],\n      \"Hash\": \"e2817ccf4a065c5d9d7f2cfbe7c1d78c\"\n    },\n    \"mime\": {\n      \"Package\": \"mime\",\n      \"Version\": \"0.12\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"tools\"\n      ],\n      \"Hash\": \"18e9c28c1d3ca1560ce30658b22ce104\"\n    },\n    \"pillar\": {\n      \"Package\": \"pillar\",\n      \"Version\": \"1.9.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"cli\",\n        \"fansi\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\",\n        \"utf8\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"15da5a8412f317beeee6175fbc76f4bb\"\n    },\n    \"pkgconfig\": {\n      \"Package\": \"pkgconfig\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"01f28d4278f15c76cddbea05899c5d6f\"\n    },\n    \"processx\": {\n      \"Package\": \"processx\",\n      \"Version\": \"3.8.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"ps\",\n        \"utils\"\n      ],\n      \"Hash\": \"0c90a7d71988856bad2a2a45dd871bb9\"\n    },\n    \"ps\": {\n      \"Package\": \"ps\",\n      \"Version\": \"1.8.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"b4404b1de13758dea1c0484ad0d48563\"\n    },\n    \"purrr\": {\n      \"Package\": \"purrr\",\n      \"Version\": \"1.0.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"rlang\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"1cba04a4e9414bdefc9dcaa99649a8dc\"\n    },\n    \"rappdirs\": {\n      \"Package\": \"rappdirs\",\n      \"Version\": \"0.3.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"5e3c5dc0b071b21fa128676560dbe94d\"\n    },\n    \"remotes\": {\n      \"Package\": \"remotes\",\n      \"Version\": \"2.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\",\n        \"stats\",\n        \"tools\",\n        \"utils\"\n      ],\n      \"Hash\": \"3ee025083e66f18db6cf27b56e23e141\"\n    },\n    \"renv\": {\n      \"Package\": \"renv\",\n      \"Version\": \"1.0.11\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"47623f66b4e80b3b0587bc5d7b309888\"\n    },\n    \"rex\": {\n      \"Package\": \"rex\",\n      \"Version\": \"1.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"lazyeval\"\n      ],\n      \"Hash\": \"ae34cd56890607370665bee5bd17812f\"\n    },\n    \"rlang\": {\n      \"Package\": \"rlang\",\n      \"Version\": \"1.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"3eec01f8b1dee337674b2e34ab1f9bc1\"\n    },\n    \"rmarkdown\": {\n      \"Package\": \"rmarkdown\",\n      \"Version\": \"2.29\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"bslib\",\n        \"evaluate\",\n        \"fontawesome\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"knitr\",\n        \"methods\",\n        \"tinytex\",\n        \"tools\",\n        \"utils\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"df99277f63d01c34e95e3d2f06a79736\"\n    },\n    \"rprojroot\": {\n      \"Package\": \"rprojroot\",\n      \"Version\": \"2.0.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"4c8415e0ec1e29f3f4f6fc108bef0144\"\n    },\n    \"sass\": {\n      \"Package\": \"sass\",\n      \"Version\": \"0.4.9\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R6\",\n        \"fs\",\n        \"htmltools\",\n        \"rappdirs\",\n        \"rlang\"\n      ],\n      \"Hash\": \"d53dbfddf695303ea4ad66f86e99b95d\"\n    },\n    \"stringi\": {\n      \"Package\": \"stringi\",\n      \"Version\": \"1.8.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"stats\",\n        \"tools\",\n        \"utils\"\n      ],\n      \"Hash\": \"39e1144fd75428983dc3f63aa53dfa91\"\n    },\n    \"stringr\": {\n      \"Package\": \"stringr\",\n      \"Version\": \"1.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"rlang\",\n        \"stringi\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"960e2ae9e09656611e0b8214ad543207\"\n    },\n    \"tibble\": {\n      \"Package\": \"tibble\",\n      \"Version\": \"3.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"fansi\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"methods\",\n        \"pillar\",\n        \"pkgconfig\",\n        \"rlang\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"a84e2cc86d07289b3b6f5069df7a004c\"\n    },\n    \"tidyr\": {\n      \"Package\": \"tidyr\",\n      \"Version\": \"1.3.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"cpp11\",\n        \"dplyr\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"purrr\",\n        \"rlang\",\n        \"stringr\",\n        \"tibble\",\n        \"tidyselect\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"915fb7ce036c22a6a33b5a8adb712eb1\"\n    },\n    \"tidyselect\": {\n      \"Package\": \"tidyselect\",\n      \"Version\": \"1.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\",\n        \"vctrs\",\n        \"withr\"\n      ],\n      \"Hash\": \"829f27b9c4919c16b593794a6344d6c0\"\n    },\n    \"tinytex\": {\n      \"Package\": \"tinytex\",\n      \"Version\": \"0.54\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"xfun\"\n      ],\n      \"Hash\": \"3ec7e3ddcacc2d34a9046941222bf94d\"\n    },\n    \"utf8\": {\n      \"Package\": \"utf8\",\n      \"Version\": \"1.2.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"62b65c52671e6665f803ff02954446e9\"\n    },\n    \"vctrs\": {\n      \"Package\": \"vctrs\",\n      \"Version\": \"0.6.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\"\n      ],\n      \"Hash\": \"c03fa420630029418f7e6da3667aac4a\"\n    },\n    \"withr\": {\n      \"Package\": \"withr\",\n      \"Version\": \"3.0.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"graphics\"\n      ],\n      \"Hash\": \"cc2d62c76458d425210d1eb1478b30b4\"\n    },\n    \"wordcloud2\": {\n      \"Package\": \"wordcloud2\",\n      \"Version\": \"0.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"grDevices\",\n        \"graphics\",\n        \"htmlwidgets\"\n      ],\n      \"Hash\": \"10274bd096f5c2ad7471ea0eea0c1424\"\n    },\n    \"xfun\": {\n      \"Package\": \"xfun\",\n      \"Version\": \"0.49\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"stats\",\n        \"tools\"\n      ],\n      \"Hash\": \"8687398773806cfff9401a2feca96298\"\n    },\n    \"xml2\": {\n      \"Package\": \"xml2\",\n      \"Version\": \"1.3.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"methods\",\n        \"rlang\"\n      ],\n      \"Hash\": \"1d0336142f4cd25d8d23cd3ba7a8fb61\"\n    },\n    \"xmlparsedata\": {\n      \"Package\": \"xmlparsedata\",\n      \"Version\": \"1.0.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"45e4bf3c46476896e821fc0a408fb4fc\"\n    },\n    \"yaml\": {\n      \"Package\": \"yaml\",\n      \"Version\": \"2.3.10\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"51dab85c6c98e50a18d7551e9d49f76c\"\n    }\n  }\n}\n\n\n\nIn summary, we do not recommend to manually change the contents of the files and folders that belong to renv. Rather, the following R functions are good tools to manage your reproducible environments from the console.\n\n\n8.2.1.2 renv::install\nWith renv::install, we can install new packages to our project. Assume you need the package palmerpenguins in your project.\n\n\n\nConsole\n\nrenv::install(\"palmerpenguins\")\n\n\nrenv will download the package palmerpenguins. If you want to install packages with dependencies, renv will install these dependencies automatically. In your console you will be asked if you want to install the package to your project library. Type Y in to your console.\n\n\n\nOutput\n\n# Downloading packages -------------------------------------------------------\n- Downloading palmerpenguins from CRAN ...      OK [2.9 Mb in 1.8s]\nSuccessfully downloaded 1 package in 2.1 seconds.\n\nThe following package(s) will be installed:\n- palmerpenguins [0.1.1]\nThese packages will be installed into \"~/Documents/repro-book/renv/library/macos/R-4.4/aarch64-apple-darwin20\".\n\nDo you want to proceed? [Y/n]: \n\n\nAfter that, you should see something in your console similar to this:\n\n\n\nOutput\n\n# Installing packages --------------------------------------------------------\n- Installing palmerpenguins ...                 OK [installed binary and cached in 0.34s]\nSuccessfully installed 1 package in 0.42 seconds.\n\n\nNow you have installed the package palmerpenguins to your project library.\n\n\n\n\n\n\nWhat are dependencies?\n\n\n\n\n\nSome packages require other packages to be loaded. These other packages are called dependencies. Your primary package depends on these other packages to run correctly.\nThe package psychonetrics has a lot of packages. Install the package to see what happens.\n\n\n\nConsole\n\nrenv::install(\"psychonetrics\")\n\n\n\n\n\n\n\n8.2.1.3 renv::snapshot\nWhen you search in the lockfile for your new installed package palmerpenguins, you will not find it there. renv does not automatically saves the metadata of your installed packages in the lockfile. With renv::snapshot(), we can document the package versions we need in our project. Simply run the command in your Console\n\n\n\nConsole\n\nrenv::snapshot()\n\n\nIn your Console, you will see something like this:\n\n\n\nOutput\n\n- The lockfile is already up to date.\n\n\nrenv did not add the metadata about palmerpenguins to the lockfile. This is because renv checks if your package is really used somewhere in your project. The bare installation is not enough. This is to not unnecessarily overload the lockfile with packages that are not used in the project. The package has to be used and therefore loaded somewhere in the project. Create a script test_palmerpenguins.R, type library(palmerpenguins), and save it in your project. Then try the snapshot command again:\n\n\n\nConsole\n\nrenv::snapshot()\n\n\nYour console should have an output like this:\n\n\n\nOutput\n\nThe following package(s) will be updated in the lockfile:\n\n# CRAN -----------------------------------------------\n- palmerpenguins    [* -&gt; 0.1.1]\n\nDo you want to proceed? [Y/n]: \n\n\nAgain, type Y. Then, you should see an output like this:\n\n\n\nOutput\n\n- Lockfile written to \"path/to/your/project/folder/renv.lock\".\n\n\nWhen you open the lockfile, you will find the metadata of palmerpenguins there. renv::snapshot() is useful because you and your collaborators will be able to reconstruct your package versions. The reconstruction relies on the lockfile and renv::snapshot() will update your current packages used in your project.\n\n\n8.2.1.4 renv::restore\nSay you successfully built up a project library, installed packages to it and saved the metadata into your lockfile. Future you or other collaborators or researchers now want to reproduce your code and need to use the particular package versions. The collaborators found your project and code and downloaded it. They now want to install the particular package versions. To simplify this step, one can use the renv::restore() function.\n\n\n\nConsole\n\nrenv::restore()\n\n\nThen you should get an output like this:\n\n\n\nOutput\n\nThe following package(s) will be updated:\n\n# CRAN -----------------------------------------------------------------------\n- fontawesome    [0.5.2 -&gt; 0.5.3]\n- knitr          [1.48 -&gt; 1.49]\n- rmarkdown      [2.28 -&gt; 2.29]\n- tinytex        [0.53 -&gt; 0.54]\n- cyclocomp      [* -&gt; 1.1.1]\n- lazyeval       [* -&gt; 0.2.2]\n- lintr          [* -&gt; 3.1.2]\n- remotes        [* -&gt; 2.5.0]\n- rex            [* -&gt; 1.2.1]\n- xmlparsedata   [* -&gt; 1.0.5]\n\nDo you want to proceed? [Y/n]:\n\n\nType in Y and you should get an output similar to this:\n\n\n\nOutput\n\n# Downloading packages -------------------------------------------------------\n- Querying repositories for available binary packages ... Done!\n- Downloading rmarkdown from CRAN ...           OK [2.5 Mb in 1.2s]\n- Downloading fontawesome from CRAN ...         OK [1.3 Mb in 0.89s]\n- Downloading knitr from CRAN ...               OK [1.1 Mb in 1.1s]\n- Downloading tinytex from CRAN ...             OK [140.3 Kb in 0.68s]\nSuccessfully downloaded 4 packages in 6.4 seconds.\n\n# Installing packages --------------------------------------------------------\n- Installing fontawesome ...                    OK [installed binary and cached in 0.26s]\n- Installing knitr ...                          OK [installed binary and cached in 1.2s]\n- Installing tinytex ...                        OK [installed binary and cached in 0.24s]\n- Installing rmarkdown ...                      OK [installed binary and cached in 1.6s]\n- Installing remotes ...                        OK [linked from cache]\n- Installing cyclocomp ...                      OK [linked from cache]\n- Installing lazyeval ...                       OK [linked from cache]\n- Installing rex ...                            OK [linked from cache]\n- Installing xmlparsedata ...                   OK [linked from cache]\n- Installing lintr ...                          OK [linked from cache]\n\nThe following loaded package(s) have been updated:\n- knitr\nRestart your R session to use the new versions.\n\n\n\n\n8.2.1.5 renv::status\nYou can check the status of your dependency management by using renv::status().\n\n\n\nConsole\n\nrenv::status()\n\n\nIf everything is alright, you should get an output message similar to this:\n\n\n\nOutput\n\nNo issues found -- the project is in a consistent state.\n\n\nHowever, there can still arise some issues. You can see an example below\n\n\n\nOutput\n\nThe following package(s) are in an inconsistent state:\n\n package  installed recorded used\n ellipsis y         y        n   \n\nSee `?renv::status` for advice on resolving these issues.\n\n\nFortunately, the messages displayed by renv are very straightforward. It tells us to go to the helper page by running ?renv::status.\n\n\n\n\n\n\nRead the documentation of renv::status()\n\n\n\n\n\nYou can just run ?renv::status() in the Console to open the documentation of that function in the Help pane of RStudio. However, the documentation is also available at CRAN when you open the link below. Read the documentation carefully to extract the relevant information that applies to your case.\n https://cran.r-project.org/web/packages/renv/renv.pdf#page=56\n\n\n\n\n\nIn the helping page our case is well-described in the section Lockfile vs dependencies(). We can just run renv::snapshot to remove it from the lockfile. Thus, our lockfile does not contain the unused package ellipsis.\nNow you got an overview of the most important functions of the package {renv}. The next section will provide you with information on how to use renv in a workflow. However, if you still want to get to know the functions better, we recommend the video in the box below (Tip 8.1) by Rapp (2024).\n\n\n\n\n\n\nTip 8.1: Video explaining basic renv functions\n\n\n\n\n\nFor further information, see this video to increase your understanding of {renv}.\n\n\n\n\n\n\nVideo 8.1: “Robust R Code That Will Work Forever With {renv}”. The video by Rapp (2024) aims to display and explain common workflows when creating a reproducible environment using {renv}. License: not specified. Reused without modifications.\n\n\n\n\n\n\n\n\n\n8.2.2 renv-workflow\n\n\n\n\n\n\nFigure 8.1: “renv workflow” by Kevin Ushey and Hadley Wickham (License: MIT License; reused without modifications)\n\n\n\nIn Figure 8.1, you can see how the basic functions in renv work. You know the most important things now, but it sure can help to have a guideline.\n\n\n\n\n\n\nStep-by-step guide for renv\n\n\n\n\nCreate a reproducible environmentReproduce such an environment\n\n\n\nCreate an R project\nInstall renv \\(\\rightarrow\\) install.packages(\"renv\")\nInitialize reproducible environment \\(\\rightarrow\\) renv::init()\nCheck status \\(\\rightarrow\\) renv::status()\nUse help page from renv::status \\(\\rightarrow\\) ?renv::status()\nInstall packages to project library \\(\\rightarrow\\) renv::install()\nCode something that makes you happy, e.g. a wonderful plot\nSave your used packages into your lockfile \\(\\rightarrow\\) renv::snapshot()\n\n\n\n\nDownload the project folder e.g. from https://osf.io or https://zenodo.org\nOpen R project by clicking the .Rproj file\nCheck status \\(\\rightarrow\\) renv::status()\nUse help page from renv::status \\(\\rightarrow\\) ?renv::status()\nRestore the project library from the lockfile \\(\\rightarrow\\) renv::restore()\nRun the code written be past you or an other researcher",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Robust Environments: `{renv}`</span>"
    ]
  },
  {
    "objectID": "chapters/renv.html#limitations-of-renv",
    "href": "chapters/renv.html#limitations-of-renv",
    "title": "8  Robust Environments: {renv}",
    "section": "8.3 Limitations of renv",
    "text": "8.3 Limitations of renv\nAs you can see in the lockfile, renv tracks not only the package versions but also the R version. However, renv cannot solve reproducibility issues when it comes to different R versions. It is possible to deal with this problem installing the specific R version used in the project you want to reproduce. Another way is using docker. However, it requires more time and work to make a project reproducible. Further, the benefits of separate projects comes with a constraint. Possible bug fixes that are included in later versions of a package are not implemented in the project libraries. Nevertheless, we recommend renv as a valuable tool for increasing a project’s reproducibility.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Robust Environments: `{renv}`</span>"
    ]
  },
  {
    "objectID": "chapters/renv.html#references",
    "href": "chapters/renv.html#references",
    "title": "8  Robust Environments: {renv}",
    "section": "8.4 References",
    "text": "8.4 References\nWe would like to express our gratitude to the following resources which have been essential in shaping this chapter. We recommend these references for further reading and watching.\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nRapp (2024)\nRobust R Code that will work forever with {renv}\n\nNot specified\n\n\n\nUshey and Wickham (2024)\nrenv: Project Environments\n\nMIT\n\n\n\n\n\n\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nRapp, Albert. 2024. “Robust r Code That Will Work Forever with renv.” YouTube. https://www.youtube.com/watch?v=Oen9xhEh8PY.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.\n\n\nUshey, Kevin, and Hadley Wickham. 2024. Renv: Project Environments. https://rstudio.github.io/renv/.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Robust Environments: `{renv}`</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html",
    "href": "chapters/literate-programming.html",
    "title": "9  Literate Programming",
    "section": "",
    "text": "9.1 Introduction\nImagine you are writing a paper. You have learned a lot about reproducibility (even perhaps in this book), you like the idea, and you want to apply the standards that make your research more reproducible. You have a project structure according to your community standard, you use human and machine-readable names, you provide a lot of metadata, you track your analyses with Git, and you even set up a robust, reproducible environment for all the R packages you need for your analyses. You now want to start writing your paper, open e.g. MS Word, and start writing. At some point you write the Results section. Now you want to insert your results in your Word-Document. Some frustrating work begins, where you start to type the results of your analyses in Word. Further, you inserted the figures that visualize your findings. It took a while, but finally everything is included in that Word document – congratulations.\nHappily you ask some colleagues and your supervisor to review the paper. They make some comments about your theoretical background and also about - oh gosh - your results. You did forget to filter some cases in the beginning and now you have to rerun the analysis. No problem, you smoothly got the updated results, but then you realize that you have to insert the slightly different figures and results into your Word Document. All this effort of typing the results from your R code to Word has to be done again. This can happen many times during your research process. Not only by colleagues and supervisors, but also when you found out an error by yourself. Another possibility are reviewers, when you submitted a preprint to a journal. During this process, it is very likely that you mix up some results, e.g. writing the p value of your first hypothesis to your second hypothesis. Thus, transferring results from your statistic program to a text program is an opportunity for reproducibility errors. Not because you are dumb, it is because you are human. However, there is a solution to this problem - and it is called Literate Programming.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html#what-is-literate-programming",
    "href": "chapters/literate-programming.html#what-is-literate-programming",
    "title": "9  Literate Programming",
    "section": "9.2 What is literate programming?",
    "text": "9.2 What is literate programming?\nLiterate programming is a form of programming in which text and source code are in one document. It is based on the idea that a code should be easy and enjoyable to read and aimed at being understood by humans, which was called Literate Programming by Knuth (1984). Instead of writing code and later annotating it with comments, literate programming suggests to write a text in the order that a person would logically conceive it and include the code as it is explained in the text. Thus, in literate programming, text is used to make code understandable.  However, the concept of literate programming was extended to the idea that the text should not support the explanation for the code but rather the code can be an explanation of the document. Thus, one can write a whole paper and uses code directly in that document to support the claims made in that document. The code in these documents are stored in chunks (see Section 9.7.1) and are executable.\nLiterate programming allows for creating reproducible documents instead of just reproducible script as well as making for a smoother workflow, as there is no need for switching out old and new outputs in your documents when the code changed. As an example, when you write an article in a document using literate programming and insert a code chunk that creates a plot, this code chunk’s output (i.e. the plot) is part of your document and is always up to date with the script you’re running. Hence, whenever you have to do some changes in your plot or your analyses, the changes are directly updated in your paper. Thus, the paper becomes dynamic (Note 9.1). Moreover, literate programming can heavily reduce outcome-based reproducibility errors (Section 1.1.1).\n\n\n\n\n\n\nNote 9.1: Static vs. Dynamic documents\n\n\n\n\n\nOne can discriminate static and dynamic documents. Most documents are static, since they do not refer to underlying data or content. They are typically generated once and do rarely need updates.\nOn the other hand, dynamic documents are generated anew if some underlying data or content changes. They are often automatically recreated and use some kind of code to generate up-to-date content. A prominent example is the dashboard of the John Hopkins University that displayed data referring to the Covid-19 Pandemic. The dashboard was updated every week with new data from all over the world.\nIn a classical sense, research paper can be seen as static documents, since they will be rarely updated after they were published. However, since research paper are often reviewed and many changes must be done, one can view paper as dynamic documents before publication.\nExamples\n\n\n\nStatic documents\nDynamic documents\n\n\n\n\nworking agreement\nresearch paper\n\n\nbills\ndashboards\n\n\n\n\n\n\n\n\n\n\n\n\nLiterate programming benefits for reproducibility\n\n\n\n\nReduce outcome-based reproducibility errors\nSave time when updating your paper’s results section\nEnhance transparency, traceability, and reproducibility of your results",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html#what-is-quarto",
    "href": "chapters/literate-programming.html#what-is-quarto",
    "title": "9  Literate Programming",
    "section": "9.3 What is Quarto?",
    "text": "9.3 What is Quarto?\nQuarto is an open-source Publishing System. It allows you to do literate programming. It was created by the company Posit, which is responsible for RStudio and is based on RMarkdown. Quarto is well integrated in RStudio and comes already bundled with any version of RStudio from RStudio v2022.07.1 “Spotted Wakerobin” onward. In case you’re using an older version of RStudio, here are instructions on how to install Quarto. What Quarto does is, it can interpret and handle many programming languages (e.g. R and Python) as well as plain text and transforms it into standard output formats (e.g., Word-, PDF-, and .html-files, see Figure 9.1).\n\n\n\n\n\n\nFigure 9.1: This illustration shows schematically that one can have input in different languages and Quarto will produce different output formats. Artwork from “Hello, Quarto” keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst. Used under a CC-BY 4.0 license.\n\n\n\nWith Quarto, one is able to create (scientific) papers, but also websites, presentations or books. In fact, this book is written with Quarto. To do so, Quarto has its own file extension (.qmd). qmd stands for Quarto Markdown. We will get to the Markdown language in a second (Section 9.5). Everything you write in a Quarto file will then be rendered into a desired output file (e.g. .html, .pdf, .docx). As example, Figure 9.2 shows a Quarto document that contains human-readable text and a code chunk that will create a plot, as well as it’s rendered version below.\n\n\n\n\n\n\nFigure 9.2: On the left is a Quarto document in RStudio, containing a code chunk that creates a simple plot. On the right is the rendered version of the document, showing the text and the plot. Used under a CC-BY 4.0 license.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html#how-to-use-quarto",
    "href": "chapters/literate-programming.html#how-to-use-quarto",
    "title": "9  Literate Programming",
    "section": "9.4 How to use Quarto",
    "text": "9.4 How to use Quarto\nIn this book, we will focus on using Quarto in RStudio, but Quarto can also be used with other editors such as VSCode or Jupyter. To start using Quarto, you must create a Quarto document. To do so, head to RStudio and in the upper left corner select File &gt; New File &gt; Quarto Document…. This will open a box (see Figure 9.3) that prompts you to give your document a title, which will appear at the top of your document’s rendered version, as well as choosing the format that your output will be in. Either HTML, PDF or Word are possible by default. The standard output is HTML and you do not need to have anything else installed to create html documents. If you want to create PDF or Word Documents by Quarto, you need additional software. For PDF-files, LaTeX1 is required and for Word-files, MS Word is required.\nHTML files can also easily be turned into PDF files later on and the format is changeable. Depending on your project, there are other available format options as well. The metadata of title and format is stored in the so called YAML header at the top of your page. This is also where you can further customize some general features of your file, such as the author, a subtitle, the date or the style of your document (see Section 9.6). To create the Quarto document, choose your preferred output format, type in at least the title of the document, and click on Create in the prompt box.\n\n\n\n\n\n\nFigure 9.3: Prompt box that opens when intending to create a new Quarto document. Used under a CC-BY 4.0 license.\n\n\n\n\nTo get a preview of a Quarto file in RStudio, you can either use quarto preview in the command line or the Render button at the top of your document. This will show you how your rendered document will look like and if you check the Render on Save box at the top of the document, will update live as you save your changes. For an example, see Figure 9.2.\n\n9.4.1 Source and Visual Editor\nYou can use either the Source or Visual mode in RStudio to write and format your work. In the Source mode you use Markdown syntax to format your written work and in the Visual mode you use a User-Interface similar to how you would use in e.g., MS Word. You can switch between the two at any time. The changes made in the Visual mode will appear in the Source mode in Markdown as well. However, we strongly recommend you to use the Source mode rather than the Visual mode. This is because most Markdown Syntax is easier and faster to write than to use a Graphical User Interface. Nevertheless, in the Section about Markdown Syntax we give you instructions how to format your text in both editors. Take a look at the two different modes and the rendered version of the document below with some simple formatting options.\n\n\n\n\n\n\nFigure 9.4: On the left is the Source mode of the .qmd file and on the right the Visual formatting mode. Used under a CC-BY 4.0 license.\n\n\n\nNow, take a look at the rendered version of the document and how each of the formatting options plays out.\n\n\n\nA screenshot of the rendered version of a document to showcase some formatting options. Used under a CC-BY 4.0 license.\n\n\n\n\n\n\n\n\nTip 9.1: Enhance Quarto compatibility with Git\n\n\n\n\n\nWhen you make changes in a Quarto document and you track it with Git, we recommend you to write each sentence in a new line when using the Source Editor. This enhances the readability of the changes in Git you made in the Quarto document but does not change the output of the document (see Figure 9.5).\n\n\n\n\n\n\nFigure 9.5: The upper left corner displays text. Lines 6 to 8 contain a paragraph where each sentence is written in a new line. Line 10 contains a paragraph where all sentences are written in one line. The lower left corner displays the rendered html version of the quarto document. The right half shows the popup window of Git to commit changes. As one can see, it is easier to understand the changes that were made in line 8 compared to line 10.\n\n\n\n\n\n\n\n\n\n\n\n\nTip 9.2: Avoid changes when switching between Source and Visual Editor\n\n\n\n\n\nAssuming you follow Tip 9.1, and you write each sentence in a new line. When you use the Visual Editor, you are cannot directly control whether the sentences are in separate lines or not (compare Figure 9.5). However, you can specify that in the YAML header (see the code snippet below).\n\n\n\nYAML\n\n---\neditor:\n  markdown:\n    wrap: sentence\n---",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html#sec-markdown",
    "href": "chapters/literate-programming.html#sec-markdown",
    "title": "9  Literate Programming",
    "section": "9.5 Markdown",
    "text": "9.5 Markdown\nIn Quarto documents, Markdown is used as a syntax. In Markdown content and formatting are integrated with each other and not separate. This formatting is used in Quarto or on GitHub or on a smaller scale in WhatsApp or Reddit. This formatting is different to the so-called WYSIWYG (What you see is what you get) editors, like Word. There are some advantage over these more commonly known editors. Using an integrated approach to formatting and writing allows for faster writing, as there is no need to switch between the two. You just format as you type. Another advantage is compatibility between different text editors. Any program that uses Markdown will format a document written in it the exact same way. Another advantage is that Git can track the changes made to text written with Markdown, allowing for version control of your written work the same way as of your code.\nDisadvantages are that there are overall less formatting options as the intention is keep it simple and it can be difficult or unintuitive to insert tables and images.\nHave a look at the different formatting options available.\n\n9.5.1 Text formatting\n\nSource EditorVisual Editor\n\n\nWhen you want to format your text in the source editor, the markdown syntax is quite straightforward. For example, if you want to write italic words, you put a * around the words of interest. Table 9.1 displays how you can format your text in the most important styles.\n\n\n\n\n\n\n\n\n\n\nInput\nOutput\n\n\n\n\n*italics*, **bold**, ***bold and italics***\nitalics, bold, bold and italics\n\n\n[underlined text]{.underline}\nunderlined text\n\n\nsuperscript^2 / subscript~2~\nsuperscript2 / subscript2\n\n\n~~strikethrough~~\nstrikethrough\n\n\n`verbatim code`\nverbatim code\n\n\n\n\n\nTable 9.1: Different text formatting options in Markdown syntax. The Input column displays how to write the text in the source editor. The Output column displays how the text is then rendered.\n\n\n\n\nSources: RStudio - Markdown basics, Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto and Introduction to Quarto - Wittkuhn and Pagenstedt\n\n\n\nWhen you want to format your written text while being in the Visual Editor, you can do it by click and select. You can see a menu line at the top of the document (compare to Figure 9.6). In that line, you can just click on B to make your text bold or I to make it italic. There is also a button “Format”. If you click on that button, then a variety of formatting options appear. When you hover over “Text”, you see all the formatting options we also covered for the source editor.\n\n\n\n\n\n\nFigure 9.6: The red rectangle in the menu line covers the buttons for making the code bold or italic. The orange rectangle in the menu line indicates the “format” button to see a variety of text formatting options.\n\n\n\n\n\n\n\n\n\n\n\n\nHow to start a new page in docx and pdf files\n\n\n\n\n\nIf you want to start a new page in your document at a specific spot, e.g., to have your references on their own page, you can add a pagebreak. The pagebreak option does only make sense when you render your document to docx or pdf, since these files consist of multiple pages. However, this does not apply to html files, because you can just scroll down the content. To add a pagebreak, simply add it between your intended pages like below and a new page will start in the rendered document.\n\npage 1\n\n{{&lt; pagebreak &gt;}}\n\npage 2\n\n\n\n\n\n\n9.5.2 Headings\nFormatting headings in Markdown syntax is quite easy as well. Just put your heading in a new line, and put the number of # before that heading to indicate the heading level. The more #, the smaller the heading. You can also format your headings in the Visual Editor. However, it is faster in our experience to use the Source editor.\n\nSource EditorVisual Editor\n\n\n\n\n\n\n\nInput\n\n\n\n\nOutput\n\n\n\n\n\n\n\n\n# Header 1\n\n\n\n\nHeader 1\n\n\n\n\n\n\n## Header 2\n\n\n\n\nHeader 2\n\n\n\n\n\n\n### Header 3\n\n\n\n\nHeader 3\n\n\n\n\n\n\n#### Header 4\n\n\n\n\nHeader 4\n\n\n\n\n\n\n##### Header 5\n\n\n\n\nHeader 5\n\n\n\n\n\n\n###### Header 6\n\n\n\n\nHeader 6\n\n\n\n\n\n\nSources: RStudio - Markdown basics, Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto and Introduction to Quarto - Wittkuhn and Pagenstedt\n\n\n\nYou can also edit your headings in the menu line of the Visual Editor via click and select. Simply choose between normal text or your desired header level.\n\n\n\n\n\n\nFigure 9.7: This is where you can find the different header options in the Visual Editor.\n\n\n\n\n\n\n\n\n9.5.3 Lists\nThere are many different types of lists available in Markdown and they are very easy to implement in Source Mode. Take a look below at the different options and how they change when rendered.\n\nSource EditorVisual Editor\n\n\nInput\n\n*Unordered list*\n\n* unordered list\n        + sub-item 1\n        + sub-item 2\n\n*Ordered list: Standard numbering*\n  \n1. ordered list\n2. item 2\n  1. sub-item 1\n\n*Ordered list: All 1:*\n\n1. ordered list\n1. item 2\n1. item 3\n1. item 4\n\n*Tasklist*\n\n- [ ] Task 1\n- [ ] Task 2\n\nOutput\nUnordered list\n\nunordered list\n\nsub-item 1\nsub-item 2\n\n\nOrdered list: Standard numbering\n\nordered list\n\nitem 2\n\nsub-item 1\n\n\nOrdered list: All 1:\n\nordered list\n\nitem 2\n\nitem 3\n\nitem 4\n\nTasklist\n\nTask 1\nTask 2\n\n💡 The tasklist can be ticked off. Try it.\n\nSources: RStudio - Markdown basics, Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto and Introduction to Quarto - Wittkuhn and Pagenstedt\n\n\n\nYou have access to the same types of lists in the Visual as in the Source Editor. when wanting to create a list, head to the menu line under Format &gt; Bullets & Numbering. Some of the options only become available once you’ve created a list and want to edit it, like Tight Listor Sink Item.\n\n\n\n\n\n\nFigure 9.8: This is where you can find the different list options in the Visual Editor.\n\n\n\n\n\n\n\n\n9.5.4 Tables\nYou can also create tables using Markdown. However, this is one case where using either the Visual Editor or even better a Markdown table creator is recommended. Doing this in the Source Editor is very tedious and in terms of speed will leave you hanging behind the Visual Editor. However, in case you want to give it a try or come across it in a Markdown document, take a look below at how to create a table in the Source Editor.\n\nSource EditorVisual Editor\n\n\nEach new line is also a new row in the table and the columns are created using | as separators. You can define the width of a column using - and define where the text should be centered using :. See below how to do this.\nInput\n\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n\nOutput\n\nbulb: Tip: Use a Markdown table generator or the visual mode in RStudio to generate tables.\n\n\nRight\nLeft\nDefault\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\nSources: RStudio - Markdown basics, Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto and Introduction to Quarto - Wittkuhn and Pagenstedt\n\n\n\nTo create a table in the Visual Editor, head to the menu at the top again and go to Table &gt; Insert Table…. This will open a prompt that asks you about the general dimensions of your table but you can still change these later on. You also have the option to include a caption at this point. Once you’ve created a table more options like centering or adding more rows will become available.\n\n\n\n\n\n\nFigure 9.9: This is where you can find the different table options in the Visual Editor.\n\n\n\n\n\n\n\n\n9.5.5 Equations\nA very nice feature of Quarto is that it allows you to easily include equations. Regardless of which editor you use, you have to write the equations within LaTeX style. For a guide how to create sophisticated equations (including fractions, matrices, square roots, integrals, etc.), see the respective chapter in the LaTeX Beginner’s Guide.\n\nSource EditorVisual Editor\n\n\nTo include an equation you need to frame it with dollarsigns $. One dollarsign for inline equations $ and two for a standalone equation $$.\nAs an example the input would like this:\n\n\n\nMarkdown\n\nThe most important equation remains `$E = mc^{2}$` up to this date.\n\nThe following equation remains the most important up to this date.\n\n`$$E = mc^{2}$$`\n\n\nAnd the respective outputs would look like this:\nThe most important equation remains \\(E = mc^{2}\\) up to this date.\nThe following equation remains the most important up to this date.\n\\[E = mc^{2}\\]\n\n\nYou can also add equations using the Visual Editor by going to the menu line and selecting Insert &gt; LaTeX Math &gt; Inline Math/Display Math.\n\n\n\n\n\n\nFigure 9.10: This is where you can find the two different options for equations in the Visual Editor.\n\n\n\n\n\n\n\n\n9.5.6 Blockquotes\nYou can insert blockquotes in your Quarto documents. Whilst this is likely not syntax you will need a lot in scientific reports, it’s very easy to do and might prove useful when taking notes or formatting a website you’re creating.\n\nSource EditorVisual Editor\n\n\nTo create a blockquote in the Source Editor, just add a `&lt;´before it.\nFor example you might want to insert a quote to emphasize your adoration for reproducibility and have this as your input.\n&gt; \"Reproducibility is a major goal in all my research!\"\nThis will result in the following output in your final document.\n\n“Reproducibility is a major goal in all my research!”\n\n\n\nTo do the same thing in the Visual Editor head once again to the menu line and select Format &gt; Blockquote.\n\n\n\n\n\n\nFigure 9.11: This is where you can find the blockquote option in the Visual Editor.\n\n\n\n\n\n\n\n\n9.5.7 Links & Images\nYou can easily insert online links or images into your document. The process to do this is relatively similar, which is why the two actions are in the same section.\n\nSource EditorVisual Editor\n\n\nTo insert a link to, for example a website, the most basic option is to just insert the link between angle brackets &lt;Link&gt;.\nFor example when referring to the Quarto website the input looks like this: &lt;https://quarto.org/&gt;.\nAnd this results in this output: https://quarto.org/.\nAs this is maybe not the neatest way to insert a link, you can also “rename” the link by adding a custom name or description in square brackets [Name] and following this without a space in between with the link, this time in round brackets [Name](Link).\nFor our previous example, this looks like this as an input: [Quarto](https://quarto.org/)\nAnd this is the resulting output: Quarto\nInserting an image works similarly. Let’s say you want to insert an image that you’ve found online, in this case the Quarto logo. To do this, start off with an exclamation mark, followed by squared brackets, which can contain a caption for your image, but you can otherwise leave empty, followed by the link to the image in round brackets ![Optional caption](Image link).\nFor inserting the Quarto logo, this is the input:\n![Quarto logo](https://quarto.org/quarto.png)\nWhich will give you this output:\n\nYou can also add a link to your image. Staying with our Quarto example, here the Quarto logo will lead you to the Quarto website, but you could also use this process to link to your own website, a GitHub repository or your CV. The syntax for this is combining inserting an image and linking to something. Simply put the string used for inserting an image into squared brackets and follow this by the link in round brackets like so: [![Optional caption](Image link)](Link).\nFor our example, this is the necessary input: [![Quarto](https://quarto.org/quarto.png)](https://quarto.org)\nResulting in this output (notice how clicking on the image will bring you to the Quarto websit):\n\nYou can of course also link to images you’ve taken yourself or that aren’t stored online by inserting a local image path instead of an online link. If the image is stored in the same subfolder as your document, you can refer to it directly, however it is recommended to create a designated image folder instead, to keep your project structure clear to others and your future self.\nLet’s say your image quarto_logo.png is stored in the folder called images in a project structure like this:\n| my-project.Rproj\n| .gitignore\n| README.html\n| README.md\n| code\n| data\n| images\n  | quarto_logo.png\n| renv\nTo insert it, your input looks like this: ![Quarto](../images/quarto_logo.png).\nReturning you this output:\n\n\n\n\n\n\n\nKeep reproducibility in mind\n\n\n\n\n\nWhen using images or figures in e.g., a report about an analysis you’ve done, to not use a fixed image of it. Rather use a code chunk, which you will learn about in a little bit, to create it and keep them reproducible.\n\n\n\n\nSources: RStudio - Markdown basics, Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto and Introduction to Quarto - Wittkuhn and Pagenstedt\n\n\n\nTo add a link in the Visual Editor, head to the the menu line Insert &gt; Link…, which opens a window that prompts you to enter the URL, a Text, which is what will be displayed within the text and a Title/Tooltip, which pops up when you hover over the link.\n\n\n\nThis window lets you insert links in the Visual Editor in RStudio. Used under a CC-BY 4.0 license.\n\n\nTo insert images using the Visual Editor, select from the menu line Insert &gt; Figure/Image…, which leads you to a pop-up window, in which you can either insert the link to an image or browse your stored images. In this window you can also add links to websites and a caption for your image.\n\n\n\nThis window lets you insert images in the Visual Editor in RStudio. Used under a CC-BY 4.0 license.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html#sec-yaml-header",
    "href": "chapters/literate-programming.html#sec-yaml-header",
    "title": "9  Literate Programming",
    "section": "9.6 The YAML header",
    "text": "9.6 The YAML header\nIn Quarto, every document starts with a YAML header. The YAML header is indicated by three hyphens (---) at the beginning and at the end (e.g. Figure 9.2 or Figure 9.4). After the YAML header, the document’s content begins.\nYAML stands for Yet Another Markup Language. In the YAML header, you specify settings that belong to the whole document you are writing. In case, you want to write a book or create a website with Quarto, you will find a separate YAML file in your project directory (_quarto.yaml).\nDo I need to learn another markup language? Good news is, YAML is really easy to learn. And in the context of Quarto, a comprehensive guide explains to you, how you can set up a variety of options for your quarto document. Thus, you do not really must learn YAML. When you do not know something, look at the guide and follow its instructions.\nHow is the setup of the YAML header? In general, the YAML header consists of so called key: value pairs. Thus, between the two lines with the three hyphens, you write (almost) everything in the style of a key that has a counterpart, called a value. key and value are separated by colon (:), while it comes directly after the key, but leaves one space open until the value starts. Each line only contains one key: value pair. When you use a string as a value, put quotation marks around the value (e.g. author: \"Justus Reihs\")\nWith the help of the key: value pairs, you can setup your whole Quarto document. You can specify the document’s title, name, published date, etc. It would take too much time to give you a comprehensive overview of YAML specifications. Hence, we will provide you an overview that shows you a) the most important specifications for when you write a paper and b) the most important specifications to keep that paper easy to reproduce.\n\n\n\n\n\n\nTip 9.3: Different YAML settings\n\n\n\n\n\n\n\n\n\n\n\n\n\nYAML key\nExample\nDescription\n\n\n\n\ntitle\ntitle: \"The Repro Book - A Guide to Reproducible Research\"\nName the title of your document\n\n\nshorttitle\nshorttitle: \"The Repro Book\"\nThe short title of your document\n\n\neditor\neditor:\n  markdown:\n    wrap: sentence\nSet that each sentence is placed in a new line (Tip 9.2)\n\n\ncsl\ncsl: apa.csl\nSet the citation style of your document\n\n\nbibliography\nbibliography: references.bib\nRefer to the citations you use in your document\n\n\n\n\n\n\n\n\n\n\n\n\nView: This chapter’s YAML file\n\n\n\n\n\n\n---\ntitle: \"Literate Programming\"\neditor: source\nengine: knitr\nexecute:\n  eval: false\n  warning: false\n  message: false\ncode-annotations: hover\ncategories: [intermediate]\nabstract: |\n  In this chapter you will learn how you can automatically integrate your reproducible results into a paper.\n  You will learn how to write a paper in with Quarto and how to format it for a required output.\n  You will learn how to use extension, specifically the apaquarto extension to write reproducible paper in APA-style.\n---",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html#features",
    "href": "chapters/literate-programming.html#features",
    "title": "9  Literate Programming",
    "section": "9.7 Features",
    "text": "9.7 Features\nThere are some nice features that can be implemented in Quarto, such as including code chunks, as mentioned before with the example of a plot, inline code, as well as referencing and citations. These are the features that can make your document reproducible. As explained in the introduction, when having to e.g. change your analysis, these features will update without you having to painstakingly change your results manually and likely introduce some errors in the process.\n\n9.7.1 Code chunks\nCode chunks are pieces of code that will be executed by Quarto during the rendering process, so when you’re having Quarto create the intended output format of your .qmd file. Remember the earlier example of a plot within a report, which was done using a code chunk.\n\n\n\nOn the left is a Quarto document in RStudio, containing a code chunk that creates a simple plot. On the right is the rendered version of the document, showing the text and the plot. Used under a CC-BY 4.0 license.\n\n\nAny type of code can be inserted by using code chunks.\nTo insert a code chunk either do so by using specific syntax in the Source mode or by going into the Visual mode and inserting it by clicking through the menu.\nTo add a code chunk in the Source mode, simply add three back ticks around your code and specify the language within {}. For example in the language R, this would look just like this: ```{r} Your code ```. As this process is so simply and the thinking work lies in the code itself, it is recommended to do this in the Source mode, also because it is simply faster.\nTo add a code chunk in the Visual mode, head to Insert &gt; Executable Cell &gt; Desired Language  , as can be seen below.\n\n\n\nHow to insert a code chunk into a Quarto document in the Visual mode in RStudio. Used under a CC-BY 4.0 license.\n\n\n\nCode chunks can be quite different in their functioning. There is some room for how you can customize them, for example you might like to have the code displayed as well as the output or (very likely) you have a lot of code but only want to showcase your results directly in the output document but in order to get there you need to run a lot of code beforehand. As your biggest goal is keeping your document reproducible, you still want to include it in your Quarto file.\nTo do this, you use different Chunk Options. In the previous examples one of them has been #| echo: false, which ensures that only the output, in that case the plot, and not the input, the code is shown. To include them, place them within your code chunk, after your specified coding language, just like in the code chunk in the plot example above. The options are either specified trueor `false and prefaced by #|.\nSome important options are:\n- #| echo: false: When set to false, the code chunks results are shown but not the code itself. When set as true, the code is also shown.\n- #| include: false: Neither the code nor the results appear in the output file, which is useful for code which’s results you need for running other code later on but isn’t relevant to the reader.\n- #| warning: false: Don’t include potential warnings in the output.\n- #| fig.cap = \" Your caption\": Include a caption in your figure. This one is not set to true or false but rather just the caption is included.\n- #| label: You can give your code chunk a label to more easily identify the aim of this piece of code.\n\n\n9.7.2 Inline code\nInline code allows you to simply insert code as part of your other markdown syntax. This is especially useful for referencing analysis outputs. In keeping with reproducibility this ensures that if you change parts of your analysis, your results will update as well without you having to manually go into the text change them manually, risking that you might miss some. Furthermore, when writing your report, you don’t have to go back and forth, checking what your specific results were but instead can just refer to them and move on with writing.\nTo add inline code, it’s the same process as for inserting a code chunk but instead of three backticks, you just use one. Remember to include the programming language in {}.\nThe input could look something like this:\n\nThe number of observations is `{r} 8*20`.\n\nThe programming language used here is R and this code will result in the output:\nThe number of observations is 160.\n\n\n9.7.3 Referencing\nYou can cross-reference objects like figures, tables or equations within your text. This is especially useful in reports when you need to refer to different figures. The references work as links to the objects and let you jump to them in the final document.\nFor example: Section 9.7.4 (@sec-citations) brings you to the section on citations in this book.\nTo be able to cross-reference tables, sections of your text, equations or figures, they need to have a label. You need to add the label after the inserted object. The label is in curly brackets and start with a hash # like so {#object-name}. For example, for an image this looks like this: ![A fish](fish-image.jpg){#fig-fish}. To reference it in the text you loose the curly brackets and replace the hash with an at-sign @, which looks like this As displayed in @fig-fish, this a fish..\nAvoid using underscores _when creating your labels as this might cause problems when rendering to PDF. There is a set of predefined prefixes you can and should use to refer to your objects. Then just follow this with a name of your choosing.\n\n\n\nType\nLabel Prefix\n\n\n\n\nFigures\nfig-\n\n\nTables\ntbl-\n\n\nEquations\neq-\n\n\nSections\nsec-\n\n\nCode listing\nlst-\n\n\nTheorem\nthm-\n\n\n\n\n\n9.7.4 Citations\nWhen you write a paper, you definitely must include citations. Quarto offers different ways of managing citations. We will give you an overview on how to handle them.\nWhen you use citations in Quarto, you will definitely need a bibliography. This bibliography contains all the relevant information of your citations and is usually a BibLaTeX (.bib) or BibTeX (.bibtex) file. What you might optionally want to include, is a file that specifies the Citation Style Language. For more information on that, see Section 9.7.4.3.\n\n9.7.4.1 Add citations\nAdding citations is simple in the Visual Editor. Go to Insert in the menu line and click on Citation…. Then a box should pop up (see Figure 9.12). In that box, you have different options how to add a citation. In our opinion, the interface From DOI is the most convenient one for adding new citations. To find your citation of interest, simply copy and paste the DOI of your research article into the bar and hit Search. Then, your citation should be popped up in the pane below (again, see Figure 9.12). Simply hit Insert and your citation is in your document. At the same time (if it is your first citation), a references.bib file was automatically created in your project directory (see Note 9.2). Further, you can see, that your YAML header now contains one more line bibliography: references.bib. The Visual Editor does that automatically for you. If you use the Source editor, you have to set up the references.bib file on your own and manually add the bibliography key-value pair to your document’s YAML header. When you add other new citations, they are automatically added to your references.bib file, when you follow the same steps from above again.\n\n\n\n\n\n\nFigure 9.12: Screenshot of Pop-Up box when adding a new citation from a DOI in the Visual Editor.\n\n\n\n\n\n\n\n\n\nNote 9.2: The references.bib file\n\n\n\n\n\nThe reference.bib file has a very specific setup. Lets look at an exemplary entry in the file to learn how it is built.\n\n\nExample of `references.bib` file\n\n@article{nuijten2024,\n  author = {Michèle B. Nuijten and Jelte M. Wicherts},\n  title = {Implementing Statcheck During Peer Review Is Related to a Steep Decline in Statistical-Reporting Inconsistencies},\n  journal = {Advances in Methods and Practices in Psychological Science},\n  year = {2024},\n  volume = {7},\n  issue = {2},\n  doi = {10.1177/25152459241258945},\n  url = {https://doi.org/10.1177/25152459241258945}\n}\n\n\nYou can derive following rules from this example:\n\nEach entry starts with an @\nAfter the @ the resource type of the entry is specified (e.g. article, book, etc.)\nAn opening curly bracket { marks the begin of where to write the content of the citation\nAfter the {, an identifier is written (by default, first author name and the year of publication)\nSeparation by a comma ,\nThen the body of the entry follows, indented by two spaces\nThe body contains multiple key-value pairs (as in the YAML header).\nContrary to the YAML header keys and values are separated by an equals sign.\nContrary to the YAML header, the values are written in curly brackets.\nA , separates two key-value pairs\nEach key-value pair is written on it’s own line\nThe last key value pair does not need a , at the end\nImportant keys for journal articles are author, title, journal, volume, issue, doi and url\nThe body of the entry is closed with a non indented closing curly bracket } at a new line, closing the opening curly bracket from the first line of the entry.\n\n\n\n\n\n\nClick here to view the full references.bib of this book.\n\n\n\n\nreferences.bib\n\n@article{knuth84,\n  author = {Knuth, Donald E.},\n  title = {Literate Programming},\n  year = {1984},\n  issue_date = {May 1984},\n  publisher = {Oxford University Press, Inc.},\n  address = {USA},\n  volume = {27},\n  number = {2},\n  issn = {0010-4620},\n  url = {https://doi.org/10.1093/comjnl/27.2.97},\n  doi = {10.1093/comjnl/27.2.97},\n  journal = {Comput. J.},\n  month = may,\n  pages = {97–111},\n  numpages = {15}\n}\n\n@article{bakker2023,\n  author = {Bakker, Arnold B. and Demerouti, Evangelia and Sanz-Vergel, Ana},\n  title = {Job Demands-Resources Theory: Ten Years Later},\n  issue_date = {January 2023},\n  publisher = {Annual Review of Organizational Psychology and Organizational Behavior},\n  volume = {10},\n  url = {https://doi.org/10.1146/annurev-orgpsych-120920-053933},\n  doi = {10.1146/annurev-orgpsych-120920-053933},\n  journal = {Annual Review of Organizational Psychology and Organizational Behavior},\n  month = jan,\n  year = {2023},\n  pages = {25-53},\n  numpages = {29}\n}\n\n@inbook{goodhart1984,\n    title = {Problems of Monetary Management: The UK Experience},\n    author = {Goodhart, C. A. E.},\n    year = {1984},\n    date = {1984},\n    publisher = {Macmillan Education UK},\n    pages = {91--121},\n    doi = {10.1007/978-1-349-17295-5_4},\n    url = {http://dx.doi.org/10.1007/978-1-349-17295-5_4},\n    langid = {en}\n}\n\n@article{mckiernan2016,\n    title = {How open science helps researchers succeed},\n    author = {McKiernan, Erin C and Bourne, Philip E and Brown, C Titus and Buck, Stuart and Kenall, Amye and Lin, Jennifer and McDougall, Damon and Nosek, Brian A and Ram, Karthik and Soderberg, Courtney K and Spies, Jeffrey R and Thaney, Kaitlin and Updegrove, Andrew and Woo, Kara H and Yarkoni, Tal},\n    year = {2016},\n    month = {07},\n    date = {2016-07-07},\n    journal = {eLife},\n    volume = {5},\n    doi = {10.7554/elife.16800},\n    url = {http://dx.doi.org/10.7554/eLife.16800},\n    langid = {en}\n}\n\n@article{abele-brehm2016,\n    title = {Wer soll die Professur bekommen?},\n    author = {Abele-Brehm, Andrea E. and {Bühner}, Markus},\n    year = {2016},\n    month = {10},\n    date = {2016-10},\n    journal = {Psychologische Rundschau},\n    pages = {250--261},\n    volume = {67},\n    number = {4},\n    doi = {10.1026/0033-3042/a000335},\n    url = {http://dx.doi.org/10.1026/0033-3042/a000335},\n    langid = {de}\n}\n\n@article{john2012,\n    title = {Measuring the Prevalence of Questionable Research Practices With Incentives for Truth Telling},\n    author = {John, Leslie K. and Loewenstein, George and Prelec, Drazen},\n    year = {2012},\n    month = {04},\n    date = {2012-04-16},\n    journal = {Psychological Science},\n    pages = {524--532},\n    volume = {23},\n    number = {5},\n    doi = {10.1177/0956797611430953},\n    url = {http://dx.doi.org/10.1177/0956797611430953},\n    langid = {en}\n}\n\n@article{nosek2022,\n    title = {Replicability, Robustness, and Reproducibility in Psychological Science},\n    author = {Nosek, Brian A. and Hardwicke, Tom E. and Moshontz, Hannah and Allard, {Aurélien} and Corker, Katherine S. and Dreber, Anna and Fidler, Fiona and Hilgard, Joe and Kline Struhl, Melissa and Nuijten, {Michèle B.} and Rohrer, Julia M. and Romero, Felipe and Scheel, Anne M. and Scherer, Laura D. and {Schönbrodt}, Felix D. and Vazire, Simine},\n    year = {2022},\n    month = {01},\n    date = {2022-01-04},\n    journal = {Annual Review of Psychology},\n    pages = {719--748},\n    volume = {73},\n    number = {1},\n    doi = {10.1146/annurev-psych-020821-114157},\n    url = {http://dx.doi.org/10.1146/annurev-psych-020821-114157},\n    langid = {en}\n}\n\n@misc{bryan2015,\n  author = {Bryan, Jenny},\n  title = {How to name files},\n  year = {2015},\n  month = {May},\n  note = {[Online; accessed 19. Nov. 2020]},\n  url = {https://speakerdeck.com/jennybc/how-to-name-files}\n}\n\n@book{chacon2014,\n    title = {Pro Git},\n    author = {Chacon, Scott and Straub, Ben},\n    year = {2014},\n    date = {2014},\n    publisher = {Apress},\n    doi = {10.1007/978-1-4842-0076-6},\n    url = {http://dx.doi.org/10.1007/978-1-4842-0076-6},\n    note = {License: CC BY-NC}\n}\n@article{hanson2019,\n    title = {Data Sharing and Management Snafu in 3 Short Acts},\n    author = {Hanson, Karen and Surkis, Alisa and Yacobucci, Karen},\n    year = {2019},\n    date = {2019},\n    doi = {10.6084/M9.FIGSHARE.8061722.V1},\n    url = {https://figshare.com/articles/Data_Sharing_and_Management_Snafu_in_3_Short_Acts/8061722/1}\n}\n\n@book{gau2022,\n    title = {Remi-Gau/bids{\\_}workshop: v0.1.1},\n    author = {Gau, Remi},\n    year = {2022},\n    month = {10},\n    date = {2022-10-09},\n    publisher = {Zenodo},\n    doi = {10.5281/ZENODO.7178587},\n    url = {https://zenodo.org/record/7178587}\n}\n\n@article{wilkinson2016,\n    title = {The FAIR Guiding Principles for scientific data management and stewardship},\n    author = {Wilkinson, Mark D. and Dumontier, Michel and Aalbersberg, IJsbrand Jan and Appleton, Gabrielle and Axton, Myles and Baak, Arie and Blomberg, Niklas and Boiten, Jan-Willem and da Silva Santos, Luiz Bonino and Bourne, Philip E. and Bouwman, Jildau and Brookes, Anthony J. and Clark, Tim and Crosas, {Mercè} and Dillo, Ingrid and Dumon, Olivier and Edmunds, Scott and Evelo, Chris T. and Finkers, Richard and Gonzalez-Beltran, Alejandra and Gray, Alasdair J.G. and Groth, Paul and Goble, Carole and Grethe, Jeffrey S. and Heringa, Jaap and {{\\textquoteright}t Hoen}, Peter A.C and Hooft, Rob and Kuhn, Tobias and Kok, Ruben and Kok, Joost and Lusher, Scott J. and Martone, Maryann E. and Mons, Albert and Packer, Abel L. and Persson, Bengt and Rocca-Serra, Philippe and Roos, Marco and van Schaik, Rene and Sansone, Susanna-Assunta and Schultes, Erik and Sengstag, Thierry and Slater, Ted and Strawn, George and Swertz, Morris A. and Thompson, Mark and van der Lei, Johan and van Mulligen, Erik and Velterop, Jan and Waagmeester, Andra and Wittenburg, Peter and Wolstencroft, Katherine and Zhao, Jun and Mons, Barend},\n    year = {2016},\n    month = {03},\n    date = {2016-03-15},\n    journal = {Scientific Data},\n    volume = {3},\n    number = {1},\n    doi = {10.1038/sdata.2016.18},\n    url = {http://dx.doi.org/10.1038/sdata.2016.18},\n    langid = {en}\n}\n\n@article{gorgolewski2016,\n    title = {The brain imaging data structure, a format for organizing and describing outputs of neuroimaging experiments},\n    author = {Gorgolewski, Krzysztof J. and Auer, Tibor and Calhoun, Vince D. and Craddock, R. Cameron and Das, Samir and Duff, Eugene P. and Flandin, Guillaume and Ghosh, Satrajit S. and Glatard, Tristan and Halchenko, Yaroslav O. and Handwerker, Daniel A. and Hanke, Michael and Keator, David and Li, Xiangrui and Michael, Zachary and Maumet, Camille and Nichols, B. Nolan and Nichols, Thomas E. and Pellman, John and Poline, Jean-Baptiste and Rokem, Ariel and Schaefer, Gunnar and Sochat, Vanessa and Triplett, William and Turner, Jessica A. and Varoquaux, {Gaël} and Poldrack, Russell A.},\n    year = {2016},\n    month = {06},\n    date = {2016-06-21},\n    journal = {Scientific Data},\n    volume = {3},\n    number = {1},\n    doi = {10.1038/sdata.2016.44},\n    url = {http://dx.doi.org/10.1038/sdata.2016.44},\n    langid = {en}\n}\n\n@article{broman2018,\n  title = {Data Organization in Spreadsheets},\n  author = {Karl W. Broman and Kara H. Woo},\n  year = {2018},\n  month = {04},\n  date = {2018-04-24},\n  journal = {The American Statistician},\n  volume = {72},\n  number = {1},\n  pages ={2-10},\n  doi = {10.1080/00031305.2017.1375989},\n  url = {https://doi.org/10.1080/00031305.2017.1375989},\n  langid = {en}\n}\n  \n@article{wickham2014,\n  title = {Tidy Data},\n  author = {Hadley Wickham},\n  year = {2014},\n  month = {08},\n  journal = {Jornal of Statistical Software},\n  volume = {59},\n  number = {10},\n  pages = {1-23},\n  doi = {10.18637/jss.v059.i10},\n  url = {https://doi.org/10.18637/jss.v059.i10},\n  langid = {en}\n}\n  \n@Manual{fischetti2023,\n  title = {assertr: Assertive Programming for R Analysis Pipelines},\n  author = {Fischetti, Tony},\n  year = {2023},\n  month = {11},\n  date = {2023-11-23},\n  note = {R package version 3.0.1https://docs.ropensci.org/assertr/ (website)\nhttps://github.com/ropensci/assertr},\n  doi = {10.32614/CRAN.package.assertr},\n  url = {https://docs.ropensci.org/assertr/},\n}\n\n@article{reinhart2010,\n  author = {Reinhart, Carmen M. and Rogoff, Kenneth S.},\n  title = {Growth in a Time of Debt},\n  journal = {American Economic Review},\n  volume = {100},\n  number = {2},\n  year = {2010},\n  month = {May},\n  pages = {573–78},\n  doi = {10.1257/aer.100.2.573},\n  url = {https://www.aeaweb.org/articles?id=10.1257/aer.100.2.573},\n}\n\n@article{herndon2014,\n  title = {Does high public debt consistently stifle economic growth? A critique of Reinhart and Rogoff},\n  author = {Thomas Herndon and Michael Ash and Robert Pollin},\n  year = {2014},\n  month = {03},\n  journal = {Cambridge Journal of Economics},\n  volume = {38},\n  number = {2},\n  pages = {257-279},\n  doi = {10.1093/cje/bet075},\n  url = {https://doi.org/10.1093/cje/bet075}\n}\n\n@article{ziemann2016,\n  title = {Gene name erorrs are widespread in the scientific literature},\n  author = {Ziemann, M. and Eren, Y. and El-Osta, A.},\n  year = {2016},\n  month = {08},\n  date = {2016-08-23},\n  journal = {Genome Biology},\n  volume = {17},\n  doi = {10.1186/s13059-016-1044-7},\n  url = {https://doi.org/10.1186/s13059-016-1044-7}\n}\n\n@article{esteban2019,\n  title = {fMRIPrep: a robust preprocessing pipeline for functional MRI},\n  author = {Oscar Esteban and Christopher J. Markiewicz and Ross W. Blair and Craig A. Moodie and A. Ilkay Isik and Asier Erramuzpe and James D. Kent and Mathias Goncalves and Elizabeth DuPre and Medeleine Snyder and Hiroyuki Oya and Satrajit S. Gish and Jessey Wright and Joke Durnez and Russell A Poldrack and Krzysztof J. Gorgolewski},\n  year = {2019},\n  month = {01},\n  journal = {Nature Methods},\n  volume = {16},\n  pages = {111-116},\n  doi = {10.1038/s41592-018-0235-4},\n  url = {https://doi.org/10.1038/s41592-018-0235-4}\n}\n\n@book{wittkuhn2024,\n  author = {Lennart Wittkuhn and Konrad Pagenstedt},\n  title = {Version Control Book},\n  publisher = {ZFDM Repository},\n  year = {2024},\n  month = {02},\n  doi = {10.25592/uhhfdm.14149},\n  url = {https://doi.org/10.25592/uhhfdm.14149}\n}\n\n@article{barker2022,\n  author = {Barker, Michelle and Chue Hong, Neil P. and Katz, Daniel S. and Lamprecht, Anna-Lena and Martinez-Ortiz, Carlos and Psomopoulos, Fotis and Harrow, Jennifer and Castro, Leyla Jael and Gruenpeter, Morane and Martinez, Paula Andrea and Honeyman, Tom},\n  title = {Introducing the FAIR Principles for research software},\n  year = {2022},\n  journal = {Scientific Data},\n  volume = {9},\n  pages = {622},\n  doi = {10.1038/s41597-022-01710-x},\n  url = {https://doi.org/10.1038/s41597-022-01710-x}\n  \n}\n\n@book{wickham2023,\n    title = {R for Data science: Import, Tidy, Transform, Visualize, and Model Data},\n    author = {Wickham, H. and Çetinkaya-Rundel, M. and Grolemund, G.},\n    year = {2023},\n    data = {2023},\n    publisher = {O'Reilly Media},\n    url = {https://r4ds.hadley.nz},\n    note = {License: CC BY-NC-ND 3.0 US}\n}\n\n@Manual{hester2024,\n    title = {lintr: A 'Linter' for R Code},\n    author = {Jim Hester and Florent Angly and Russ Hyde and Michael Chirico and Kun Ren and Alexander Rosenstock and Indrajeet Patil},\n    year = {2024},\n    note = {R package version 3.1.2},\n    url = {https://CRAN.R-project.org/package=lintr},\n}\n\n@Manual{mueller2020,\n    title = {here: A Simpler Way to Find Your Files},\n    author = {Kirill Müller},\n    year = {2020},\n    note = {R package version 1.0.1, https://github.com/r-lib/here},\n    url = {https://here.r-lib.org/},\n  }\n  \n@misc{rennie2024,\n  author       = {Nicola Rennie},\n  title        = {Writing Better R Code},\n  year         = {2024},\n  url          = {https://nrennie.rbind.io/training-better-r-code/},\n  note         = {Accessed on 2024-11-19}\n}\n\n@article{haslbeck2022,\n  author = {Jonas M. Haslbeck and Oisín Ryan and Donald J. Robinaugh and Lourens J. Waldorp and Denny Borsboom},\n  title = {Modeling Psychopathology: From Data Models to Formal Theories},\n  year = {2022},\n  journal = {Psychological Methods},\n  volume = {27},\n  issue = {6},\n  pages = {930-957},\n  doi = {10.1037/met0000303},\n  url = {https://doi.org/10.1037/met0000303}\n}\n\n@Manual{ushey2024,\n  title = {renv: Project Environments},\n  author = {Kevin Ushey and Hadley Wickham},\n  year = {2024},\n  note = {R package version 1.0.11, https://github.com/rstudio/renv},\n  url = {https://rstudio.github.io/renv/},\n}\n\n@misc{rapp2024,\n  title = {Robust R Code That Will Work Forever With {renv}},\n  url = {https://www.youtube.com/watch?v=Oen9xhEh8PY},\n  journal = {YouTube},\n  author = {Albert Rapp},\n  year = {2024},\n  month = {11},\n}\n\n@book{community2022,\n    title = {The Turing Way: A handbook for reproducible, ethical and collaborative research},\n    author = {{The Turing Way Community}},\n    year = {2022},\n    month = {07},\n    date = {2022-07-27},\n    publisher = {Zenodo},\n    doi = {10.5281/zenodo.3233853},\n    url = {https://zenodo.org/record/3233853},\n    note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}. Source: \\url{https://github.com/the-turing-way/the-turing-way}. Website: \\url{https://the-turing-way.netlify.app/}}\n}\n\n@misc{wikipedia2025,\n  title = {Modularity},\n  url = {https://en.wikipedia.org/wiki/Modularity},\n  author = {Wikipedia Contributors,},\n  year = {2025},\n  month = {02},\n  day = {10}\n}\n\n@article{artner2021,\n  title = {The Reproducibility of Statistical Results in Psychological Research: An Investigation Using Unpublished Raw Data},\n  author = {Richard Artner and Thomas Verliefde and Sara Steegen and Sara Gomes and Frits Traets and Francis Tuerlinckx and Wolf Vanpaemel},\n  year = {2021},\n  journal = {Psychological Methods},\n  volume = {26},\n  issue = {5},\n  pages = {527-546},\n  doi = {10.1037/met0000365},\n  url = {https://doi.org/10.1037/met0000365}\n}\n\n@article{crüwell2023,\n  title = {What’s in a Badge? A Computational Reproducibility Investigation of the Open Data Badge Policy in One Issue of Psychological Science},\n  author = {Sophia Crüwell and Deborah Apthorp and Bradley J. Baker and Lincoln Colling and Malte Elson and Sandra J. Geiger and Sebastian Lobentanzer and Jean Monéger and Alex Patterson and D. Samuel Schwarzkopf and Mirela Zaneva and Nicholas J. L. Brown},\n  year = {2023},\n  journal = {Psychological Science},\n  volume = {34},\n  issue = {4},\n  pages = {513-522},\n  doi = {10.1177/09567976221140828},\n  url = {https://doi.org/10.1177/09567976221140828}\n}\n\n@article{hardwicke2021,\n  title = {Analytic reproducibility in articles receiving open data badges at the Journal *Psychological Science*: an observational study},\n  author = {Tom E. Hardwicke and Manuel Bohn and Kyle MacDonald and Emily Hembacher and Michéle B. Nuijten and Benjamin N. Peloquin and Benjamin E. deMayo and Bria Long and Erica J. Yoon and Michael C. Frank},\n  year = {2021},\n  journal = {Royal Society Open Science},\n  volume = {8},\n  pages = {201494},\n  doi = {10.1098/rsos.201494},\n  url = {https://doi.org/10.1098/rsos.201494}\n}\n\n@article{obels2020,\n  title = {Analysis of Open Data and Computational Reproducibility in Registered Reports in Psychology},\n  author = {Pepijn Obels and Daniël Lakens and Nicholas A. Coles and Jaroslav Gottfried and Seth A. Green},\n  year = {2020},\n  journal = {Advances in Methods and Practices in Psychological Science},\n  volume = {3},\n  issue = {2},\n  pages = {229-237},\n  doi = {10.1177/2515245920918872},\n  url = {https://doi.org/10.1177/2515245920918872}\n}\n\n@article{lakomy2019,\n  title = {Open Science and the Science-Society Relationship},\n  author = {Martin Lakomý and Renata Hlavová and Hana Machackova},\n  year = {2019},\n  journal = {Society},\n  volume = {56},\n  pages = {246-255},\n  doi = {10.1007/s12115-019-00361-w},\n  url = {https://doi.org/10.1007/s12115-019-00361-w}\n}\n\n@book {cribb2010,\n    author = {Julian Cribb and Tjempaka Sari},\n    title = {Open Science: Sharing Knowledge in the Global Century},\n    pages = {230},\n    year = {2010},\n    doi = {10.1071/9780643097643},\n    publisher = {CSIRO Publishing},\n    isbn = {978-0-643-10183-8},\n    URL = {https://doi.org/10.1071/9780643097643}\n}\n\n@article{opensciencecollaboration2015,\n  title = {Estimating the reproducibility of psychological science},\n  author = {Open Science Collaboration,},\n  year = {2015},\n  month = {august},\n  date = {2015-08-28},\n  journal = {Science},\n  volume = {349},\n  pages = {aac4716},\n  doi = {10.1126/science.aac4716},\n  url = {https://doi.org/10.1126/science.aac4716}\n}\n\n@article{begley2012,\n  title = {Raise standards for preclinical cancer research},\n  author = {C. Glenn Begley and Lee M. Ellis},\n  year = {2012},\n  journal = {nature},\n  volume = {483},\n  pages = {531-533},\n  doi = {10.1038/483531a},\n  url = {https://doi.org/10.1038/483531a}\n}\n\n@article{stroop1935,\n  title = {Studies of interference in serial verbal reactions},\n  author = {Stroop, J. R.},\n  year = {1935},\n  journal = {Journal of Experimental Psychology},\n  volume = {18},\n  issue = {6},\n  pages = {643-662},\n  doi = {10.1037/h0054651},\n  url = {https://doi.org/10.1037/h0054651}\n}\n\n@article{williams1996,\n  title = {The emotional Stroop task and psychopathology},\n  author = {Williams, J. M. G. and Mathews, A. and MacLeod, C.},\n  year = {1996},\n  journal = {Psychological Bulletin},\n  volume = {120},\n  issue = {1},\n  pages = {3-24},\n  doi = {10.1037/0033-2909.120.1.3},\n  url = {https://doi.org/10.1037/0033-2909.120.1.3}\n}\n\n@article{poldrack2019,\n  title = {The Costs of Reproducibility},\n  journal = {Neuron},\n  volume = {101},\n  number = {1},\n  pages = {11-14},\n  year = {2019},\n  issn = {0896-6273},\n  doi = {https://doi.org/10.1016/j.neuron.2018.11.030},\n  url = {https://www.sciencedirect.com/science/article/pii/S0896627318310390},\n  author = {Russell A. Poldrack},\n  abstract = {Improving the reproducibility of neuroscience research is of great concern, especially to early-career researchers (ECRs). Here I outline the potential costs for ECRs in adopting practices to improve reproducibility. I highlight the ways in which ECRs can achieve their career goals while doing better science and the need for established researchers to support them in these efforts.}\n}\n\n@misc{yarkoni2018,\n  title = {No, it’s not The Incentives — it’s you},\n  author = {Tal Yarkoni},\n  url = {https://talyarkoni.org/blog/2018/10/02/no-its-not-the-incentives-its-you/},\n  year = {2018},\n  month = {October},\n  day = {2},\n  note = {Accessed: 2025-04-04}\n}\n\n@book{wagner2021,\n  title        = {The DataLad Handbook},\n  author       = {DataLad Community},\n  year         = {2021},\n  publisher    = {DataLad},\n  url          = {https://handbook.datalad.org/},\n  doi          = {https://doi.org/10.5281/zenodo.3608611},\n  note = {License: \\href{https://creativecommons.org/licenses/by-sa/4.0/}{CC BY-SA 4.0}. Source: \\url{https://github.com/datalad-handbook/book?tab=License-1-ov-file}}\n}\n\n@article{laulie2023,\n  title = {Exploring self-regulation theory as a mechanism of the effects of psychological contract fulfillment: The role of emotional intelligence},\n  author = {Lyonel Laulié and Gabriel Briceño-Jiménez and Gisselle Henríquez-Gomez},\n  year = {2023},\n  journal = {Frontiers in Psychology},\n  volume = {14},\n  url = {https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2023.1090094},\n  doi = {10.3389/fpsyg.2023.1090094}\n}\n\n@article{nuijten2024,\n  author = {Michèle B. Nuijten and Jelte M. Wicherts},\n  title = {Implementing Statcheck During Peer Review Is Related to a Steep Decline in Statistical-Reporting Inconsistencies},\n  journal = {Advances in Methods and Practices in Psychological Science},\n  year = {2024},\n  volume = {7},\n  issue = {2},\n  doi = {10.1177/25152459241258945},\n  url = {https://doi.org/10.1177/25152459241258945}\n}\n\n@article{schuck2016,\n    title = {Human Orbitofrontal Cortex Represents a Cognitive Map of State Space},\n    author = {Schuck, {Nicolas W.} and Cai, {Ming Bo} and Wilson, {Robert C.} and Niv, Yael},\n    year = {2016},\n    month = {09},\n    date = {2016-09},\n    journal = {Neuron},\n    pages = {1402--1412},\n    volume = {91},\n    number = {6},\n    doi = {10.1016/j.neuron.2016.08.019},\n    url = {http://dx.doi.org/10.1016/j.neuron.2016.08.019},\n    langid = {en}\n}\n\n\n\n\n\n9.7.4.2 Citation syntax\nTo refer to citations that have already been inserted in your references.bib file, there is no difference between the Source and the Visual Editor. All you have to do is indicating a citation with @ and put the identifier (see Note 9.2) behind the @. Thus, if you want to cite the paper we added in Section 9.7.4.1, you can see in the references.bib file that we use the identifier schuck2016. Hence, the proper citation is @schuck2016. This citation is called an in-text citation. You can also use square brackets around the reference ([@schuck2016]). Another possibility is to use a - before the reference to let the authors disappear ([-@schuck2016]) Look at Table 9.2 to see how the different syntax plays out in the output.\n\n\n\n\n\n\n\n\n\n\nMarkdown Format\nOutput (author-date format)\n\n\n\n\nBlip blop bloop [see @schuck2016, pp. 1403-1405;\nalso @community2022, chap. 1]\nBlip blop bloop (see Schuck et al. 2016, 33–35; also The Turing Way Community 2022, chap. 1)\n\n\nBlip blop bloop [@schuck2016, pp. 1403-1405,\n1407-1408 and passim]\nBlip blop bloop (Schuck et al. 2016, 1403–5, 1407–8 and passim)\n\n\nBlip blop bloop [@schuck2016].\nBlip blop bloop (Schuck et al. 2016).\n\n\nThey say blah [-@schuck2016]\nThey say blah (2016)\n\n\n@schuck2016 says bloop.\nSchuck et al. (2016) says bloop.\n\n\n@schuck2016 [p.1403] says blah.\nSchuck et al. (2016, 1403) says blah.\n\n\n\n\n\nTable 9.2: Sources: RStudio - Markdown basics, Dr. Monwinckel - Quartaki - 6 hour introduction to Quarto, Wittkuhn & Pagenstedt - Quarto Workshop\n\n\n\n\n\n9.7.4.3 Citation style\nBy default, the citation style in Quarto Documents is the Chicago Manual of Style author-date format. If you want to change the style, you can look up different resources to find .csl files. These .csl files specify how the citations will be styled. Note 9.3 shows you some resources where you can find these .csl files.\nTo use the citation style language you downloaded with the .csl file, you have to make sure that the intended .csl file appears in the root directory of the project2. Additionally, make sure that you specified your YAML header by adding the key-value pair csl: apa.csl into the YAML header of your document (Tip 9.3).\n\n\n\n\n\n\nNote 9.3: Resources for .csl files\n\n\n\n\n\n\n\n\nResource\nLink\n\n\n\n\nZotero’s Style Repository\n\n\n\nCSL Project",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html#quarto-extensions",
    "href": "chapters/literate-programming.html#quarto-extensions",
    "title": "9  Literate Programming",
    "section": "9.8 Quarto extensions",
    "text": "9.8 Quarto extensions\nOne nice feature of Quarto are it’s extensions. These extensions are created from Quarto users to extend the behavior and functionality of quarto. Since Quarto contributes to the movement of Open Science and Reproducibility, these extensions are freely available.\n\nThe apaquarto extension\nIn this book, we will only deal with one extension - the apaquarto extension by William Joel Schneider. With this extension, we can shape the output of our rendered quarto file into the format of the APA guidelines3 without much effort.\n\n\n9.8.1 Install apaquarto\nTo install apaquarto, there are some prerequisites that you most likely already fulfil.\n\nInstall Quarto\nInstall a programming language (e.g )\nInstall a programming environment (e.g. RStudio)\n\nAfter you have installed all things, you can successfully install apaquarto. Most likely you have installed R and RStudio. To check whether Quarto is already installed, see Tip 9.4.\n\n\n\n\n\n\nTip 9.4: How to check whether Quarto is already installed\n\n\n\n\n\nTo check whether Quarto is already installed, open the Terminal at RStudio. It should be right next to the Console. If there is no Terminal, go to Tools &gt; Terminal &gt; New Terminal. Then, the Terminal pane will open. Write the following code into the Terminal:\n\n\n\nTerminal\n\nquarto --version\n\n\nIf you already have Quarto installed, the current version of Quarto should be displayed.\n\n\n\nOutput\n\n1.4.551\n\n\nIf you have not installed Quarto yet, you might get a message like this:\n\n\n\nOutput\n\nCommand \"quarto --version\" not found.\n\n\nTo install quarto, go head and follow the installation instructions at this website.\n\n\n\nTo install apaquarto, the installation guide offers multiple scenarios (see Tip 9.5). According to the guide, it is possible to install the extension from the Terminal and from the Console. However, in our experience, the console sometimes lead to errors, which is why we recommend to use the Terminal.\nSteps to install the apaquarto extension:\n\nOpen your project folder in RStudio. In the folder you should write the Quarto document.\nGo to the terminal in RStudio\nType the following command in the command line of the Terminal:\n\n\n\n\nTerminal\n\nquarto add wjschne/apaquarto\n\n\n\nYou will get an output like this:\n\n\n\n\nOutput\n\nQuarto extensions may execute code when documents are rendered.\nIf you do not trust the author of the extension,\nwe recommend that you do not install or use the extension.\n? Do you trust the authors of this extension (Y/n) &gt;\n\n\n\nType in Y and hit Enter. Then you will get another output like this:\n\n\n\n\nOutput\n\n\n[✔] Downloading\n[✔] Unzipping\n          Found 1 extensions.\n          \nThe following changes will be made:\nMy Document in APA Style, Seventh Edition    [No change]    (formats)\n? Would you like to continue (Y/n) &gt;\n\n\n\nAgain, type in Y and hit Enter. Your output should be like this:\n\n\n\n\nOutput\n\n\n[✔] Copying\n[✔] Extension installation complete\n\n? View documentation using default browser? (Y/n) &gt;\n\n\n\nNo the installation is finished. The Terminal asks you if you want to view the documentation online. It is the same we are referring to in Tip 9.5. No matter what you choose, you did successfully install the apaquarto extension.\n\nWhen you now look at your project directory, you can see that a new folder exists called _extensions. In that folder, there is a subfolder called wjschne, which, in turn, contains a subfolder apaquarto. In that apaquarto subfolder, there are many files that constitute the settings for the apaquarto extension. We recommend not to change anything in this _extensions folder and all its subfolders manually.\n\n\n\n\n\n\nTip 9.5: View: The apaquarto installation guide by William Joel Schneider\n\n\n\n\n\n https://wjschne.github.io/apaquarto/installation.html\n\n\n\n\n\n\n9.8.2 Implementing apaquarto in a quarto document\nYou now have the apaquarto extension installed, but when you render your Quarto document, it does not look like a document in APA style. A last (and simple) step is to change the YAML header of your Quarto document. You need to specify the format to be in apaquarto style. To do so write the code below into your YAML header, save the changes, and re-render your Quarto document.\n\n\n\nYAML header\n\nformat:\n1  apaquarto-docx: default\n\n\n\n1\n\nThis code renders your Quarto document to an APA styled Word Document. You can use apaquarto-html or apaquarto-pdf to render your .qmd file to a html or PDF file, respectively.\n\n\n\n\nNow, your rendered Quarto document should be in APA style. However, R would not be R and Quarto would not be Quarto if there is a small detail to consider. This only works, when the Quarto document is placed in the same folder as the _extensions folder.\n\n\n\n\n\n\nCorrect storage of your quarto file\n\n\n\nMake sure that your Quarto document (.qmd) is stored in the same folder as your _extensions folder!\n\nCorrect placementIncorrect placement\n\n\nProject Structure\n.\n| my-project.Rproj\n| .gitignore\n| README.html\n| README.md\n| apa-styled-quarto-document.qmd\n| apa-styled-quarto-document.docx\n| _extensions\n  |-- wjschne\n    |-- apaquarto\n| code\n| data\n| renv\nAbove is displayed an excerpt of a project structure where the apaquarto extension works correctly. The .qmd-file is at the same folder as the _extensions folder.\n\n\nProject Structure\n.\n| my-project.Rproj\n| .gitignore\n| README.html\n| README.md\n| apa-styled-quarto-document.qmd\n| _extensions\n  |-- wjschne\n    |-- apaquarto\n| code\n| data\n| report\n  |--apa-styled-quarto-document.qmd\n| renv\nAbove is displayed an excerpt of a project structure where the apaquarto extension does not work correctly. The .qmd-file is not at the same folder as the _extensions folder. Rather the .qmd file is located in the reports folder. Thus, the .qmd file is located on layer below the _extensions folder. Consequently, the apaquarto extension crushes when rerendering the Quarto document (which is why there is no .docx file in this project structure compared to the one that works correctly).\n\n\n\n\n\n\n\n9.8.3 Deleting apaquarto\nIn case you are not completely flashed by these features of apaquarto (or you just do not have to submit your work in APA style), you might not need the apaquarto extension in your project and want to remove it. Despite dropping some tears, just type in the command below into your Terminal.\n\n\n\nTerminal\n\nquarto remove wjschne/apaquarto\n\n\nYou will get an output like this:\n\n\n\nOutput\n\n? Are you sure you'd like to remove My Document in APA Style, Seventh Edition? (Y/n) &gt;\n\n\nType in Y and hit Enter. If you see the message below, you successfully deleted the extension form your project.\n\n\n\nOutput\n\nExtension removed.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html#resources",
    "href": "chapters/literate-programming.html#resources",
    "title": "9  Literate Programming",
    "section": "9.9 Resources",
    "text": "9.9 Resources\n\nhttps://quarto.org/\nhttps://lennartwittkuhn.com/training/2023-12-01-training-quarto-uhh.html\nhttps://wjschne.github.io/apaquarto/\n\n\n\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nSchuck, Nicolas W., Ming Bo Cai, Robert C. Wilson, and Yael Niv. 2016. “Human Orbitofrontal Cortex Represents a Cognitive Map of State Space.” Neuron 91 (6): 1402–12. https://doi.org/10.1016/j.neuron.2016.08.019.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "chapters/literate-programming.html#footnotes",
    "href": "chapters/literate-programming.html#footnotes",
    "title": "9  Literate Programming",
    "section": "",
    "text": "LaTeX is another markup language, such as markdown. To create PDF files from Quarto documents, you do not need to learn the markup language, but you need a LaTeX installation. To do so, follow the link displayed in Figure 9.3 (https://yihui.org/tinytex).↩︎\nYou can also put it in a subfolder of your project, but then you have to specify the path in the YAML header, too.↩︎\nMany journals and universities require submissions to be in the APA format. Thus, we think it is useful for many students and researchers to know about this extension.↩︎",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "10  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Abele-Brehm, Andrea E., and Markus Bühner. 2016. “Wer soll die\nProfessur bekommen?” Psychologische Rundschau 67 (4):\n250–61. https://doi.org/10.1026/0033-3042/a000335.\n\n\nArtner, Richard, Thomas Verliefde, Sara Steegen, Sara Gomes, Frits\nTraets, Francis Tuerlinckx, and Wolf Vanpaemel. 2021. “The\nReproducibility of Statistical Results in Psychological Research: An\nInvestigation Using Unpublished Raw Data.” Psychological\nMethods 26: 527–46. https://doi.org/10.1037/met0000365.\n\n\nBakker, Arnold B., Evangelia Demerouti, and Ana Sanz-Vergel. 2023.\n“Job Demands-Resources Theory: Ten Years Later.” Annual\nReview of Organizational Psychology and Organizational Behavior 10\n(January): 25–53. https://doi.org/10.1146/annurev-orgpsych-120920-053933.\n\n\nBarker, Michelle, Neil P. Chue Hong, Daniel S. Katz, Anna-Lena\nLamprecht, Carlos Martinez-Ortiz, Fotis Psomopoulos, Jennifer Harrow, et\nal. 2022. “Introducing the FAIR Principles for Research\nSoftware.” Scientific Data 9: 622. https://doi.org/10.1038/s41597-022-01710-x.\n\n\nBegley, C. Glenn, and Lee M. Ellis. 2012. “Raise Standards for\nPreclinical Cancer Research.” Nature 483: 531–33. https://doi.org/10.1038/483531a.\n\n\nBroman, Karl W., and Kara H. Woo. 2018. “Data Organization in\nSpreadsheets.” The American Statistician 72 (1): 2–10.\nhttps://doi.org/10.1080/00031305.2017.1375989.\n\n\nBryan, Jenny. 2015. “How to Name Files.” https://speakerdeck.com/jennybc/how-to-name-files.\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6.\n\n\nCribb, Julian, and Tjempaka Sari. 2010. Open Science: Sharing\nKnowledge in the Global Century. CSIRO Publishing. https://doi.org/10.1071/9780643097643.\n\n\nCrüwell, Sophia, Deborah Apthorp, Bradley J. Baker, Lincoln Colling,\nMalte Elson, Sandra J. Geiger, Sebastian Lobentanzer, et al. 2023.\n“What’s in a Badge? A Computational Reproducibility Investigation\nof the Open Data Badge Policy in One Issue of Psychological\nScience.” Psychological Science 34: 513–22. https://doi.org/10.1177/09567976221140828.\n\n\nEsteban, Oscar, Christopher J. Markiewicz, Ross W. Blair, Craig A.\nMoodie, A. Ilkay Isik, Asier Erramuzpe, James D. Kent, et al. 2019.\n“fMRIPrep: A Robust Preprocessing Pipeline for Functional\nMRI.” Nature Methods 16 (January): 111–16. https://doi.org/10.1038/s41592-018-0235-4.\n\n\nFischetti, Tony. 2023. Assertr: Assertive Programming for r Analysis\nPipelines. https://doi.org/10.32614/CRAN.package.assertr.\n\n\nGoodhart, C. A. E. 1984. “Problems of Monetary Management: The UK\nExperience.” In, 91–121. Macmillan Education UK. https://doi.org/10.1007/978-1-349-17295-5_4.\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron\nCraddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016.\n“The Brain Imaging Data Structure, a Format for Organizing and\nDescribing Outputs of Neuroimaging Experiments.” Scientific\nData 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nHanson, Karen, Alisa Surkis, and Karen Yacobucci. 2019. “Data\nSharing and Management Snafu in 3 Short Acts.” https://doi.org/10.6084/M9.FIGSHARE.8061722.V1.\n\n\nHardwicke, Tom E., Manuel Bohn, Kyle MacDonald, Emily Hembacher, Michéle\nB. Nuijten, Benjamin N. Peloquin, Benjamin E. deMayo, Bria Long, Erica\nJ. Yoon, and Michael C. Frank. 2021. “Analytic Reproducibility in\nArticles Receiving Open Data Badges at the Journal *Psychological\nScience*: An Observational Study.” Royal Society Open\nScience 8: 201494. https://doi.org/10.1098/rsos.201494.\n\n\nHerndon, Thomas, Michael Ash, and Robert Pollin. 2014. “Does High\nPublic Debt Consistently Stifle Economic Growth? A Critique of Reinhart\nand Rogoff.” Cambridge Journal of Economics 38 (2):\n257–79. https://doi.org/10.1093/cje/bet075.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren,\nAlexander Rosenstock, and Indrajeet Patil. 2024. Lintr: A ’Linter’\nfor r Code. https://CRAN.R-project.org/package=lintr.\n\n\nJohn, Leslie K., George Loewenstein, and Drazen Prelec. 2012.\n“Measuring the Prevalence of Questionable Research Practices With\nIncentives for Truth Telling.” Psychological Science 23\n(5): 524–32. https://doi.org/10.1177/0956797611430953.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nLakomý, Martin, Renata Hlavová, and Hana Machackova. 2019. “Open\nScience and the Science-Society Relationship.” Society\n56: 246–55. https://doi.org/10.1007/s12115-019-00361-w.\n\n\nLaulié, Lyonel, Gabriel Briceño-Jiménez, and Gisselle Henríquez-Gomez.\n2023. “Exploring Self-Regulation Theory as a Mechanism of the\nEffects of Psychological Contract Fulfillment: The Role of Emotional\nIntelligence.” Frontiers in Psychology 14. https://doi.org/10.3389/fpsyg.2023.1090094.\n\n\nMcKiernan, Erin C, Philip E Bourne, C Titus Brown, Stuart Buck, Amye\nKenall, Jennifer Lin, Damon McDougall, et al. 2016. “How Open\nScience Helps Researchers Succeed.” eLife 5 (July). https://doi.org/10.7554/elife.16800.\n\n\nMüller, Kirill. 2020. Here: A Simpler Way to Find Your Files.\nhttps://here.r-lib.org/.\n\n\nNosek, Brian A., Tom E. Hardwicke, Hannah Moshontz, Aurélien Allard,\nKatherine S. Corker, Anna Dreber, Fiona Fidler, et al. 2022.\n“Replicability, Robustness, and Reproducibility in Psychological\nScience.” Annual Review of Psychology 73 (1): 719–48. https://doi.org/10.1146/annurev-psych-020821-114157.\n\n\nNuijten, Michèle B., and Jelte M. Wicherts. 2024. “Implementing\nStatcheck During Peer Review Is Related to a Steep Decline in\nStatistical-Reporting Inconsistencies.” Advances in Methods\nand Practices in Psychological Science 7. https://doi.org/10.1177/25152459241258945.\n\n\nObels, Pepijn, Daniël Lakens, Nicholas A. Coles, Jaroslav Gottfried, and\nSeth A. Green. 2020. “Analysis of Open Data and Computational\nReproducibility in Registered Reports in Psychology.”\nAdvances in Methods and Practices in Psychological Science 3:\n229–37. https://doi.org/10.1177/2515245920918872.\n\n\nOpen Science Collaboration. 2015. “Estimating the Reproducibility\nof Psychological Science.” Science 349 (August):\naac4716. https://doi.org/10.1126/science.aac4716.\n\n\nPoldrack, Russell A. 2019. “The Costs of Reproducibility.”\nNeuron 101 (1): 11–14. https://doi.org/https://doi.org/10.1016/j.neuron.2018.11.030.\n\n\nRapp, Albert. 2024. “Robust r Code That Will Work Forever with\nrenv.” YouTube. https://www.youtube.com/watch?v=Oen9xhEh8PY.\n\n\nReinhart, Carmen M., and Kenneth S. Rogoff. 2010. “Growth in a\nTime of Debt.” American Economic Review 100 (2): 573–78.\nhttps://doi.org/10.1257/aer.100.2.573.\n\n\nRennie, Nicola. 2024. “Writing Better r Code.” https://nrennie.rbind.io/training-better-r-code/.\n\n\nSchuck, Nicolas W., Ming Bo Cai, Robert C. Wilson, and Yael Niv. 2016.\n“Human Orbitofrontal Cortex Represents a Cognitive Map of State\nSpace.” Neuron 91 (6): 1402–12. https://doi.org/10.1016/j.neuron.2016.08.019.\n\n\nStroop, J. R. 1935. “Studies of Interference in Serial Verbal\nReactions.” Journal of Experimental Psychology 18:\n643–62. https://doi.org/10.1037/h0054651.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for\nReproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.\n\n\nUshey, Kevin, and Hadley Wickham. 2024. Renv: Project\nEnvironments. https://rstudio.github.io/renv/.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Jornal of\nStatistical Software 59 (10): 1–23. https://doi.org/10.18637/jss.v059.i10.\n\n\nWickham, H., M. Çetinkaya-Rundel, and G. Grolemund. 2023. R for Data\nScience: Import, Tidy, Transform, Visualize, and Model Data.\nO’Reilly Media. https://r4ds.hadley.nz.\n\n\nWikipedia Contributors. 2025. “Modularity.” https://en.wikipedia.org/wiki/Modularity.\n\n\nWilkinson, Mark D., Michel Dumontier, IJsbrand Jan Aalbersberg,\nGabrielle Appleton, Myles Axton, Arie Baak, Niklas Blomberg, et al.\n2016. “The FAIR Guiding Principles for Scientific Data Management\nand Stewardship.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.18.\n\n\nWilliams, J. M. G., A. Mathews, and C. MacLeod. 1996. “The\nEmotional Stroop Task and Psychopathology.” Psychological\nBulletin 120: 3–24. https://doi.org/10.1037/0033-2909.120.1.3.\n\n\nWittkuhn, Lennart, and Konrad Pagenstedt. 2024. Version Control\nBook. ZFDM Repository. https://doi.org/10.25592/uhhfdm.14149.\n\n\nYarkoni, Tal. 2018. “No, It’s Not the Incentives — It’s\nYou.” https://talyarkoni.org/blog/2018/10/02/no-its-not-the-incentives-its-you/.\n\n\nZiemann, M., Y. Eren, and A. El-Osta. 2016. “Gene Name Erorrs Are\nWidespread in the Scientific Literature.” Genome Biology\n17 (August). https://doi.org/10.1186/s13059-016-1044-7.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "Funding\nThis work is funded by the Digital and Data Literacy in Teaching Lab (DDLitLab), an initiative by the Center for Interdisciplinary Study Programs (Zentrum für Interdisziplinäre Studienangebote; ISA-Zentrum) at the University of Hamburg, Germany. The Digital and Data Literacy in Teaching Lab program is in turn funded by the Stiftung Innovation in der Hochschullehre (details about the funding program can be found here).",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#code",
    "href": "acknowledgements.html#code",
    "title": "Acknowledgements",
    "section": "Code",
    "text": "Code\nThis website is made with Quarto. The source code of this website can be found on GitHub.",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#images",
    "href": "acknowledgements.html#images",
    "title": "Acknowledgements",
    "section": "Images",
    "text": "Images\nImages are stored on Nextcloud (UHH Cloud). They can be retrieved using\n\n\n\nCode\n\nmake images\n\n\n\n\nClick here to view the full Makefile of this project.\n\n\n\n\nMakefile\n\nIMAGES_URL=https://cloud.uni-hamburg.de/s/pzEHT5DF3PzFdLH/download\nIMAGES_ARCHIVE=repro-book-images.zip\nIMAGES_DIR=images/\n\nall: render\n\n.PHONY: preview\npreview:\n    quarto preview\n\n.PHONY: render\nrender: clean images\n    quarto render\n\n.PHONY: pdf\npdf: clean images\n    quarto render --profile pdf\n    \n.PHONY: deploy\ndeploy: clean images\n    quarto publish gh-pages\n\n#.PHONY: images\n#images:\n#   curl $(IMAGES_URL) -o $(IMAGES_ARCHIVE)\n#   unzip -j -o $(IMAGES_ARCHIVE) -d $(IMAGES_DIR)\n#   rm -f $(IMAGES_ARCHIVE)\n\n.PHONY: clean\nclean:\n    rm -rf $(IMAGES_DIR)* _book/",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#analytics",
    "href": "acknowledgements.html#analytics",
    "title": "Acknowledgements",
    "section": "Analytics",
    "text": "Analytics\nWe use Plausible for website analytics. Plausible is an “intuitive, lightweight and open source web analytics”, does not use cookies and is fully compliant with GDPR, CCPA and PECR.",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#license",
    "href": "acknowledgements.html#license",
    "title": "Acknowledgements",
    "section": "License",
    "text": "License\nAll contents are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) license, unless indicated otherwise.",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "acknowledgements.html#contact",
    "href": "acknowledgements.html#contact",
    "title": "Acknowledgements",
    "section": "Contact",
    "text": "Contact\nDid you spot an error? Is there an issue with the website? Do you have feedback, questions or comments? We would love to hear from you! Please open an issue on GitHub or send an email. Thank you!\n\n\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.",
    "crumbs": [
      "Acknowledgements"
    ]
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "Contributing",
    "section": "",
    "text": "Overview\nGitHub: This section explains how to get the source code from Github to work on this project.\nRStudio Project: This section explains how to use RStudio Project to work on this project.\nQuarto: This section explains how to use Quarto to work on this project.\nDependency Management: This section explains how this project manages package dependencies using renv.\nCode: This section explains how to add code snippets.\nImages: This section e explains how to add images.\nReferences: This section explains how to add references.\nVariables: This section explains how to use variables.\nFontawesome Icons: This section explains how to add icons.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-github",
    "href": "contributing.html#sec-github",
    "title": "Contributing",
    "section": "GitHub",
    "text": "GitHub\nThis book is developed with Git and within the  GitHub-environment. You can download the source code from GitHub by clicking on the Code-Button. You must then press either Open with GitHub Desktop (requires  GitHub Desktop) or Download ZIP. For a detailed introduction on Git and GitHub see this Version Control Book. For an overview about the project structure of this Reproducibility Book, look at the README.md-file on GitHub.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-rstudio-project",
    "href": "contributing.html#sec-rstudio-project",
    "title": "Contributing",
    "section": "RStudio Project",
    "text": "RStudio Project\n\n “Using RStudio Projects”\n\nWe recommend working in RStudio and open the RStudio Project.\n\n RStudio Terminal\n\n\n\nDouble-click on the project file repro-book.Rproj within your computer’s file system (for example, macOS Finder).\n\n\n\nIn the Terminal, run:\n\nopen repro-book.Rproj\n\nThis will open the RStudio Project in RStudio.\n\n\n\n\n\n Click here to view the full repro-book.Rproj file of this project.\n\n\n\n\nrepro-book.Rproj\n\nVersion: 1.0\n\nRestoreWorkspace: No\nSaveWorkspace: No\nAlwaysSaveHistory: No\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n\nBuildType: Makefile\n\nMarkdownWrap: Sentence",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-quarto",
    "href": "contributing.html#sec-quarto",
    "title": "Contributing",
    "section": "Quarto",
    "text": "Quarto\nThis book is made with Quarto.\n\nLocal development\n\nSetup\n\nRead the Get Started chapter of the Quarto documentation, which includes details on installation.\n\n\n\nPreparation\n\nRead this guide on how to contribute.\nFamiliarize yourself with Quarto Books.\n\n\n\nLocal preview\n\nquarto preview\n\n\n\n\nAdd a new chapter\n\nCreate a new Quarto document inside the /chapters/ folder.\nAdd the new chapter to _quarto.yml. Don’t forget to specify the full path (including chapters/).\n\n\n\n\n_quarto.yml (excerpt)\n\nchapters:\n  - index.qmd\n1  - chapters/YOUR-NEW-CHAPTER.qmd\n  - another-chapter.qmd\n\n\n\n1\n\nReplace YOUR-NEW-CHAPTER with a concise filename.\n\n\n\n\n\n\n Click here to view the full _quarto.yml file of this project.\n\n\n\n\n_quarto.yml\n\nproject:\n  type: book\n  execute-dir: project\n  output-dir: _book\n  preview: \n    port: 7777\n    host: 127.0.0.1\n    browser: true\n    watch-inputs: true\n    navigate: true\n\nbook:\n  # book:\n  title: \"The Repro Book\"\n  subtitle: \"A Guide to Reproducible Research\"\n  # favicon: static/logo.svg\n  site-url: https://lennartwittkuhn.com/repro-book/\n  repo-url: https://github.com/lnnrtwttkhn/repro-book/\n  repo-branch: main\n  issue-url: https://github.com/lnnrtwttkhn/repro-book/issues\n  repo-actions: [edit, issue, source]\n  page-navigation: true\n  back-to-top-navigation: true\n  search: true\n  twitter-card: false\n  chapters:\n    - index.qmd\n    - contents.qmd\n    - chapters/intro.qmd\n    - chapters/motivation-for-reproducibility.qmd\n    - chapters/naming-things.qmd\n    - chapters/project-structure.qmd\n    - chapters/rdm.qmd\n    - chapters/git-crashcourse.qmd\n    - chapters/good-coding-practices.qmd\n    - chapters/renv.qmd\n    - chapters/literate-programming.qmd\n    - summary.qmd\n    - references.qmd\n    - acknowledgements.qmd\n    - contributing.qmd\n  sidebar:\n    id: sidebar\n    title: \"{{&lt; var project.title &gt;}}\"\n    # logo: static/logo.svg\n    search: true\n    tools:\n      - icon: globe\n        href: https://lennartwittkuhn.com/repro-book/\n      - icon: bug\n        href: https://github.com/lnnrtwttkhn/repro-book/\n    style: floating\n    type: light\n    border: false\n    alignment: center\n    collapse-level: 2\n    pinned: true\n    footer: |\n      [![Website](https://img.shields.io/website?url=https%3A%2F%2Flennartwittkuhn.com%2Frepro-book%2F)]({{&lt; var project.site-url &gt;}})\n      [![License: CC BY 4.0](https://img.shields.io/badge/License-CC_BY_4.0-lightgrey.svg)](https://creativecommons.org/licenses/by/4.0/)\n      [![Quarto Publish]({{&lt; var project.repo-url &gt;}}/actions/workflows/publish.yml/badge.svg)]({{&lt; var project.repo-url &gt;}}/actions/workflows/publish.yml)\n      [![Codespell]({{&lt; var project.repo-url &gt;}}/actions/workflows/codespell.yml/badge.svg)]({{&lt; var project.repo-url &gt;}}/actions/workflows/codespell.yml)\n      [![All Contributors](https://img.shields.io/github/all-contributors/projectOwner/projectName?color=ee8449&style=flat-square)]({{&lt; var project.contributors-url &gt;}})\n  page-footer:\n    left: |\n      &copy; {{&lt; var project.duration &gt;}} [{{&lt; var project.title &gt;}} Team]({{&lt; var project.contributors-url &gt;}})\n    center:\n      - text: \"Acknowledgements\"\n        href: acknowledgements.qmd\n    right: |\n      License: {{&lt; var project.license-short &gt;}}\n    border: false\n    background: light\n\ntoc: true\ntoc-depth: 3\ntoc-location: right\ntoc-title: \"Contents\"\nnumber-sections: true\nnumber-depth: 4\ncap-location: bottom\ncode-line-numbers: false\ncode-annotations: below\nhighlight-style: monokai\nreference-location: document  \nlang: en-US  \nbibliography: references.bib\ncitations-hover: true\ncitation-location: document\nciteproc: true\nfrom: markdown+emoji\nlicense: CC BY\nabstract-title: \"Summary\"\nmetadata-files:\n  - _images.yml\n\nformat:\n  html:\n    theme: [default, custom.scss]\n    anchor-sections: true\n    smooth-scroll: true\n    toc-expand: 2\n    page-layout: full\n    title-block-style: default\n    code-fold: false\n    code-overflow: scroll\n    code-copy: true\n    code-link: false\n    code-tools: false\n    link-external-newwindow: true\n    footnotes-hover: true\n    include-after-body: plausible.html\n    crossref:\n      custom:\n        - kind: float\n          reference-prefix: Video\n          key: vid",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-dependency-management",
    "href": "contributing.html#sec-dependency-management",
    "title": "Contributing",
    "section": "Dependency Management",
    "text": "Dependency Management\nWe use renv for project-local  dependency management. For details on renv, see the renv documentation.\n\nUsing renv for the first time\nAfter you open the Rstudio Project, you will (hopefully) see a similar output in the RStudio console:\n\n\n\nOutput\n\n# Bootstrapping renv 0.17.3 --------------------------------------------------\n* Downloading renv 0.17.3 ... OK (downloaded binary)\n* Installing renv 0.17.3 ... Done!\n* Successfully installed and loaded renv 0.17.3.\n* Project '~/repro-book' loaded. [renv 0.17.3]\n* This project contains a lockfile, but none of the recorded packages are installed.\n* Use `renv::restore()` to restore the project library.\n\n\nThis output tells you that (1) renv was automatically installed and loaded, (2) the renv environment for the project was loaded, and (3) that none of packages recorded in the renv lockfile are installed.\nThe renv lockfile captures the state of the package library of the project at some point in time. It is defining the version of renv used when generating the lockfile, the version of  used in that project, the R repositories that were active when the lockfile was created and the package records defining each  package, their version, and their installation source. For details on the anatomy of renv.lock, see this section in the renv documentation.\n\n\n Click here to view the full renv.lock file of this project.\n\n\n\n\nrenv.lock\n\n{\n  \"R\": {\n    \"Version\": \"4.4.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://packagemanager.posit.co/cran/latest\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"MASS\": {\n      \"Package\": \"MASS\",\n      \"Version\": \"7.3-61\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"graphics\",\n        \"methods\",\n        \"stats\",\n        \"utils\"\n      ],\n      \"Hash\": \"0cafd6f0500e5deba33be22c46bf6055\"\n    },\n    \"R6\": {\n      \"Package\": \"R6\",\n      \"Version\": \"2.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"470851b6d5d0ac559e9d01bb352b4021\"\n    },\n    \"assertr\": {\n      \"Package\": \"assertr\",\n      \"Version\": \"3.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"MASS\",\n        \"R\",\n        \"dplyr\",\n        \"methods\",\n        \"rlang\",\n        \"stats\",\n        \"utils\"\n      ],\n      \"Hash\": \"dd34511e88d11c95e80f8d9bb0606e79\"\n    },\n    \"backports\": {\n      \"Package\": \"backports\",\n      \"Version\": \"1.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"e1e1b9d75c37401117b636b7ae50827a\"\n    },\n    \"base64enc\": {\n      \"Package\": \"base64enc\",\n      \"Version\": \"0.1-3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"543776ae6848fde2f48ff3816d0628bc\"\n    },\n    \"bslib\": {\n      \"Package\": \"bslib\",\n      \"Version\": \"0.8.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"cachem\",\n        \"fastmap\",\n        \"grDevices\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"lifecycle\",\n        \"memoise\",\n        \"mime\",\n        \"rlang\",\n        \"sass\"\n      ],\n      \"Hash\": \"b299c6741ca9746fb227debcb0f9fb6c\"\n    },\n    \"cachem\": {\n      \"Package\": \"cachem\",\n      \"Version\": \"1.1.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"fastmap\",\n        \"rlang\"\n      ],\n      \"Hash\": \"cd9a672193789068eb5a2aad65a0dedf\"\n    },\n    \"callr\": {\n      \"Package\": \"callr\",\n      \"Version\": \"3.7.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"processx\",\n        \"utils\"\n      ],\n      \"Hash\": \"d7e13f49c19103ece9e58ad2d83a7354\"\n    },\n    \"cli\": {\n      \"Package\": \"cli\",\n      \"Version\": \"3.6.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"b21916dd77a27642b447374a5d30ecf3\"\n    },\n    \"codetools\": {\n      \"Package\": \"codetools\",\n      \"Version\": \"0.2-20\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"61e097f35917d342622f21cdc79c256e\"\n    },\n    \"cpp11\": {\n      \"Package\": \"cpp11\",\n      \"Version\": \"0.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"91570bba75d0c9d3f1040c835cee8fba\"\n    },\n    \"crayon\": {\n      \"Package\": \"crayon\",\n      \"Version\": \"1.5.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"grDevices\",\n        \"methods\",\n        \"utils\"\n      ],\n      \"Hash\": \"859d96e65ef198fd43e82b9628d593ef\"\n    },\n    \"cyclocomp\": {\n      \"Package\": \"cyclocomp\",\n      \"Version\": \"1.1.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"callr\",\n        \"crayon\",\n        \"desc\",\n        \"remotes\",\n        \"withr\"\n      ],\n      \"Hash\": \"cdc4a473222b0112d4df0bcfbed12d44\"\n    },\n    \"data.table\": {\n      \"Package\": \"data.table\",\n      \"Version\": \"1.16.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"2e00b378fc3be69c865120d9f313039a\"\n    },\n    \"desc\": {\n      \"Package\": \"desc\",\n      \"Version\": \"1.4.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"cli\",\n        \"utils\"\n      ],\n      \"Hash\": \"99b79fcbd6c4d1ce087f5c5c758b384f\"\n    },\n    \"digest\": {\n      \"Package\": \"digest\",\n      \"Version\": \"0.6.37\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"33698c4b3127fc9f506654607fb73676\"\n    },\n    \"dplyr\": {\n      \"Package\": \"dplyr\",\n      \"Version\": \"1.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"cli\",\n        \"generics\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"methods\",\n        \"pillar\",\n        \"rlang\",\n        \"tibble\",\n        \"tidyselect\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"fedd9d00c2944ff00a0e2696ccf048ec\"\n    },\n    \"evaluate\": {\n      \"Package\": \"evaluate\",\n      \"Version\": \"1.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"3fd29944b231036ad67c3edb32e02201\"\n    },\n    \"fansi\": {\n      \"Package\": \"fansi\",\n      \"Version\": \"1.0.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"utils\"\n      ],\n      \"Hash\": \"962174cf2aeb5b9eea581522286a911f\"\n    },\n    \"fastmap\": {\n      \"Package\": \"fastmap\",\n      \"Version\": \"1.2.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"aa5e1cd11c2d15497494c5292d7ffcc8\"\n    },\n    \"fontawesome\": {\n      \"Package\": \"fontawesome\",\n      \"Version\": \"0.5.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"htmltools\",\n        \"rlang\"\n      ],\n      \"Hash\": \"bd1297f9b5b1fc1372d19e2c4cd82215\"\n    },\n    \"fs\": {\n      \"Package\": \"fs\",\n      \"Version\": \"1.6.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"7f48af39fa27711ea5fbd183b399920d\"\n    },\n    \"generics\": {\n      \"Package\": \"generics\",\n      \"Version\": \"0.1.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"15e9634c0fcd294799e9b2e929ed1b86\"\n    },\n    \"glue\": {\n      \"Package\": \"glue\",\n      \"Version\": \"1.8.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"5899f1eaa825580172bb56c08266f37c\"\n    },\n    \"here\": {\n      \"Package\": \"here\",\n      \"Version\": \"1.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"rprojroot\"\n      ],\n      \"Hash\": \"24b224366f9c2e7534d2344d10d59211\"\n    },\n    \"highr\": {\n      \"Package\": \"highr\",\n      \"Version\": \"0.11\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"xfun\"\n      ],\n      \"Hash\": \"d65ba49117ca223614f71b60d85b8ab7\"\n    },\n    \"htmltools\": {\n      \"Package\": \"htmltools\",\n      \"Version\": \"0.5.8.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"digest\",\n        \"fastmap\",\n        \"grDevices\",\n        \"rlang\",\n        \"utils\"\n      ],\n      \"Hash\": \"81d371a9cc60640e74e4ab6ac46dcedc\"\n    },\n    \"htmlwidgets\": {\n      \"Package\": \"htmlwidgets\",\n      \"Version\": \"1.6.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"grDevices\",\n        \"htmltools\",\n        \"jsonlite\",\n        \"knitr\",\n        \"rmarkdown\",\n        \"yaml\"\n      ],\n      \"Hash\": \"04291cc45198225444a397606810ac37\"\n    },\n    \"jquerylib\": {\n      \"Package\": \"jquerylib\",\n      \"Version\": \"0.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"htmltools\"\n      ],\n      \"Hash\": \"5aab57a3bd297eee1c1d862735972182\"\n    },\n    \"jsonlite\": {\n      \"Package\": \"jsonlite\",\n      \"Version\": \"1.8.9\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"methods\"\n      ],\n      \"Hash\": \"4e993b65c2c3ffbffce7bb3e2c6f832b\"\n    },\n    \"knitr\": {\n      \"Package\": \"knitr\",\n      \"Version\": \"1.49\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"evaluate\",\n        \"highr\",\n        \"methods\",\n        \"tools\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"9fcb189926d93c636dea94fbe4f44480\"\n    },\n    \"lazyeval\": {\n      \"Package\": \"lazyeval\",\n      \"Version\": \"0.2.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"d908914ae53b04d4c0c0fd72ecc35370\"\n    },\n    \"lifecycle\": {\n      \"Package\": \"lifecycle\",\n      \"Version\": \"1.0.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"rlang\"\n      ],\n      \"Hash\": \"b8552d117e1b808b09a832f589b79035\"\n    },\n    \"lintr\": {\n      \"Package\": \"lintr\",\n      \"Version\": \"3.1.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"backports\",\n        \"codetools\",\n        \"cyclocomp\",\n        \"digest\",\n        \"glue\",\n        \"knitr\",\n        \"rex\",\n        \"stats\",\n        \"utils\",\n        \"xml2\",\n        \"xmlparsedata\"\n      ],\n      \"Hash\": \"08cff46381a242d44c0d8dd0aabd9f71\"\n    },\n    \"magrittr\": {\n      \"Package\": \"magrittr\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"7ce2733a9826b3aeb1775d56fd305472\"\n    },\n    \"memoise\": {\n      \"Package\": \"memoise\",\n      \"Version\": \"2.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"cachem\",\n        \"rlang\"\n      ],\n      \"Hash\": \"e2817ccf4a065c5d9d7f2cfbe7c1d78c\"\n    },\n    \"mime\": {\n      \"Package\": \"mime\",\n      \"Version\": \"0.12\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"tools\"\n      ],\n      \"Hash\": \"18e9c28c1d3ca1560ce30658b22ce104\"\n    },\n    \"pillar\": {\n      \"Package\": \"pillar\",\n      \"Version\": \"1.9.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"cli\",\n        \"fansi\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\",\n        \"utf8\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"15da5a8412f317beeee6175fbc76f4bb\"\n    },\n    \"pkgconfig\": {\n      \"Package\": \"pkgconfig\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"01f28d4278f15c76cddbea05899c5d6f\"\n    },\n    \"processx\": {\n      \"Package\": \"processx\",\n      \"Version\": \"3.8.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"ps\",\n        \"utils\"\n      ],\n      \"Hash\": \"0c90a7d71988856bad2a2a45dd871bb9\"\n    },\n    \"ps\": {\n      \"Package\": \"ps\",\n      \"Version\": \"1.8.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"b4404b1de13758dea1c0484ad0d48563\"\n    },\n    \"purrr\": {\n      \"Package\": \"purrr\",\n      \"Version\": \"1.0.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"rlang\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"1cba04a4e9414bdefc9dcaa99649a8dc\"\n    },\n    \"rappdirs\": {\n      \"Package\": \"rappdirs\",\n      \"Version\": \"0.3.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"5e3c5dc0b071b21fa128676560dbe94d\"\n    },\n    \"remotes\": {\n      \"Package\": \"remotes\",\n      \"Version\": \"2.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\",\n        \"stats\",\n        \"tools\",\n        \"utils\"\n      ],\n      \"Hash\": \"3ee025083e66f18db6cf27b56e23e141\"\n    },\n    \"renv\": {\n      \"Package\": \"renv\",\n      \"Version\": \"1.0.11\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"47623f66b4e80b3b0587bc5d7b309888\"\n    },\n    \"rex\": {\n      \"Package\": \"rex\",\n      \"Version\": \"1.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"lazyeval\"\n      ],\n      \"Hash\": \"ae34cd56890607370665bee5bd17812f\"\n    },\n    \"rlang\": {\n      \"Package\": \"rlang\",\n      \"Version\": \"1.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"3eec01f8b1dee337674b2e34ab1f9bc1\"\n    },\n    \"rmarkdown\": {\n      \"Package\": \"rmarkdown\",\n      \"Version\": \"2.29\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"bslib\",\n        \"evaluate\",\n        \"fontawesome\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"knitr\",\n        \"methods\",\n        \"tinytex\",\n        \"tools\",\n        \"utils\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"df99277f63d01c34e95e3d2f06a79736\"\n    },\n    \"rprojroot\": {\n      \"Package\": \"rprojroot\",\n      \"Version\": \"2.0.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"4c8415e0ec1e29f3f4f6fc108bef0144\"\n    },\n    \"sass\": {\n      \"Package\": \"sass\",\n      \"Version\": \"0.4.9\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R6\",\n        \"fs\",\n        \"htmltools\",\n        \"rappdirs\",\n        \"rlang\"\n      ],\n      \"Hash\": \"d53dbfddf695303ea4ad66f86e99b95d\"\n    },\n    \"stringi\": {\n      \"Package\": \"stringi\",\n      \"Version\": \"1.8.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"stats\",\n        \"tools\",\n        \"utils\"\n      ],\n      \"Hash\": \"39e1144fd75428983dc3f63aa53dfa91\"\n    },\n    \"stringr\": {\n      \"Package\": \"stringr\",\n      \"Version\": \"1.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"rlang\",\n        \"stringi\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"960e2ae9e09656611e0b8214ad543207\"\n    },\n    \"tibble\": {\n      \"Package\": \"tibble\",\n      \"Version\": \"3.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"fansi\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"methods\",\n        \"pillar\",\n        \"pkgconfig\",\n        \"rlang\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"a84e2cc86d07289b3b6f5069df7a004c\"\n    },\n    \"tidyr\": {\n      \"Package\": \"tidyr\",\n      \"Version\": \"1.3.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"cpp11\",\n        \"dplyr\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"purrr\",\n        \"rlang\",\n        \"stringr\",\n        \"tibble\",\n        \"tidyselect\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"915fb7ce036c22a6a33b5a8adb712eb1\"\n    },\n    \"tidyselect\": {\n      \"Package\": \"tidyselect\",\n      \"Version\": \"1.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\",\n        \"vctrs\",\n        \"withr\"\n      ],\n      \"Hash\": \"829f27b9c4919c16b593794a6344d6c0\"\n    },\n    \"tinytex\": {\n      \"Package\": \"tinytex\",\n      \"Version\": \"0.54\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"xfun\"\n      ],\n      \"Hash\": \"3ec7e3ddcacc2d34a9046941222bf94d\"\n    },\n    \"utf8\": {\n      \"Package\": \"utf8\",\n      \"Version\": \"1.2.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"62b65c52671e6665f803ff02954446e9\"\n    },\n    \"vctrs\": {\n      \"Package\": \"vctrs\",\n      \"Version\": \"0.6.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\"\n      ],\n      \"Hash\": \"c03fa420630029418f7e6da3667aac4a\"\n    },\n    \"withr\": {\n      \"Package\": \"withr\",\n      \"Version\": \"3.0.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"graphics\"\n      ],\n      \"Hash\": \"cc2d62c76458d425210d1eb1478b30b4\"\n    },\n    \"wordcloud2\": {\n      \"Package\": \"wordcloud2\",\n      \"Version\": \"0.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"grDevices\",\n        \"graphics\",\n        \"htmlwidgets\"\n      ],\n      \"Hash\": \"10274bd096f5c2ad7471ea0eea0c1424\"\n    },\n    \"xfun\": {\n      \"Package\": \"xfun\",\n      \"Version\": \"0.49\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"RSPM\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"stats\",\n        \"tools\"\n      ],\n      \"Hash\": \"8687398773806cfff9401a2feca96298\"\n    },\n    \"xml2\": {\n      \"Package\": \"xml2\",\n      \"Version\": \"1.3.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"methods\",\n        \"rlang\"\n      ],\n      \"Hash\": \"1d0336142f4cd25d8d23cd3ba7a8fb61\"\n    },\n    \"xmlparsedata\": {\n      \"Package\": \"xmlparsedata\",\n      \"Version\": \"1.0.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"45e4bf3c46476896e821fc0a408fb4fc\"\n    },\n    \"yaml\": {\n      \"Package\": \"yaml\",\n      \"Version\": \"2.3.10\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"51dab85c6c98e50a18d7551e9d49f76c\"\n    }\n  }\n}\n\n\n\n\n\nRestoring renv\nIf renv is activated but it recognized that the packages listed in the renv.lock file are not installed (or not all of them), renv will suggest to restore the project library using renv::restore():\n\n\n\nOutput\n\n* This project contains a lockfile, but none of the recorded packages are installed.\n* Use `renv::restore()` to restore the project library.\n\n\n\nrenv::restore()\n\nThis will generate a list of files that will be updated.\n\n\n Click here to view an example output of the renv::restore() command.\n\n\nThe following package(s) will be updated:\n\n# CRAN ===============================\n- R6            [* -&gt; 2.5.1]\n- base64enc     [* -&gt; 0.1-3]\n- bslib         [* -&gt; 0.5.0]\n- cachem        [* -&gt; 1.0.8]\n- cli           [* -&gt; 3.6.1]\n- data.table    [* -&gt; 1.14.8]\n- digest        [* -&gt; 0.6.31]\n- ellipsis      [* -&gt; 0.3.2]\n- evaluate      [* -&gt; 0.21]\n- fastmap       [* -&gt; 1.1.1]\n- fontawesome   [* -&gt; 0.5.1]\n- fs            [* -&gt; 1.6.2]\n- glue          [* -&gt; 1.6.2]\n- here          [* -&gt; 1.0.1]\n- highr         [* -&gt; 0.10]\n- htmltools     [* -&gt; 0.5.5]\n- jquerylib     [* -&gt; 0.1.4]\n- jsonlite      [* -&gt; 1.8.5]\n- knitr         [* -&gt; 1.43]\n- lifecycle     [* -&gt; 1.0.3]\n- magrittr      [* -&gt; 2.0.3]\n- memoise       [* -&gt; 2.0.1]\n- mime          [* -&gt; 0.12]\n- rappdirs      [* -&gt; 0.3.3]\n- rlang         [* -&gt; 1.1.1]\n- rmarkdown     [* -&gt; 2.22]\n- rprojroot     [* -&gt; 2.0.3]\n- sass          [* -&gt; 0.4.6]\n- stringi       [* -&gt; 1.7.12]\n- stringr       [* -&gt; 1.5.0]\n- tinytex       [* -&gt; 0.45]\n- vctrs         [* -&gt; 0.6.3]\n- xfun          [* -&gt; 0.39]\n- yaml          [* -&gt; 2.3.7]\n\nDo you want to proceed? [y/N]: \n\n\nIf you want to proceed with the update, type YY and hit enter.\n\n\nInstalling / removing packages\n\nInstall packages:\n\n\n\nCode\n\n1install.packages(\"PACKAGE_NAME\")\n2renv::install(\"PACKAGE_NAME\")\n\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you want to install.\n\n2\n\nReplace PACKAGE_NAME with the actual name of the package that you want to install.\n\n\n\n\n\n\nRemove packages:\n\n\n\nCode\n\n1remove.packages(\"PACKAGE_NAME\")\n2renv::remove(\"PACKAGE_NAME\")\n\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you want to remove.\n\n2\n\nReplace PACKAGE_NAME with the actual name of the package that you want to remove.\n\n\n\n\nCall renv::snapshot() to save the new state of the project library to the renv.lock:\n\n\n\nCode\n\nrenv::snapshot()\n\n\n\n\n\nCommit your changes\nThe renv.lock is checked into version control, so after you updated it, make a new commit:\n\n\n\nCode\n\ngit add renv.lock\n1git commit -m \"Add package PACKAGE_NAME to renv\"\n\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you installed. Adapt the commit message as needed.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-references",
    "href": "contributing.html#sec-references",
    "title": "Contributing",
    "section": "References",
    "text": "References\n\n “Citations & Footnotes” in the Quarto documentation.\n HTML options for references.\n\n\nCite a reference\nReferences are stored in references.bib.\n\n\n Click here to view the full references.bib file of this project.\n\n\n\n\nreferences.bib\n\n@article{knuth84,\n  author = {Knuth, Donald E.},\n  title = {Literate Programming},\n  year = {1984},\n  issue_date = {May 1984},\n  publisher = {Oxford University Press, Inc.},\n  address = {USA},\n  volume = {27},\n  number = {2},\n  issn = {0010-4620},\n  url = {https://doi.org/10.1093/comjnl/27.2.97},\n  doi = {10.1093/comjnl/27.2.97},\n  journal = {Comput. J.},\n  month = may,\n  pages = {97–111},\n  numpages = {15}\n}\n\n@article{bakker2023,\n  author = {Bakker, Arnold B. and Demerouti, Evangelia and Sanz-Vergel, Ana},\n  title = {Job Demands-Resources Theory: Ten Years Later},\n  issue_date = {January 2023},\n  publisher = {Annual Review of Organizational Psychology and Organizational Behavior},\n  volume = {10},\n  url = {https://doi.org/10.1146/annurev-orgpsych-120920-053933},\n  doi = {10.1146/annurev-orgpsych-120920-053933},\n  journal = {Annual Review of Organizational Psychology and Organizational Behavior},\n  month = jan,\n  year = {2023},\n  pages = {25-53},\n  numpages = {29}\n}\n\n@inbook{goodhart1984,\n    title = {Problems of Monetary Management: The UK Experience},\n    author = {Goodhart, C. A. E.},\n    year = {1984},\n    date = {1984},\n    publisher = {Macmillan Education UK},\n    pages = {91--121},\n    doi = {10.1007/978-1-349-17295-5_4},\n    url = {http://dx.doi.org/10.1007/978-1-349-17295-5_4},\n    langid = {en}\n}\n\n@article{mckiernan2016,\n    title = {How open science helps researchers succeed},\n    author = {McKiernan, Erin C and Bourne, Philip E and Brown, C Titus and Buck, Stuart and Kenall, Amye and Lin, Jennifer and McDougall, Damon and Nosek, Brian A and Ram, Karthik and Soderberg, Courtney K and Spies, Jeffrey R and Thaney, Kaitlin and Updegrove, Andrew and Woo, Kara H and Yarkoni, Tal},\n    year = {2016},\n    month = {07},\n    date = {2016-07-07},\n    journal = {eLife},\n    volume = {5},\n    doi = {10.7554/elife.16800},\n    url = {http://dx.doi.org/10.7554/eLife.16800},\n    langid = {en}\n}\n\n@article{abele-brehm2016,\n    title = {Wer soll die Professur bekommen?},\n    author = {Abele-Brehm, Andrea E. and {Bühner}, Markus},\n    year = {2016},\n    month = {10},\n    date = {2016-10},\n    journal = {Psychologische Rundschau},\n    pages = {250--261},\n    volume = {67},\n    number = {4},\n    doi = {10.1026/0033-3042/a000335},\n    url = {http://dx.doi.org/10.1026/0033-3042/a000335},\n    langid = {de}\n}\n\n@article{john2012,\n    title = {Measuring the Prevalence of Questionable Research Practices With Incentives for Truth Telling},\n    author = {John, Leslie K. and Loewenstein, George and Prelec, Drazen},\n    year = {2012},\n    month = {04},\n    date = {2012-04-16},\n    journal = {Psychological Science},\n    pages = {524--532},\n    volume = {23},\n    number = {5},\n    doi = {10.1177/0956797611430953},\n    url = {http://dx.doi.org/10.1177/0956797611430953},\n    langid = {en}\n}\n\n@article{nosek2022,\n    title = {Replicability, Robustness, and Reproducibility in Psychological Science},\n    author = {Nosek, Brian A. and Hardwicke, Tom E. and Moshontz, Hannah and Allard, {Aurélien} and Corker, Katherine S. and Dreber, Anna and Fidler, Fiona and Hilgard, Joe and Kline Struhl, Melissa and Nuijten, {Michèle B.} and Rohrer, Julia M. and Romero, Felipe and Scheel, Anne M. and Scherer, Laura D. and {Schönbrodt}, Felix D. and Vazire, Simine},\n    year = {2022},\n    month = {01},\n    date = {2022-01-04},\n    journal = {Annual Review of Psychology},\n    pages = {719--748},\n    volume = {73},\n    number = {1},\n    doi = {10.1146/annurev-psych-020821-114157},\n    url = {http://dx.doi.org/10.1146/annurev-psych-020821-114157},\n    langid = {en}\n}\n\n@misc{bryan2015,\n  author = {Bryan, Jenny},\n  title = {How to name files},\n  year = {2015},\n  month = {May},\n  note = {[Online; accessed 19. Nov. 2020]},\n  url = {https://speakerdeck.com/jennybc/how-to-name-files}\n}\n\n@book{chacon2014,\n    title = {Pro Git},\n    author = {Chacon, Scott and Straub, Ben},\n    year = {2014},\n    date = {2014},\n    publisher = {Apress},\n    doi = {10.1007/978-1-4842-0076-6},\n    url = {http://dx.doi.org/10.1007/978-1-4842-0076-6},\n    note = {License: CC BY-NC}\n}\n@article{hanson2019,\n    title = {Data Sharing and Management Snafu in 3 Short Acts},\n    author = {Hanson, Karen and Surkis, Alisa and Yacobucci, Karen},\n    year = {2019},\n    date = {2019},\n    doi = {10.6084/M9.FIGSHARE.8061722.V1},\n    url = {https://figshare.com/articles/Data_Sharing_and_Management_Snafu_in_3_Short_Acts/8061722/1}\n}\n\n@book{gau2022,\n    title = {Remi-Gau/bids{\\_}workshop: v0.1.1},\n    author = {Gau, Remi},\n    year = {2022},\n    month = {10},\n    date = {2022-10-09},\n    publisher = {Zenodo},\n    doi = {10.5281/ZENODO.7178587},\n    url = {https://zenodo.org/record/7178587}\n}\n\n@article{wilkinson2016,\n    title = {The FAIR Guiding Principles for scientific data management and stewardship},\n    author = {Wilkinson, Mark D. and Dumontier, Michel and Aalbersberg, IJsbrand Jan and Appleton, Gabrielle and Axton, Myles and Baak, Arie and Blomberg, Niklas and Boiten, Jan-Willem and da Silva Santos, Luiz Bonino and Bourne, Philip E. and Bouwman, Jildau and Brookes, Anthony J. and Clark, Tim and Crosas, {Mercè} and Dillo, Ingrid and Dumon, Olivier and Edmunds, Scott and Evelo, Chris T. and Finkers, Richard and Gonzalez-Beltran, Alejandra and Gray, Alasdair J.G. and Groth, Paul and Goble, Carole and Grethe, Jeffrey S. and Heringa, Jaap and {{\\textquoteright}t Hoen}, Peter A.C and Hooft, Rob and Kuhn, Tobias and Kok, Ruben and Kok, Joost and Lusher, Scott J. and Martone, Maryann E. and Mons, Albert and Packer, Abel L. and Persson, Bengt and Rocca-Serra, Philippe and Roos, Marco and van Schaik, Rene and Sansone, Susanna-Assunta and Schultes, Erik and Sengstag, Thierry and Slater, Ted and Strawn, George and Swertz, Morris A. and Thompson, Mark and van der Lei, Johan and van Mulligen, Erik and Velterop, Jan and Waagmeester, Andra and Wittenburg, Peter and Wolstencroft, Katherine and Zhao, Jun and Mons, Barend},\n    year = {2016},\n    month = {03},\n    date = {2016-03-15},\n    journal = {Scientific Data},\n    volume = {3},\n    number = {1},\n    doi = {10.1038/sdata.2016.18},\n    url = {http://dx.doi.org/10.1038/sdata.2016.18},\n    langid = {en}\n}\n\n@article{gorgolewski2016,\n    title = {The brain imaging data structure, a format for organizing and describing outputs of neuroimaging experiments},\n    author = {Gorgolewski, Krzysztof J. and Auer, Tibor and Calhoun, Vince D. and Craddock, R. Cameron and Das, Samir and Duff, Eugene P. and Flandin, Guillaume and Ghosh, Satrajit S. and Glatard, Tristan and Halchenko, Yaroslav O. and Handwerker, Daniel A. and Hanke, Michael and Keator, David and Li, Xiangrui and Michael, Zachary and Maumet, Camille and Nichols, B. Nolan and Nichols, Thomas E. and Pellman, John and Poline, Jean-Baptiste and Rokem, Ariel and Schaefer, Gunnar and Sochat, Vanessa and Triplett, William and Turner, Jessica A. and Varoquaux, {Gaël} and Poldrack, Russell A.},\n    year = {2016},\n    month = {06},\n    date = {2016-06-21},\n    journal = {Scientific Data},\n    volume = {3},\n    number = {1},\n    doi = {10.1038/sdata.2016.44},\n    url = {http://dx.doi.org/10.1038/sdata.2016.44},\n    langid = {en}\n}\n\n@article{broman2018,\n  title = {Data Organization in Spreadsheets},\n  author = {Karl W. Broman and Kara H. Woo},\n  year = {2018},\n  month = {04},\n  date = {2018-04-24},\n  journal = {The American Statistician},\n  volume = {72},\n  number = {1},\n  pages ={2-10},\n  doi = {10.1080/00031305.2017.1375989},\n  url = {https://doi.org/10.1080/00031305.2017.1375989},\n  langid = {en}\n}\n  \n@article{wickham2014,\n  title = {Tidy Data},\n  author = {Hadley Wickham},\n  year = {2014},\n  month = {08},\n  journal = {Jornal of Statistical Software},\n  volume = {59},\n  number = {10},\n  pages = {1-23},\n  doi = {10.18637/jss.v059.i10},\n  url = {https://doi.org/10.18637/jss.v059.i10},\n  langid = {en}\n}\n  \n@Manual{fischetti2023,\n  title = {assertr: Assertive Programming for R Analysis Pipelines},\n  author = {Fischetti, Tony},\n  year = {2023},\n  month = {11},\n  date = {2023-11-23},\n  note = {R package version 3.0.1https://docs.ropensci.org/assertr/ (website)\nhttps://github.com/ropensci/assertr},\n  doi = {10.32614/CRAN.package.assertr},\n  url = {https://docs.ropensci.org/assertr/},\n}\n\n@article{reinhart2010,\n  author = {Reinhart, Carmen M. and Rogoff, Kenneth S.},\n  title = {Growth in a Time of Debt},\n  journal = {American Economic Review},\n  volume = {100},\n  number = {2},\n  year = {2010},\n  month = {May},\n  pages = {573–78},\n  doi = {10.1257/aer.100.2.573},\n  url = {https://www.aeaweb.org/articles?id=10.1257/aer.100.2.573},\n}\n\n@article{herndon2014,\n  title = {Does high public debt consistently stifle economic growth? A critique of Reinhart and Rogoff},\n  author = {Thomas Herndon and Michael Ash and Robert Pollin},\n  year = {2014},\n  month = {03},\n  journal = {Cambridge Journal of Economics},\n  volume = {38},\n  number = {2},\n  pages = {257-279},\n  doi = {10.1093/cje/bet075},\n  url = {https://doi.org/10.1093/cje/bet075}\n}\n\n@article{ziemann2016,\n  title = {Gene name erorrs are widespread in the scientific literature},\n  author = {Ziemann, M. and Eren, Y. and El-Osta, A.},\n  year = {2016},\n  month = {08},\n  date = {2016-08-23},\n  journal = {Genome Biology},\n  volume = {17},\n  doi = {10.1186/s13059-016-1044-7},\n  url = {https://doi.org/10.1186/s13059-016-1044-7}\n}\n\n@article{esteban2019,\n  title = {fMRIPrep: a robust preprocessing pipeline for functional MRI},\n  author = {Oscar Esteban and Christopher J. Markiewicz and Ross W. Blair and Craig A. Moodie and A. Ilkay Isik and Asier Erramuzpe and James D. Kent and Mathias Goncalves and Elizabeth DuPre and Medeleine Snyder and Hiroyuki Oya and Satrajit S. Gish and Jessey Wright and Joke Durnez and Russell A Poldrack and Krzysztof J. Gorgolewski},\n  year = {2019},\n  month = {01},\n  journal = {Nature Methods},\n  volume = {16},\n  pages = {111-116},\n  doi = {10.1038/s41592-018-0235-4},\n  url = {https://doi.org/10.1038/s41592-018-0235-4}\n}\n\n@book{wittkuhn2024,\n  author = {Lennart Wittkuhn and Konrad Pagenstedt},\n  title = {Version Control Book},\n  publisher = {ZFDM Repository},\n  year = {2024},\n  month = {02},\n  doi = {10.25592/uhhfdm.14149},\n  url = {https://doi.org/10.25592/uhhfdm.14149}\n}\n\n@article{barker2022,\n  author = {Barker, Michelle and Chue Hong, Neil P. and Katz, Daniel S. and Lamprecht, Anna-Lena and Martinez-Ortiz, Carlos and Psomopoulos, Fotis and Harrow, Jennifer and Castro, Leyla Jael and Gruenpeter, Morane and Martinez, Paula Andrea and Honeyman, Tom},\n  title = {Introducing the FAIR Principles for research software},\n  year = {2022},\n  journal = {Scientific Data},\n  volume = {9},\n  pages = {622},\n  doi = {10.1038/s41597-022-01710-x},\n  url = {https://doi.org/10.1038/s41597-022-01710-x}\n  \n}\n\n@book{wickham2023,\n    title = {R for Data science: Import, Tidy, Transform, Visualize, and Model Data},\n    author = {Wickham, H. and Çetinkaya-Rundel, M. and Grolemund, G.},\n    year = {2023},\n    data = {2023},\n    publisher = {O'Reilly Media},\n    url = {https://r4ds.hadley.nz},\n    note = {License: CC BY-NC-ND 3.0 US}\n}\n\n@Manual{hester2024,\n    title = {lintr: A 'Linter' for R Code},\n    author = {Jim Hester and Florent Angly and Russ Hyde and Michael Chirico and Kun Ren and Alexander Rosenstock and Indrajeet Patil},\n    year = {2024},\n    note = {R package version 3.1.2},\n    url = {https://CRAN.R-project.org/package=lintr},\n}\n\n@Manual{mueller2020,\n    title = {here: A Simpler Way to Find Your Files},\n    author = {Kirill Müller},\n    year = {2020},\n    note = {R package version 1.0.1, https://github.com/r-lib/here},\n    url = {https://here.r-lib.org/},\n  }\n  \n@misc{rennie2024,\n  author       = {Nicola Rennie},\n  title        = {Writing Better R Code},\n  year         = {2024},\n  url          = {https://nrennie.rbind.io/training-better-r-code/},\n  note         = {Accessed on 2024-11-19}\n}\n\n@article{haslbeck2022,\n  author = {Jonas M. Haslbeck and Oisín Ryan and Donald J. Robinaugh and Lourens J. Waldorp and Denny Borsboom},\n  title = {Modeling Psychopathology: From Data Models to Formal Theories},\n  year = {2022},\n  journal = {Psychological Methods},\n  volume = {27},\n  issue = {6},\n  pages = {930-957},\n  doi = {10.1037/met0000303},\n  url = {https://doi.org/10.1037/met0000303}\n}\n\n@Manual{ushey2024,\n  title = {renv: Project Environments},\n  author = {Kevin Ushey and Hadley Wickham},\n  year = {2024},\n  note = {R package version 1.0.11, https://github.com/rstudio/renv},\n  url = {https://rstudio.github.io/renv/},\n}\n\n@misc{rapp2024,\n  title = {Robust R Code That Will Work Forever With {renv}},\n  url = {https://www.youtube.com/watch?v=Oen9xhEh8PY},\n  journal = {YouTube},\n  author = {Albert Rapp},\n  year = {2024},\n  month = {11},\n}\n\n@book{community2022,\n    title = {The Turing Way: A handbook for reproducible, ethical and collaborative research},\n    author = {{The Turing Way Community}},\n    year = {2022},\n    month = {07},\n    date = {2022-07-27},\n    publisher = {Zenodo},\n    doi = {10.5281/zenodo.3233853},\n    url = {https://zenodo.org/record/3233853},\n    note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}. Source: \\url{https://github.com/the-turing-way/the-turing-way}. Website: \\url{https://the-turing-way.netlify.app/}}\n}\n\n@misc{wikipedia2025,\n  title = {Modularity},\n  url = {https://en.wikipedia.org/wiki/Modularity},\n  author = {Wikipedia Contributors,},\n  year = {2025},\n  month = {02},\n  day = {10}\n}\n\n@article{artner2021,\n  title = {The Reproducibility of Statistical Results in Psychological Research: An Investigation Using Unpublished Raw Data},\n  author = {Richard Artner and Thomas Verliefde and Sara Steegen and Sara Gomes and Frits Traets and Francis Tuerlinckx and Wolf Vanpaemel},\n  year = {2021},\n  journal = {Psychological Methods},\n  volume = {26},\n  issue = {5},\n  pages = {527-546},\n  doi = {10.1037/met0000365},\n  url = {https://doi.org/10.1037/met0000365}\n}\n\n@article{crüwell2023,\n  title = {What’s in a Badge? A Computational Reproducibility Investigation of the Open Data Badge Policy in One Issue of Psychological Science},\n  author = {Sophia Crüwell and Deborah Apthorp and Bradley J. Baker and Lincoln Colling and Malte Elson and Sandra J. Geiger and Sebastian Lobentanzer and Jean Monéger and Alex Patterson and D. Samuel Schwarzkopf and Mirela Zaneva and Nicholas J. L. Brown},\n  year = {2023},\n  journal = {Psychological Science},\n  volume = {34},\n  issue = {4},\n  pages = {513-522},\n  doi = {10.1177/09567976221140828},\n  url = {https://doi.org/10.1177/09567976221140828}\n}\n\n@article{hardwicke2021,\n  title = {Analytic reproducibility in articles receiving open data badges at the Journal *Psychological Science*: an observational study},\n  author = {Tom E. Hardwicke and Manuel Bohn and Kyle MacDonald and Emily Hembacher and Michéle B. Nuijten and Benjamin N. Peloquin and Benjamin E. deMayo and Bria Long and Erica J. Yoon and Michael C. Frank},\n  year = {2021},\n  journal = {Royal Society Open Science},\n  volume = {8},\n  pages = {201494},\n  doi = {10.1098/rsos.201494},\n  url = {https://doi.org/10.1098/rsos.201494}\n}\n\n@article{obels2020,\n  title = {Analysis of Open Data and Computational Reproducibility in Registered Reports in Psychology},\n  author = {Pepijn Obels and Daniël Lakens and Nicholas A. Coles and Jaroslav Gottfried and Seth A. Green},\n  year = {2020},\n  journal = {Advances in Methods and Practices in Psychological Science},\n  volume = {3},\n  issue = {2},\n  pages = {229-237},\n  doi = {10.1177/2515245920918872},\n  url = {https://doi.org/10.1177/2515245920918872}\n}\n\n@article{lakomy2019,\n  title = {Open Science and the Science-Society Relationship},\n  author = {Martin Lakomý and Renata Hlavová and Hana Machackova},\n  year = {2019},\n  journal = {Society},\n  volume = {56},\n  pages = {246-255},\n  doi = {10.1007/s12115-019-00361-w},\n  url = {https://doi.org/10.1007/s12115-019-00361-w}\n}\n\n@book {cribb2010,\n    author = {Julian Cribb and Tjempaka Sari},\n    title = {Open Science: Sharing Knowledge in the Global Century},\n    pages = {230},\n    year = {2010},\n    doi = {10.1071/9780643097643},\n    publisher = {CSIRO Publishing},\n    isbn = {978-0-643-10183-8},\n    URL = {https://doi.org/10.1071/9780643097643}\n}\n\n@article{opensciencecollaboration2015,\n  title = {Estimating the reproducibility of psychological science},\n  author = {Open Science Collaboration,},\n  year = {2015},\n  month = {august},\n  date = {2015-08-28},\n  journal = {Science},\n  volume = {349},\n  pages = {aac4716},\n  doi = {10.1126/science.aac4716},\n  url = {https://doi.org/10.1126/science.aac4716}\n}\n\n@article{begley2012,\n  title = {Raise standards for preclinical cancer research},\n  author = {C. Glenn Begley and Lee M. Ellis},\n  year = {2012},\n  journal = {nature},\n  volume = {483},\n  pages = {531-533},\n  doi = {10.1038/483531a},\n  url = {https://doi.org/10.1038/483531a}\n}\n\n@article{stroop1935,\n  title = {Studies of interference in serial verbal reactions},\n  author = {Stroop, J. R.},\n  year = {1935},\n  journal = {Journal of Experimental Psychology},\n  volume = {18},\n  issue = {6},\n  pages = {643-662},\n  doi = {10.1037/h0054651},\n  url = {https://doi.org/10.1037/h0054651}\n}\n\n@article{williams1996,\n  title = {The emotional Stroop task and psychopathology},\n  author = {Williams, J. M. G. and Mathews, A. and MacLeod, C.},\n  year = {1996},\n  journal = {Psychological Bulletin},\n  volume = {120},\n  issue = {1},\n  pages = {3-24},\n  doi = {10.1037/0033-2909.120.1.3},\n  url = {https://doi.org/10.1037/0033-2909.120.1.3}\n}\n\n@article{poldrack2019,\n  title = {The Costs of Reproducibility},\n  journal = {Neuron},\n  volume = {101},\n  number = {1},\n  pages = {11-14},\n  year = {2019},\n  issn = {0896-6273},\n  doi = {https://doi.org/10.1016/j.neuron.2018.11.030},\n  url = {https://www.sciencedirect.com/science/article/pii/S0896627318310390},\n  author = {Russell A. Poldrack},\n  abstract = {Improving the reproducibility of neuroscience research is of great concern, especially to early-career researchers (ECRs). Here I outline the potential costs for ECRs in adopting practices to improve reproducibility. I highlight the ways in which ECRs can achieve their career goals while doing better science and the need for established researchers to support them in these efforts.}\n}\n\n@misc{yarkoni2018,\n  title = {No, it’s not The Incentives — it’s you},\n  author = {Tal Yarkoni},\n  url = {https://talyarkoni.org/blog/2018/10/02/no-its-not-the-incentives-its-you/},\n  year = {2018},\n  month = {October},\n  day = {2},\n  note = {Accessed: 2025-04-04}\n}\n\n@book{wagner2021,\n  title        = {The DataLad Handbook},\n  author       = {DataLad Community},\n  year         = {2021},\n  publisher    = {DataLad},\n  url          = {https://handbook.datalad.org/},\n  doi          = {https://doi.org/10.5281/zenodo.3608611},\n  note = {License: \\href{https://creativecommons.org/licenses/by-sa/4.0/}{CC BY-SA 4.0}. Source: \\url{https://github.com/datalad-handbook/book?tab=License-1-ov-file}}\n}\n\n@article{laulie2023,\n  title = {Exploring self-regulation theory as a mechanism of the effects of psychological contract fulfillment: The role of emotional intelligence},\n  author = {Lyonel Laulié and Gabriel Briceño-Jiménez and Gisselle Henríquez-Gomez},\n  year = {2023},\n  journal = {Frontiers in Psychology},\n  volume = {14},\n  url = {https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2023.1090094},\n  doi = {10.3389/fpsyg.2023.1090094}\n}\n\n@article{nuijten2024,\n  author = {Michèle B. Nuijten and Jelte M. Wicherts},\n  title = {Implementing Statcheck During Peer Review Is Related to a Steep Decline in Statistical-Reporting Inconsistencies},\n  journal = {Advances in Methods and Practices in Psychological Science},\n  year = {2024},\n  volume = {7},\n  issue = {2},\n  doi = {10.1177/25152459241258945},\n  url = {https://doi.org/10.1177/25152459241258945}\n}\n\n@article{schuck2016,\n    title = {Human Orbitofrontal Cortex Represents a Cognitive Map of State Space},\n    author = {Schuck, {Nicolas W.} and Cai, {Ming Bo} and Wilson, {Robert C.} and Niv, Yael},\n    year = {2016},\n    month = {09},\n    date = {2016-09},\n    journal = {Neuron},\n    pages = {1402--1412},\n    volume = {91},\n    number = {6},\n    doi = {10.1016/j.neuron.2016.08.019},\n    url = {http://dx.doi.org/10.1016/j.neuron.2016.08.019},\n    langid = {en}\n}\n\n\n\nUse the citation handle of the .bib-entry that you want to cite. For example use @chacon2014 to cite Chacon and Straub (2014). For details, see the chapter on “Citations & Footnotes” in the Quarto documentation. Add the specific references that you used to the bottom of the document. If the reference consists of multiple chapters and pages, try to specify the exact chapter or page.\n\n\nAdd a new reference\n\nOpen references.qmd.\nSwitch to the Visual Quarto editor.\nMove the cursor into any place in the document.\nClick on Insert and select @ Citation ....\nIf the reference has a DOI:\n\nSelect From DOI.\nPaste the DOI.\nSelect Insert.\n\nThis should add the new reference to references.bib.\nMove the citation key to the correct place in the document.\n\n\n\nAdd license information\nWe want to keep track of license information. If you add a new reference, please add the license information manually.\n\nGo to references.bib and find the reference.\nInside the .bib-entry for the reference add a new field called note that includes the license information.\n\n\n@book{\n  note = {License: CC BY-NC}\n}\n\nFor example, this is the references for Chacon and Straub (2014):\n\n@book{chacon2014,\n    title = {Pro Git},\n    author = {Chacon, Scott and Straub, Ben},\n    year = {2014},\n    date = {2014},\n    publisher = {Apress},\n    doi = {10.1007/978-1-4842-0076-6},\n    url = {http://dx.doi.org/10.1007/978-1-4842-0076-6},\n    note = {License: CC BY-NC}\n}",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-code",
    "href": "contributing.html#sec-code",
    "title": "Contributing",
    "section": "Code",
    "text": "Code\n\n “HTML Code Blocks” in the Quarto documentation\n\n\nAdd code snippets\nAdd code snippets to a Quarto document like this:\n```{zsh}\necho \"Hello World!\"\n```\n\n\n\n\n\n\nDisable code execution in all Quarto documents by default!\n\n\n\nPlace the following code in the YAML header of each Quarto document:\n\n\n\nCode\n\nengine: knitr\nexecute:\n  eval: false\n\n\n\n\n Example: Click here for the YAML header of the current document.\n\n\n\n\ncontributing.qmd\n\n---\nengine: knitr\nexecute: \n  eval: false\n---\n\n\n\n\n\nClick here to learn more.\n\nQuarto enables the inclusion of executable code blocks in Markdown. This empowers users to create reproducible documents and reports, as the code needed for generating the output is embedded within the document and automatically executed during rendering.\nHowever, in this guide, we usually only want to display code but not execute it! We therefore need to disable code execution in the YAML header of each Quarto document.\nThe YAML header in a Quarto document is used to specify important metadata and settings for the document. It is typically placed at the top of the document enclosed between three dashes (---) to separate it from the main content. The YAML header provides instructions to the Quarto rendering engine on how to process and present the document.\n\n\n\n\n\nReference external code\nYou can reference external code. For example, the following code block will:\n\n\n\n\n\n\n\n\n\ndescription\ncode\n\n\n\n\n1\nreference the _quarto.yml file\n#&#124; file: _quarto.yml\n\n\n2\ndisplay the first five lines of code\necho=c(1:5)\n\n\n3\nadd code line numbers\n#&#124; code-line-numbers: true\n\n\n4\nadd a filename to the code block\nfilename=\"_quarto.yml\"\n\n\n\n```{bash, filename=\"_quarto.yml\", echo=c(1:5)}\n#| file: _quarto.yml\n#| code-line-numbers: true\n```\n\n\n Click here for the output of this example.\n\n\n\n\n_quarto.yml\n\nproject:\n  type: book\n  execute-dir: project\n  output-dir: _book\n  preview: \n\n\n\n\n\nAdd code annotations\n\n “Code Annotation” in the Quarto documentation\n\n\nCode blocks and executable code cells in Quarto can include line-based annotations. Line-based annotations provide a way to attach explanation to lines of code much like footnotes.\n\nFor example, this is a code annotation for the git status command:\n```{zsh}\ngit status\n```\n1. `git status` displays the state of the working directory and the staging area.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-images",
    "href": "contributing.html#sec-images",
    "title": "Contributing",
    "section": "Images",
    "text": "Images\n\nBackground\nImages are stored in a NextCloud folder. They are downloaded into the /images folder using the command specified in the Makefile.\n\n\nInstallation\nYou need to install the following packages:\n\nGNU Make\n\n\n macOS Windows Linux\n\n\nGNU Make should already be installed. Try by entering the following command into the Terminal:\n\n\n\nCode\n\nmake --version\n\n\n\n\nFind instructions to install make on Windows here.\n\n\nTBA\n\n\n\n\n\nRetrieve images\nAfter you installed all the required software, run this command:\n\nmake images\n\n\n\n\n\n\n\nWhat’s a Makefile and what does it do?\n\n\n\n\n\n\n\n\nMakefile\n\nIMAGES_URL=https://cloud.uni-hamburg.de/s/pzEHT5DF3PzFdLH/download\nIMAGES_ARCHIVE=repro-book-images.zip\nIMAGES_DIR=images/\n\nall: render\n\n.PHONY: preview\npreview:\n    quarto preview\n\n.PHONY: render\nrender: clean images\n    quarto render\n\n.PHONY: pdf\npdf: clean images\n    quarto render --profile pdf\n    \n.PHONY: deploy\ndeploy: clean images\n    quarto publish gh-pages\n\n#.PHONY: images\n#images:\n#   curl $(IMAGES_URL) -o $(IMAGES_ARCHIVE)\n#   unzip -j -o $(IMAGES_ARCHIVE) -d $(IMAGES_DIR)\n#   rm -f $(IMAGES_ARCHIVE)\n\n.PHONY: clean\nclean:\n    rm -rf $(IMAGES_DIR)* _book/\n\n\n\n\n\n\n\nAdd a new image\n\nBecome a collaborator on the UHH Cloud folder.\nGo to the UHH Cloud folder.\nPlace the new image inside the folder. Please use - to separate words in the filename.\nReference the image in the Quarto document relative to the root of the project directory:\n\n\n![](static/NEW-IMAGE.png)\n\n\n\nDownload images in pre-render command\nIt’s also possible to include the make static as a project script in the pre-render script. This would re-execute make static before every render. For the moment, we disabled this option, but it can be enabled in _quarto.yml.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-variables",
    "href": "contributing.html#sec-variables",
    "title": "Contributing",
    "section": "Variables",
    "text": "Variables\n\n “Variables” in the Quarto documentation\n\nQuarto offers a number of ways to include dynamic variables within documents. Dynamic variables are useful for externalizing content that varies depending on context, or as an alternative to repeating a value in multiple places.\n\nCreating a variable\nIn this project, we use a project-level _variables.yml file to define variables. Variables can be either simple values or can include arbitrary Markdown content.\n\n\n\n_variables.yml (excerpt)\n\n  name: \"repro-book\"\n  title: \"The Repro Book\"\n\n\n\n\n Click here to view the full _variables.yml file of this project.\n\n\n\n\n_variables.yml\n\nproject:\n  name: \"repro-book\"\n  title: \"The Repro Book\"\n  subtitle: \"A Guide to Reproducible Research\"\n  description: \"The Repro Book - A Guide to Reproducible Research\"\n  email: \"lennart.wittkuhn@uni-hamburg.de\"\n  mailto: \"mailto:{{&lt; var project.email &gt;}}\"\n  site-url: \"https://lennartwittkuhn.com/repro-book\"\n  repo-host: \"GitHub\"\n  repo-url: \"https://github.com/lnnrtwttkhn/repro-book\"\n  issue-url: \"{{&lt; var project.repo-url &gt;}}/issues\"\n  new-issue-url: \"{{&lt; var project.repo-url &gt;}}/issues/new\"\n  contributors-url: \"{{&lt; var project.repo-url &gt;}}?tab=readme-ov-file#contributors\"\n  images-url: \"https://cloud.uni-hamburg.de/s/pzEHT5DF3PzFdLH\"\n  license-long: \"Creative Commons Attribution 4.0 International ([CC BY 4.0](https://creativecommons.org/licenses/by/4.0/))\"\n  license-short: \"[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/)\"\n  license-badge: \"[![License: CC BY 4.0](https://img.shields.io/badge/License-CC_BY_4.0-lightgrey.svg)](https://creativecommons.org/licenses/by/4.0/)\"\n  duration: \"2024 -- 2025\"\n  website-badge: \"[![Website](https://img.shields.io/website?url=https%3A%2F%2Flennartwittkuhn.com%2Frepro-book%2F)]({{&lt; var project.site-url &gt;}})\"\n  codespell-badge: \"[![Codespell]({{&lt; var project.repo-url &gt;}}/actions/workflows/codespell.yml/badge.svg)]({{&lt; var project.repo-url &gt;}}/actions/workflows/codespell.yml)\"\n  all-contributors-badge: \"[![All Contributors](https://img.shields.io/github/all-contributors/projectOwner/projectName?color=ee8449&style=flat-square)]({{&lt; var project.contributors-url &gt;}})\"\n  rproj: \"repro-book.Rproj\"\n  readme: \"https://github.com/lnnrtwttkhn/repro-book/blob/main/README.md\"\nlinks:\n  uhh: \"https://www.uni-hamburg.de/en.html\"\n  uhh-ddlitlab: \"https://www.isa.uni-hamburg.de/en/ddlitlab.html\"\n  uhh-isa: \"https://www.isa.uni-hamburg.de/\"\n  stiftung-hochschullehre: \"https://stiftung-hochschullehre.de/en/\"\n  funding-info: \"https://stiftung-hochschullehre.de/projekt/ddlitlab/\"\n  plausible: \"https://plausible.io/\"\n  quarto: \"https://quarto.org/\"\n  markdown: \"https://www.markdownguide.org/\"\n  bids: \"https://bids.neuroimaging.io\"\n  psych-ds: \"https://psych-ds.github.io\"\n  git: \"https://git-scm.com/\"\n  github: \"https://github.com/\"\n  version-control-book: \"https://lennartwittkuhn.com/version-control-book/\"\n  gnu-make-windows: \"https://leangaurav.medium.com/how-to-setup-install-gnu-make-on-windows-324480f1da69\"\n  mpib: \"https://www.mpib-berlin.mpg.de/en\"\n  issues: \"https://github.com/lnnrtwttkhn/repro-book/issues\"\n\n\n\n\n\nUsing a variable\nThe var shortcode then allows to include references to those variables within any document in this project. For example, to include the link to the Nextcloud folder that stores static contents (images etc.) as a variable in a document, use:\n\n\n\nCode\n\n{{&lt; var project.images-url &gt;}}\n\n\nThis will inject the contents of the variable into the document. In this example, {{&lt; var project.images-url &gt;}} will be displayed as https://cloud.uni-hamburg.de/s/pzEHT5DF3PzFdLH.\nFor more details on variables, read the chapter on Variables in the Quarto documentation.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-icons",
    "href": "contributing.html#sec-icons",
    "title": "Contributing",
    "section": "Fontawesome Icons",
    "text": "Fontawesome Icons\n\n Font Awesome Extension for Quarto\n Free Font Awesome icons\n\nWe use the Font Awesome Extension for Quarto to include Font Awesome icons.\n\nThis extension provides support including free icons provided by Font Awesome. Icons can be used in both HTML (via Font Awesome 6 Free) and PDF (via the fontawesome5 LaTeX package).\n\nThis extension includes support for only free Font Awesome icons.\nTo embed an icon, use the {{&lt; fa &gt;}} shortcode. For example, {{&lt; fa thumbs-up &gt;}} will result in . For details, see the project documentation on GitHub.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#style-guide",
    "href": "contributing.html#style-guide",
    "title": "Contributing",
    "section": "Style Guide",
    "text": "Style Guide\nWe have compiled a set of guidelines to keep a consistent style across all chapters of the book.\n\nSummary\n\nWrite one sentence per line\nUse consistent language\n\n\n\nWrite one sentence per line\nPlease write each sentence on a new line. Having each sentence on a new line will make no difference to how the text is displayed, there will still be paragraphs, but it will mean that any pull requests will be easier to check; the changes will be on a single line instead of somewhere in a paragraph. Consider the example below.\nToday you are you, that is truer than true. There is no one alive who is youer than you. - Dr Seuss\nA pull request on this correcting it to have a ‘.’ after Dr would show as a change to the whole paragraph. Contrast this with the next example which will be displayed online in the exact same way, but would see a change to a single line.\nToday you are you, that is truer than true.\nThere is no one alive who is youer than you.\n- Dr Seuss",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "contributing.html#sec-acknowledgements",
    "href": "contributing.html#sec-acknowledgements",
    "title": "Contributing",
    "section": "Acknowledgements & Attribution",
    "text": "Acknowledgements & Attribution\n\nThe Quarto documentation (allaire2022?), in particular the chapters on Variables, Quarto Extensions, “Code Annotation” (License: GNU GPL v2)\n(blischak2016?)\nThe Font Awesome Extension for Quarto (License: MIT)\nThe Turing Way Community (2022): Style Guide\n\n\n\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6.\n\n\nGorgolewski, Krzysztof J., Tibor Auer, Vince D. Calhoun, R. Cameron Craddock, Samir Das, Eugene P. Duff, Guillaume Flandin, et al. 2016. “The Brain Imaging Data Structure, a Format for Organizing and Describing Outputs of Neuroimaging Experiments.” Scientific Data 3 (1). https://doi.org/10.1038/sdata.2016.44.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.",
    "crumbs": [
      "Contributing"
    ]
  }
]